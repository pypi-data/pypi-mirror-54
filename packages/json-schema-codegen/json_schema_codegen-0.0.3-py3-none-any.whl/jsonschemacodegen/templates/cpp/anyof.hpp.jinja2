{%macro NestedObjectName(name) -%}
    {{-name | UpperCamelCase-}}
{%-endmacro%}
{%-macro ObjectType(propName, propSchema) -%}
    {%-if '$ref' in propSchema -%}
        {{-loader.Reference(resolver, propSchema['$ref'])-}}
    {%-else-%}
        {{-NestedObjectName(propName)-}}
    {%-endif-%}
{%-endmacro%}
{%-macro ObjectName(propName, propSchema) -%}
    {%-if '$ref' in propSchema -%}
        {{-resolver.GetName(propSchema['$ref'])|UpperCamelCase-}}
    {%-else-%}
        {{-NestedObjectName(propName)-}}
    {%-endif-%}
{%-endmacro%}

/*! {{Name}} is an object containing the union of {%for s in schema.oneOf %}{%set componentName%}Component{{loop.index}}{%endset%}{{ObjectType(componentName, s)}}{%if not loop.last%}, {%endif%}{%endfor %}
 {%-if schema.description %}
 * {{schema.description}}
 {%-endif%}
 */
class {{Name}}
{
public:
    {%-import 'loader.jinja2' as loader%}
    {%-for s in schema.anyOf %}{%set componentName%}Component{{loop.index}}{%endset%}
    {{loader.Class('hpp', resolver, [Name], [], componentName, s) | indent(4) }}
    
    {%endfor%}

    {{Name}}();
    virtual ~{{Name}}() = default;

    {%-for s in schema.anyOf %}{%set componentName%}Component{{loop.index}}{%endset%}
    boost::optional<{{ObjectType(componentName, s)}}> Get{{ObjectName(componentName, s)}}() const;
    void Set{{ObjectName(componentName, s)}}(const {{ObjectType(componentName, s)}}& component);
    {%endfor%}

    static {{Name}} FromJson(const rapidjson::Value& json);

    void ToJson(rapidjson::Value& value, rapidjson::Value::AllocatorType& allocator) const;

private:
    {%-for s in schema.anyOf %}{%set componentName%}Component{{loop.index}}{%endset%}
    boost::optional<{{ObjectType(componentName, s)}}> {{componentName|privatize}};
    {%-endfor%}
};
