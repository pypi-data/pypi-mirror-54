# -*- coding: utf-8 -*-

"""
bandwidth

This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from bandwidth.api_helper import APIHelper
from bandwidth.configuration import Configuration
from bandwidth.configuration import Server
from bandwidth.http.api_response import ApiResponse
from bandwidth.voice.controllers.base_controller import BaseController
from bandwidth.http.auth.voice_basic_auth import VoiceBasicAuth
from bandwidth.voice.models.api_call_response import ApiCallResponse
from bandwidth.voice.exceptions.bandwidth_exception import BandwidthException
from bandwidth.voice.exceptions.bandwidth_not_found_exception import BandwidthNotFoundException
from bandwidth.voice.exceptions.bandwidth_rate_limit_error_exception import BandwidthRateLimitErrorException


class APIController(BaseController):

    """A Controller to access Endpoints in the bandwidth API."""

    def __init__(self, config, call_back=None):
        super(APIController, self).__init__(config, call_back)

    def create_call(self,
                    account_id,
                    body=None):
        """Does a POST request to /accounts/{accountId}/calls.

        Creates a call request

        Args:
            account_id (string): TODO: type description here.
            body (ApiCreateCallRequest, optional): TODO: type description
                here.

        Returns:
            ApiCallResponse: Response from the API. success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/accounts/{accountId}/calls'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': account_id
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise BandwidthException('400 request is malformed or invalid', _response)
        elif _response.status_code == 401:
            raise BandwidthException('401 The specified user does not have access to the account', _response)
        elif _response.status_code == 403:
            raise BandwidthException('403  The user does not have access to the API', _response)
        elif _response.status_code == 404:
            raise BandwidthNotFoundException('404 he call-id is no longer active, or the path is not found', _response)
        elif _response.status_code == 409:
            raise BandwidthException('409 Error when modifying a call that is unable to be modified', _response)
        elif _response.status_code == 415:
            raise BandwidthException('415 The content-type of the request is incorrect', _response)
        elif _response.status_code == 429:
            raise BandwidthRateLimitErrorException('429 The rate limit has been reached', _response)
        elif _response.status_code == 500:
            raise BandwidthException('500 Unknown server error', _response)
        elif _response.status_code == 503:
            raise BandwidthException('503 The service is unavailable for some reason', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ApiCallResponse.from_dictionary)
        _result = ApiResponse(_response, body=decoded)
        return _result

    def modify_call(self,
                    account_id,
                    call_id,
                    body=None):
        """Does a POST request to /accounts/{accountId}/calls/{callId}.

        Creates a call request

        Args:
            account_id (string): TODO: type description here.
            call_id (string): TODO: type description here.
            body (ApiModifyCallRequest, optional): TODO: type description
                here.

        Returns:
            void: Response from the API. successful operation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/accounts/{accountId}/calls/{callId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'accountId': account_id,
            'callId': call_id
        })
        _query_builder = self.config.get_base_uri(Server.VOICEDEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        VoiceBasicAuth.apply(self.config, _request)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise BandwidthException('400 request is malformed or invalid', _response)
        elif _response.status_code == 401:
            raise BandwidthException('401 The specified user does not have access to the account', _response)
        elif _response.status_code == 403:
            raise BandwidthException('403  The user does not have access to the API', _response)
        elif _response.status_code == 404:
            raise BandwidthNotFoundException('404 he call-id is no longer active, or the path is not found', _response)
        elif _response.status_code == 409:
            raise BandwidthException('409 Error when modifying a call that is unable to be modified', _response)
        elif _response.status_code == 415:
            raise BandwidthException('415 The content-type of the request is incorrect', _response)
        elif _response.status_code == 429:
            raise BandwidthRateLimitErrorException('429 The rate limit has been reached', _response)
        elif _response.status_code == 500:
            raise BandwidthException('500 Unknown server error', _response)
        elif _response.status_code == 503:
            raise BandwidthException('503 The service is unavailable for some reason', _response)
        self.validate_response(_response)

        # Return appropriate type
        ApiResponse(_response)