# coding: utf-8

"""
    Key Manager API

    API Responsible for management the tools' keys   # noqa: E501

    OpenAPI spec version: v1
    Contact: paulossjunior@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from key_management_client.api_client import ApiClient


class EntitiesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def entities_create(self, data, **kwargs):  # noqa: E501
        """entities_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_create(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Entity_ data: (required)
        :return: Entity_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.entities_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.entities_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def entities_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """entities_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_create_with_http_info(data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Entity_ data: (required)
        :return: Entity_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entities_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `entities_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/entities/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Entity_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entities_delete(self, id, **kwargs):  # noqa: E501
        """entities_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this entity. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.entities_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.entities_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def entities_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """entities_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this entity. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entities_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `entities_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/entities/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entities_externalid_ontologytype_read(self, external_id, ontology_type, **kwargs):  # noqa: E501
        """entities_externalid_ontologytype_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_externalid_ontologytype_read(external_id, ontology_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_id: (required)
        :param str ontology_type: (required)
        :return: list[Entity_]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.entities_externalid_ontologytype_read_with_http_info(external_id, ontology_type, **kwargs)  # noqa: E501
        else:
            (data) = self.entities_externalid_ontologytype_read_with_http_info(external_id, ontology_type, **kwargs)  # noqa: E501
            return data

    def entities_externalid_ontologytype_read_with_http_info(self, external_id, ontology_type, **kwargs):  # noqa: E501
        """entities_externalid_ontologytype_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_externalid_ontologytype_read_with_http_info(external_id, ontology_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_id: (required)
        :param str ontology_type: (required)
        :return: list[Entity_]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_id', 'ontology_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entities_externalid_ontologytype_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'external_id' is set
        if ('external_id' not in params or
                params['external_id'] is None):
            raise ValueError("Missing the required parameter `external_id` when calling `entities_externalid_ontologytype_read`")  # noqa: E501
        # verify the required parameter 'ontology_type' is set
        if ('ontology_type' not in params or
                params['ontology_type'] is None):
            raise ValueError("Missing the required parameter `ontology_type` when calling `entities_externalid_ontologytype_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'external_id' in params:
            path_params['external_id'] = params['external_id']  # noqa: E501
        if 'ontology_type' in params:
            path_params['ontology_type'] = params['ontology_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/entities/externalid/{external_id}/ontologytype/{ontology_type}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Entity_]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entities_externalid_ontologytype_read_0(self, external_id, format, ontology_type, **kwargs):  # noqa: E501
        """entities_externalid_ontologytype_read_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_externalid_ontologytype_read_0(external_id, format, ontology_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_id: (required)
        :param str format: (required)
        :param str ontology_type: (required)
        :return: list[Entity_]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.entities_externalid_ontologytype_read_0_with_http_info(external_id, format, ontology_type, **kwargs)  # noqa: E501
        else:
            (data) = self.entities_externalid_ontologytype_read_0_with_http_info(external_id, format, ontology_type, **kwargs)  # noqa: E501
            return data

    def entities_externalid_ontologytype_read_0_with_http_info(self, external_id, format, ontology_type, **kwargs):  # noqa: E501
        """entities_externalid_ontologytype_read_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_externalid_ontologytype_read_0_with_http_info(external_id, format, ontology_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_id: (required)
        :param str format: (required)
        :param str ontology_type: (required)
        :return: list[Entity_]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_id', 'format', 'ontology_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entities_externalid_ontologytype_read_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'external_id' is set
        if ('external_id' not in params or
                params['external_id'] is None):
            raise ValueError("Missing the required parameter `external_id` when calling `entities_externalid_ontologytype_read_0`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `entities_externalid_ontologytype_read_0`")  # noqa: E501
        # verify the required parameter 'ontology_type' is set
        if ('ontology_type' not in params or
                params['ontology_type'] is None):
            raise ValueError("Missing the required parameter `ontology_type` when calling `entities_externalid_ontologytype_read_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'external_id' in params:
            path_params['external_id'] = params['external_id']  # noqa: E501
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501
        if 'ontology_type' in params:
            path_params['ontology_type'] = params['ontology_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/entities/externalid/{external_id}/ontologytype/{ontology_type}{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Entity_]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entities_externalid_read(self, external_id, **kwargs):  # noqa: E501
        """entities_externalid_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_externalid_read(external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_id: (required)
        :return: list[Entity_]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.entities_externalid_read_with_http_info(external_id, **kwargs)  # noqa: E501
        else:
            (data) = self.entities_externalid_read_with_http_info(external_id, **kwargs)  # noqa: E501
            return data

    def entities_externalid_read_with_http_info(self, external_id, **kwargs):  # noqa: E501
        """entities_externalid_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_externalid_read_with_http_info(external_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_id: (required)
        :return: list[Entity_]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entities_externalid_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'external_id' is set
        if ('external_id' not in params or
                params['external_id'] is None):
            raise ValueError("Missing the required parameter `external_id` when calling `entities_externalid_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'external_id' in params:
            path_params['external_id'] = params['external_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/entities/externalid/{external_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Entity_]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entities_externalid_read_0(self, external_id, format, **kwargs):  # noqa: E501
        """entities_externalid_read_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_externalid_read_0(external_id, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_id: (required)
        :param str format: (required)
        :return: list[Entity_]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.entities_externalid_read_0_with_http_info(external_id, format, **kwargs)  # noqa: E501
        else:
            (data) = self.entities_externalid_read_0_with_http_info(external_id, format, **kwargs)  # noqa: E501
            return data

    def entities_externalid_read_0_with_http_info(self, external_id, format, **kwargs):  # noqa: E501
        """entities_externalid_read_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_externalid_read_0_with_http_info(external_id, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_id: (required)
        :param str format: (required)
        :return: list[Entity_]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_id', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entities_externalid_read_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'external_id' is set
        if ('external_id' not in params or
                params['external_id'] is None):
            raise ValueError("Missing the required parameter `external_id` when calling `entities_externalid_read_0`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `entities_externalid_read_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'external_id' in params:
            path_params['external_id'] = params['external_id']  # noqa: E501
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/entities/externalid/{external_id}{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Entity_]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entities_list(self, **kwargs):  # noqa: E501
        """entities_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Entity_]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.entities_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.entities_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def entities_list_with_http_info(self, **kwargs):  # noqa: E501
        """entities_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Entity_]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entities_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/entities/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Entity_]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entities_ontologyid_read(self, ontology_id, **kwargs):  # noqa: E501
        """entities_ontologyid_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_ontologyid_read(ontology_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ontology_id: (required)
        :return: list[Entity_]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.entities_ontologyid_read_with_http_info(ontology_id, **kwargs)  # noqa: E501
        else:
            (data) = self.entities_ontologyid_read_with_http_info(ontology_id, **kwargs)  # noqa: E501
            return data

    def entities_ontologyid_read_with_http_info(self, ontology_id, **kwargs):  # noqa: E501
        """entities_ontologyid_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_ontologyid_read_with_http_info(ontology_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ontology_id: (required)
        :return: list[Entity_]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ontology_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entities_ontologyid_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ontology_id' is set
        if ('ontology_id' not in params or
                params['ontology_id'] is None):
            raise ValueError("Missing the required parameter `ontology_id` when calling `entities_ontologyid_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ontology_id' in params:
            path_params['ontology_id'] = params['ontology_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/entities/ontologyid/{ontology_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Entity_]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entities_ontologyid_read_0(self, format, ontology_id, **kwargs):  # noqa: E501
        """entities_ontologyid_read_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_ontologyid_read_0(format, ontology_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: (required)
        :param str ontology_id: (required)
        :return: list[Entity_]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.entities_ontologyid_read_0_with_http_info(format, ontology_id, **kwargs)  # noqa: E501
        else:
            (data) = self.entities_ontologyid_read_0_with_http_info(format, ontology_id, **kwargs)  # noqa: E501
            return data

    def entities_ontologyid_read_0_with_http_info(self, format, ontology_id, **kwargs):  # noqa: E501
        """entities_ontologyid_read_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_ontologyid_read_0_with_http_info(format, ontology_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: (required)
        :param str ontology_id: (required)
        :return: list[Entity_]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', 'ontology_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entities_ontologyid_read_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `entities_ontologyid_read_0`")  # noqa: E501
        # verify the required parameter 'ontology_id' is set
        if ('ontology_id' not in params or
                params['ontology_id'] is None):
            raise ValueError("Missing the required parameter `ontology_id` when calling `entities_ontologyid_read_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501
        if 'ontology_id' in params:
            path_params['ontology_id'] = params['ontology_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/entities/ontologyid/{ontology_id}{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Entity_]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entities_organization_external_reference_read(self, external_type, organization_id, **kwargs):  # noqa: E501
        """entities_organization_external_reference_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_organization_external_reference_read(external_type, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_type: (required)
        :param str organization_id: (required)
        :return: list[ExternalReference_]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.entities_organization_external_reference_read_with_http_info(external_type, organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.entities_organization_external_reference_read_with_http_info(external_type, organization_id, **kwargs)  # noqa: E501
            return data

    def entities_organization_external_reference_read_with_http_info(self, external_type, organization_id, **kwargs):  # noqa: E501
        """entities_organization_external_reference_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_organization_external_reference_read_with_http_info(external_type, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_type: (required)
        :param str organization_id: (required)
        :return: list[ExternalReference_]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_type', 'organization_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entities_organization_external_reference_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'external_type' is set
        if ('external_type' not in params or
                params['external_type'] is None):
            raise ValueError("Missing the required parameter `external_type` when calling `entities_organization_external_reference_read`")  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if ('organization_id' not in params or
                params['organization_id'] is None):
            raise ValueError("Missing the required parameter `organization_id` when calling `entities_organization_external_reference_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'external_type' in params:
            path_params['external_type'] = params['external_type']  # noqa: E501
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/entities/organization/{organization_id}/external_reference/{external_type}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ExternalReference_]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entities_organization_external_reference_read_0(self, external_type, format, organization_id, **kwargs):  # noqa: E501
        """entities_organization_external_reference_read_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_organization_external_reference_read_0(external_type, format, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_type: (required)
        :param str format: (required)
        :param str organization_id: (required)
        :return: list[ExternalReference_]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.entities_organization_external_reference_read_0_with_http_info(external_type, format, organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.entities_organization_external_reference_read_0_with_http_info(external_type, format, organization_id, **kwargs)  # noqa: E501
            return data

    def entities_organization_external_reference_read_0_with_http_info(self, external_type, format, organization_id, **kwargs):  # noqa: E501
        """entities_organization_external_reference_read_0  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_organization_external_reference_read_0_with_http_info(external_type, format, organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str external_type: (required)
        :param str format: (required)
        :param str organization_id: (required)
        :return: list[ExternalReference_]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['external_type', 'format', 'organization_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entities_organization_external_reference_read_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'external_type' is set
        if ('external_type' not in params or
                params['external_type'] is None):
            raise ValueError("Missing the required parameter `external_type` when calling `entities_organization_external_reference_read_0`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `entities_organization_external_reference_read_0`")  # noqa: E501
        # verify the required parameter 'organization_id' is set
        if ('organization_id' not in params or
                params['organization_id'] is None):
            raise ValueError("Missing the required parameter `organization_id` when calling `entities_organization_external_reference_read_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'external_type' in params:
            path_params['external_type'] = params['external_type']  # noqa: E501
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/entities/organization/{organization_id}/external_reference/{external_type}{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ExternalReference_]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entities_partial_update(self, id, data, **kwargs):  # noqa: E501
        """entities_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_partial_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this entity. (required)
        :param Entity_ data: (required)
        :return: Entity_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.entities_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.entities_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def entities_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """entities_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_partial_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this entity. (required)
        :param Entity_ data: (required)
        :return: Entity_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entities_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `entities_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `entities_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/entities/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Entity_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entities_read(self, id, **kwargs):  # noqa: E501
        """entities_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_read(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this entity. (required)
        :return: Entity_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.entities_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.entities_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def entities_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """entities_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_read_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this entity. (required)
        :return: Entity_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entities_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `entities_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/entities/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Entity_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def entities_update(self, id, data, **kwargs):  # noqa: E501
        """entities_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_update(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this entity. (required)
        :param Entity_ data: (required)
        :return: Entity_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.entities_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.entities_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def entities_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """entities_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.entities_update_with_http_info(id, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: A unique integer value identifying this entity. (required)
        :param Entity_ data: (required)
        :return: Entity_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method entities_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `entities_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `entities_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/entities/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Entity_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
