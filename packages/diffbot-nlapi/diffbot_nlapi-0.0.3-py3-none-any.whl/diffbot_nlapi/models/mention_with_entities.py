# coding: utf-8

"""
    Natural Language Understanding

    Extracts entities (e.g., people, organizations, locations) and relations/properties about these entities from natural language text   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: jay@diffbot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from diffbot_nlapi.models.entity import Entity  # noqa: F401,E501


class MentionWithEntities(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'str',
        'begin_offset': 'int',
        'end_offset': 'int',
        'entity_candidates': 'list[Entity]'
    }

    attribute_map = {
        'text': 'text',
        'begin_offset': 'beginOffset',
        'end_offset': 'endOffset',
        'entity_candidates': 'entityCandidates'
    }

    def __init__(self, text=None, begin_offset=None, end_offset=None, entity_candidates=None):  # noqa: E501
        """MentionWithEntities - a model defined in Swagger"""  # noqa: E501

        self._text = None
        self._begin_offset = None
        self._end_offset = None
        self._entity_candidates = None
        self.discriminator = None

        if text is not None:
            self.text = text
        if begin_offset is not None:
            self.begin_offset = begin_offset
        if end_offset is not None:
            self.end_offset = end_offset
        if entity_candidates is not None:
            self.entity_candidates = entity_candidates

    @property
    def text(self):
        """Gets the text of this MentionWithEntities.  # noqa: E501


        :return: The text of this MentionWithEntities.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this MentionWithEntities.


        :param text: The text of this MentionWithEntities.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def begin_offset(self):
        """Gets the begin_offset of this MentionWithEntities.  # noqa: E501


        :return: The begin_offset of this MentionWithEntities.  # noqa: E501
        :rtype: int
        """
        return self._begin_offset

    @begin_offset.setter
    def begin_offset(self, begin_offset):
        """Sets the begin_offset of this MentionWithEntities.


        :param begin_offset: The begin_offset of this MentionWithEntities.  # noqa: E501
        :type: int
        """

        self._begin_offset = begin_offset

    @property
    def end_offset(self):
        """Gets the end_offset of this MentionWithEntities.  # noqa: E501


        :return: The end_offset of this MentionWithEntities.  # noqa: E501
        :rtype: int
        """
        return self._end_offset

    @end_offset.setter
    def end_offset(self, end_offset):
        """Sets the end_offset of this MentionWithEntities.


        :param end_offset: The end_offset of this MentionWithEntities.  # noqa: E501
        :type: int
        """

        self._end_offset = end_offset

    @property
    def entity_candidates(self):
        """Gets the entity_candidates of this MentionWithEntities.  # noqa: E501


        :return: The entity_candidates of this MentionWithEntities.  # noqa: E501
        :rtype: list[Entity]
        """
        return self._entity_candidates

    @entity_candidates.setter
    def entity_candidates(self, entity_candidates):
        """Sets the entity_candidates of this MentionWithEntities.


        :param entity_candidates: The entity_candidates of this MentionWithEntities.  # noqa: E501
        :type: list[Entity]
        """

        self._entity_candidates = entity_candidates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MentionWithEntities, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MentionWithEntities):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
