# coding: utf-8

"""
    Natural Language Understanding

    Extracts entities (e.g., people, organizations, locations) and relations/properties about these entities from natural language text   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: jay@diffbot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from diffbot_nlapi.models.span import Span  # noqa: F401,E501


class Document(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'str',
        'lang': 'str',
        'format': 'str',
        'document_type': 'str',
        'primary_entity_uri': 'str',
        'primary_entity': 'str',
        'mentions': 'list[Span]'
    }

    attribute_map = {
        'content': 'content',
        'lang': 'lang',
        'format': 'format',
        'document_type': 'documentType',
        'primary_entity_uri': 'primaryEntityUri',
        'primary_entity': 'primaryEntity',
        'mentions': 'mentions'
    }

    def __init__(self, content=None, lang='en', format='plain text', document_type=None, primary_entity_uri=None, primary_entity=None, mentions=None):  # noqa: E501
        """Document - a model defined in Swagger"""  # noqa: E501

        self._content = None
        self._lang = None
        self._format = None
        self._document_type = None
        self._primary_entity_uri = None
        self._primary_entity = None
        self._mentions = None
        self.discriminator = None

        self.content = content
        if lang is not None:
            self.lang = lang
        if format is not None:
            self.format = format
        if document_type is not None:
            self.document_type = document_type
        if primary_entity_uri is not None:
            self.primary_entity_uri = primary_entity_uri
        if primary_entity is not None:
            self.primary_entity = primary_entity
        if mentions is not None:
            self.mentions = mentions

    @property
    def content(self):
        """Gets the content of this Document.  # noqa: E501


        :return: The content of this Document.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Document.


        :param content: The content of this Document.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501
        if content is not None and len(content) > 100000:
            raise ValueError("Invalid value for `content`, length must be less than or equal to `100000`")  # noqa: E501
        if content is not None and len(content) < 1:
            raise ValueError("Invalid value for `content`, length must be greater than or equal to `1`")  # noqa: E501

        self._content = content

    @property
    def lang(self):
        """Gets the lang of this Document.  # noqa: E501

        Text language  # noqa: E501

        :return: The lang of this Document.  # noqa: E501
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this Document.

        Text language  # noqa: E501

        :param lang: The lang of this Document.  # noqa: E501
        :type: str
        """
        allowed_values = ["en", "es"]  # noqa: E501
        if lang not in allowed_values:
            raise ValueError(
                "Invalid value for `lang` ({0}), must be one of {1}"  # noqa: E501
                .format(lang, allowed_values)
            )

        self._lang = lang

    @property
    def format(self):
        """Gets the format of this Document.  # noqa: E501


        :return: The format of this Document.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Document.


        :param format: The format of this Document.  # noqa: E501
        :type: str
        """
        allowed_values = ["plain text", "plain text with title"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def document_type(self):
        """Gets the document_type of this Document.  # noqa: E501


        :return: The document_type of this Document.  # noqa: E501
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this Document.


        :param document_type: The document_type of this Document.  # noqa: E501
        :type: str
        """
        allowed_values = ["organization bio", "person bio", "news article", "address"]  # noqa: E501
        if document_type not in allowed_values:
            raise ValueError(
                "Invalid value for `document_type` ({0}), must be one of {1}"  # noqa: E501
                .format(document_type, allowed_values)
            )

        self._document_type = document_type

    @property
    def primary_entity_uri(self):
        """Gets the primary_entity_uri of this Document.  # noqa: E501

        Diffbot URI if it's known for a organization or person bio  # noqa: E501

        :return: The primary_entity_uri of this Document.  # noqa: E501
        :rtype: str
        """
        return self._primary_entity_uri

    @primary_entity_uri.setter
    def primary_entity_uri(self, primary_entity_uri):
        """Sets the primary_entity_uri of this Document.

        Diffbot URI if it's known for a organization or person bio  # noqa: E501

        :param primary_entity_uri: The primary_entity_uri of this Document.  # noqa: E501
        :type: str
        """

        self._primary_entity_uri = primary_entity_uri

    @property
    def primary_entity(self):
        """Gets the primary_entity of this Document.  # noqa: E501


        :return: The primary_entity of this Document.  # noqa: E501
        :rtype: str
        """
        return self._primary_entity

    @primary_entity.setter
    def primary_entity(self, primary_entity):
        """Sets the primary_entity of this Document.


        :param primary_entity: The primary_entity of this Document.  # noqa: E501
        :type: str
        """

        self._primary_entity = primary_entity

    @property
    def mentions(self):
        """Gets the mentions of this Document.  # noqa: E501

        Provide spans for mentions of interest. Only supported with mentions output right now.  # noqa: E501

        :return: The mentions of this Document.  # noqa: E501
        :rtype: list[Span]
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions):
        """Sets the mentions of this Document.

        Provide spans for mentions of interest. Only supported with mentions output right now.  # noqa: E501

        :param mentions: The mentions of this Document.  # noqa: E501
        :type: list[Span]
        """

        self._mentions = mentions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Document, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Document):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
