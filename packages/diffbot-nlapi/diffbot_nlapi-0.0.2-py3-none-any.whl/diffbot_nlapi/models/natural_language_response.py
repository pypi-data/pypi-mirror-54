# coding: utf-8

"""
    Natural Language Understanding

    Extracts entities (e.g., people, organizations, locations) and relations/properties about these entities from natural language text   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: jay@diffbot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from diffbot_nlapi.models.entity import Entity  # noqa: F401,E501
from diffbot_nlapi.models.mention_with_entity_candidates import MentionWithEntityCandidates  # noqa: F401,E501
from diffbot_nlapi.models.statement import Statement  # noqa: F401,E501


class NaturalLanguageResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mentions': 'list[MentionWithEntityCandidates]',
        'entities': 'list[Entity]',
        'statements': 'list[Statement]',
        'records': 'list[object]',
        'stats': 'object'
    }

    attribute_map = {
        'mentions': 'mentions',
        'entities': 'entities',
        'statements': 'statements',
        'records': 'records',
        'stats': 'stats'
    }

    def __init__(self, mentions=None, entities=None, statements=None, records=None, stats=None):  # noqa: E501
        """NaturalLanguageResponse - a model defined in Swagger"""  # noqa: E501

        self._mentions = None
        self._entities = None
        self._statements = None
        self._records = None
        self._stats = None
        self.discriminator = None

        if mentions is not None:
            self.mentions = mentions
        if entities is not None:
            self.entities = entities
        if statements is not None:
            self.statements = statements
        if records is not None:
            self.records = records
        if stats is not None:
            self.stats = stats

    @property
    def mentions(self):
        """Gets the mentions of this NaturalLanguageResponse.  # noqa: E501


        :return: The mentions of this NaturalLanguageResponse.  # noqa: E501
        :rtype: list[MentionWithEntityCandidates]
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions):
        """Sets the mentions of this NaturalLanguageResponse.


        :param mentions: The mentions of this NaturalLanguageResponse.  # noqa: E501
        :type: list[MentionWithEntityCandidates]
        """

        self._mentions = mentions

    @property
    def entities(self):
        """Gets the entities of this NaturalLanguageResponse.  # noqa: E501


        :return: The entities of this NaturalLanguageResponse.  # noqa: E501
        :rtype: list[Entity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this NaturalLanguageResponse.


        :param entities: The entities of this NaturalLanguageResponse.  # noqa: E501
        :type: list[Entity]
        """

        self._entities = entities

    @property
    def statements(self):
        """Gets the statements of this NaturalLanguageResponse.  # noqa: E501


        :return: The statements of this NaturalLanguageResponse.  # noqa: E501
        :rtype: list[Statement]
        """
        return self._statements

    @statements.setter
    def statements(self, statements):
        """Sets the statements of this NaturalLanguageResponse.


        :param statements: The statements of this NaturalLanguageResponse.  # noqa: E501
        :type: list[Statement]
        """

        self._statements = statements

    @property
    def records(self):
        """Gets the records of this NaturalLanguageResponse.  # noqa: E501

        Array of entities with attributes extracted from inputDocument according to the KG schema  # noqa: E501

        :return: The records of this NaturalLanguageResponse.  # noqa: E501
        :rtype: list[object]
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this NaturalLanguageResponse.

        Array of entities with attributes extracted from inputDocument according to the KG schema  # noqa: E501

        :param records: The records of this NaturalLanguageResponse.  # noqa: E501
        :type: list[object]
        """

        self._records = records

    @property
    def stats(self):
        """Gets the stats of this NaturalLanguageResponse.  # noqa: E501


        :return: The stats of this NaturalLanguageResponse.  # noqa: E501
        :rtype: object
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this NaturalLanguageResponse.


        :param stats: The stats of this NaturalLanguageResponse.  # noqa: E501
        :type: object
        """

        self._stats = stats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NaturalLanguageResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NaturalLanguageResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
