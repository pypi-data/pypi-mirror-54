# coding: utf-8

"""
    Natural Language Understanding

    Extracts entities (e.g., people, organizations, locations) and relations/properties about these entities from natural language text   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: jay@diffbot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from diffbot_nlapi.models.mention import Mention  # noqa: F401,E501


class Evidence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'passage': 'str',
        'entity_mentions': 'list[Mention]',
        'value_mentions': 'list[Mention]'
    }

    attribute_map = {
        'passage': 'passage',
        'entity_mentions': 'entityMentions',
        'value_mentions': 'valueMentions'
    }

    def __init__(self, passage=None, entity_mentions=None, value_mentions=None):  # noqa: E501
        """Evidence - a model defined in Swagger"""  # noqa: E501

        self._passage = None
        self._entity_mentions = None
        self._value_mentions = None
        self.discriminator = None

        if passage is not None:
            self.passage = passage
        if entity_mentions is not None:
            self.entity_mentions = entity_mentions
        if value_mentions is not None:
            self.value_mentions = value_mentions

    @property
    def passage(self):
        """Gets the passage of this Evidence.  # noqa: E501

        One or more sentences where the statement was extracted from  # noqa: E501

        :return: The passage of this Evidence.  # noqa: E501
        :rtype: str
        """
        return self._passage

    @passage.setter
    def passage(self, passage):
        """Sets the passage of this Evidence.

        One or more sentences where the statement was extracted from  # noqa: E501

        :param passage: The passage of this Evidence.  # noqa: E501
        :type: str
        """

        self._passage = passage

    @property
    def entity_mentions(self):
        """Gets the entity_mentions of this Evidence.  # noqa: E501


        :return: The entity_mentions of this Evidence.  # noqa: E501
        :rtype: list[Mention]
        """
        return self._entity_mentions

    @entity_mentions.setter
    def entity_mentions(self, entity_mentions):
        """Sets the entity_mentions of this Evidence.


        :param entity_mentions: The entity_mentions of this Evidence.  # noqa: E501
        :type: list[Mention]
        """

        self._entity_mentions = entity_mentions

    @property
    def value_mentions(self):
        """Gets the value_mentions of this Evidence.  # noqa: E501


        :return: The value_mentions of this Evidence.  # noqa: E501
        :rtype: list[Mention]
        """
        return self._value_mentions

    @value_mentions.setter
    def value_mentions(self, value_mentions):
        """Sets the value_mentions of this Evidence.


        :param value_mentions: The value_mentions of this Evidence.  # noqa: E501
        :type: list[Mention]
        """

        self._value_mentions = value_mentions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Evidence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Evidence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
