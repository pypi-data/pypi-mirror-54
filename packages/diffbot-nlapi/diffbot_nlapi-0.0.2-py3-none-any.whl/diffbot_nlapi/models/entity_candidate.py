# coding: utf-8

"""
    Natural Language Understanding

    Extracts entities (e.g., people, organizations, locations) and relations/properties about these entities from natural language text   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: jay@diffbot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from diffbot_nlapi.models.entity_type import EntityType  # noqa: F401,E501


class EntityCandidate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'diffbot_uri': 'str',
        'confidence': 'float',
        'all_uris': 'list[str]',
        'all_types': 'list[EntityType]'
    }

    attribute_map = {
        'name': 'name',
        'diffbot_uri': 'diffbotUri',
        'confidence': 'confidence',
        'all_uris': 'allUris',
        'all_types': 'allTypes'
    }

    def __init__(self, name=None, diffbot_uri=None, confidence=None, all_uris=None, all_types=None):  # noqa: E501
        """EntityCandidate - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._diffbot_uri = None
        self._confidence = None
        self._all_uris = None
        self._all_types = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if diffbot_uri is not None:
            self.diffbot_uri = diffbot_uri
        if confidence is not None:
            self.confidence = confidence
        if all_uris is not None:
            self.all_uris = all_uris
        if all_types is not None:
            self.all_types = all_types

    @property
    def name(self):
        """Gets the name of this EntityCandidate.  # noqa: E501


        :return: The name of this EntityCandidate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EntityCandidate.


        :param name: The name of this EntityCandidate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def diffbot_uri(self):
        """Gets the diffbot_uri of this EntityCandidate.  # noqa: E501


        :return: The diffbot_uri of this EntityCandidate.  # noqa: E501
        :rtype: str
        """
        return self._diffbot_uri

    @diffbot_uri.setter
    def diffbot_uri(self, diffbot_uri):
        """Sets the diffbot_uri of this EntityCandidate.


        :param diffbot_uri: The diffbot_uri of this EntityCandidate.  # noqa: E501
        :type: str
        """

        self._diffbot_uri = diffbot_uri

    @property
    def confidence(self):
        """Gets the confidence of this EntityCandidate.  # noqa: E501


        :return: The confidence of this EntityCandidate.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this EntityCandidate.


        :param confidence: The confidence of this EntityCandidate.  # noqa: E501
        :type: float
        """

        self._confidence = confidence

    @property
    def all_uris(self):
        """Gets the all_uris of this EntityCandidate.  # noqa: E501


        :return: The all_uris of this EntityCandidate.  # noqa: E501
        :rtype: list[str]
        """
        return self._all_uris

    @all_uris.setter
    def all_uris(self, all_uris):
        """Sets the all_uris of this EntityCandidate.


        :param all_uris: The all_uris of this EntityCandidate.  # noqa: E501
        :type: list[str]
        """

        self._all_uris = all_uris

    @property
    def all_types(self):
        """Gets the all_types of this EntityCandidate.  # noqa: E501


        :return: The all_types of this EntityCandidate.  # noqa: E501
        :rtype: list[EntityType]
        """
        return self._all_types

    @all_types.setter
    def all_types(self, all_types):
        """Sets the all_types of this EntityCandidate.


        :param all_types: The all_types of this EntityCandidate.  # noqa: E501
        :type: list[EntityType]
        """

        self._all_types = all_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntityCandidate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityCandidate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
