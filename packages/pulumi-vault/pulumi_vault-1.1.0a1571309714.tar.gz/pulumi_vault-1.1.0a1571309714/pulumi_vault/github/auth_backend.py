# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class AuthBackend(pulumi.CustomResource):
    accessor: pulumi.Output[str]
    """
    The mount accessor related to the auth mount. It is useful for integration with [Identity Secrets Engine](https://www.vaultproject.io/docs/secrets/identity/index.html).
    """
    base_url: pulumi.Output[str]
    """
    The API endpoint to use. Useful if you 
    are running GitHub Enterprise or an API-compatible authentication server.
    """
    description: pulumi.Output[str]
    """
    Specifies the description of the mount. 
    This overrides the current stored value, if any.
    """
    max_ttl: pulumi.Output[str]
    """
    Maximum duration after which authentication will be expired.
    This must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration).
    """
    organization: pulumi.Output[str]
    """
    The organization configured users must be part of.
    """
    path: pulumi.Output[str]
    """
    Path where the auth backend is mounted. Defaults to `auth/github` 
    if not specified.
    """
    ttl: pulumi.Output[str]
    """
    Duration after which authentication will be expired. 
    This must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration).
    """
    tune: pulumi.Output[dict]
    def __init__(__self__, resource_name, opts=None, base_url=None, description=None, max_ttl=None, organization=None, path=None, ttl=None, tune=None, __props__=None, __name__=None, __opts__=None):
        """
        Manages a Github Auth mount in a Vault server. See the [Vault 
        documentation](https://www.vaultproject.io/docs/auth/github.html) for more
        information.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] base_url: The API endpoint to use. Useful if you 
               are running GitHub Enterprise or an API-compatible authentication server.
        :param pulumi.Input[str] description: Specifies the description of the mount. 
               This overrides the current stored value, if any.
        :param pulumi.Input[str] max_ttl: Maximum duration after which authentication will be expired.
               This must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration).
        :param pulumi.Input[str] organization: The organization configured users must be part of.
        :param pulumi.Input[str] path: Path where the auth backend is mounted. Defaults to `auth/github` 
               if not specified.
        :param pulumi.Input[str] ttl: Duration after which authentication will be expired. 
               This must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration).
        
        The **tune** object supports the following:
        
          * `auditNonHmacRequestKeys` (`pulumi.Input[list]`)
          * `auditNonHmacResponseKeys` (`pulumi.Input[list]`)
          * `defaultLeaseTtl` (`pulumi.Input[str]`)
          * `listingVisibility` (`pulumi.Input[str]`)
          * `maxLeaseTtl` (`pulumi.Input[str]`)
          * `passthroughRequestHeaders` (`pulumi.Input[list]`)

        > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/github_auth_backend.html.markdown.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['base_url'] = base_url
            __props__['description'] = description
            __props__['max_ttl'] = max_ttl
            if organization is None:
                raise TypeError("Missing required property 'organization'")
            __props__['organization'] = organization
            __props__['path'] = path
            __props__['ttl'] = ttl
            __props__['tune'] = tune
            __props__['accessor'] = None
        super(AuthBackend, __self__).__init__(
            'vault:github/authBackend:AuthBackend',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, accessor=None, base_url=None, description=None, max_ttl=None, organization=None, path=None, ttl=None, tune=None):
        """
        Get an existing AuthBackend resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.
        
        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] accessor: The mount accessor related to the auth mount. It is useful for integration with [Identity Secrets Engine](https://www.vaultproject.io/docs/secrets/identity/index.html).
        :param pulumi.Input[str] base_url: The API endpoint to use. Useful if you 
               are running GitHub Enterprise or an API-compatible authentication server.
        :param pulumi.Input[str] description: Specifies the description of the mount. 
               This overrides the current stored value, if any.
        :param pulumi.Input[str] max_ttl: Maximum duration after which authentication will be expired.
               This must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration).
        :param pulumi.Input[str] organization: The organization configured users must be part of.
        :param pulumi.Input[str] path: Path where the auth backend is mounted. Defaults to `auth/github` 
               if not specified.
        :param pulumi.Input[str] ttl: Duration after which authentication will be expired. 
               This must be a valid [duration string](https://golang.org/pkg/time/#ParseDuration).
        
        The **tune** object supports the following:
        
          * `auditNonHmacRequestKeys` (`pulumi.Input[list]`)
          * `auditNonHmacResponseKeys` (`pulumi.Input[list]`)
          * `defaultLeaseTtl` (`pulumi.Input[str]`)
          * `listingVisibility` (`pulumi.Input[str]`)
          * `maxLeaseTtl` (`pulumi.Input[str]`)
          * `passthroughRequestHeaders` (`pulumi.Input[list]`)

        > This content is derived from https://github.com/terraform-providers/terraform-provider-vault/blob/master/website/docs/r/github_auth_backend.html.markdown.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()
        __props__["accessor"] = accessor
        __props__["base_url"] = base_url
        __props__["description"] = description
        __props__["max_ttl"] = max_ttl
        __props__["organization"] = organization
        __props__["path"] = path
        __props__["ttl"] = ttl
        __props__["tune"] = tune
        return AuthBackend(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

