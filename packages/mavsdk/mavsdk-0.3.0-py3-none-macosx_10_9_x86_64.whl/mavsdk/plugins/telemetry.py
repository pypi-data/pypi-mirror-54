# -*- coding: utf-8 -*-
from .._base import AsyncBase
from ..generated import telemetry_pb2, telemetry_pb2_grpc
from enum import Enum


class FixType(Enum):
    """ Generated by dcsdkgen """

    
    NO_GPS = 0
    NO_FIX = 1
    FIX_2D = 2
    FIX_3D = 3
    FIX_DGPS = 4
    RTK_FLOAT = 5
    RTK_FIXED = 6

    def translate_to_rpc(self, rpcFixType):
        rpcFixType = {
                0: telemetry_pb2.NO_GPS,
                1: telemetry_pb2.NO_FIX,
                2: telemetry_pb2.FIX_2D,
                3: telemetry_pb2.FIX_3D,
                4: telemetry_pb2.FIX_DGPS,
                5: telemetry_pb2.RTK_FLOAT,
                6: telemetry_pb2.RTK_FIXED
            }.get(self.value, None)

    @staticmethod
    def translate_from_rpc(rpc_enum_value):
        """ Parses a gRPC response """
        return {
                0: FixType.NO_GPS,
                1: FixType.NO_FIX,
                2: FixType.FIX_2D,
                3: FixType.FIX_3D,
                4: FixType.FIX_DGPS,
                5: FixType.RTK_FLOAT,
                6: FixType.RTK_FIXED,
            }.get(rpc_enum_value, None)

    def __str__(self):
        return self.name


class FlightMode(Enum):
    """ Generated by dcsdkgen """

    
    UNKNOWN = 0
    READY = 1
    TAKEOFF = 2
    HOLD = 3
    MISSION = 4
    RETURN_TO_LAUNCH = 5
    LAND = 6
    OFFBOARD = 7
    FOLLOW_ME = 8

    def translate_to_rpc(self, rpcFlightMode):
        rpcFlightMode = {
                0: telemetry_pb2.UNKNOWN,
                1: telemetry_pb2.READY,
                2: telemetry_pb2.TAKEOFF,
                3: telemetry_pb2.HOLD,
                4: telemetry_pb2.MISSION,
                5: telemetry_pb2.RETURN_TO_LAUNCH,
                6: telemetry_pb2.LAND,
                7: telemetry_pb2.OFFBOARD,
                8: telemetry_pb2.FOLLOW_ME
            }.get(self.value, None)

    @staticmethod
    def translate_from_rpc(rpc_enum_value):
        """ Parses a gRPC response """
        return {
                0: FlightMode.UNKNOWN,
                1: FlightMode.READY,
                2: FlightMode.TAKEOFF,
                3: FlightMode.HOLD,
                4: FlightMode.MISSION,
                5: FlightMode.RETURN_TO_LAUNCH,
                6: FlightMode.LAND,
                7: FlightMode.OFFBOARD,
                8: FlightMode.FOLLOW_ME,
            }.get(rpc_enum_value, None)

    def __str__(self):
        return self.name


class Position:
    """ Generated by dcsdkgen """

    

    def __init__(
            self,
            latitude_deg,
            longitude_deg,
            absolute_altitude_m,
            relative_altitude_m):
        """ Initializes the Position object """
        self.latitude_deg = latitude_deg
        self.longitude_deg = longitude_deg
        self.absolute_altitude_m = absolute_altitude_m
        self.relative_altitude_m = relative_altitude_m

    def __equals__(self, to_compare):
        """ Checks if two Position are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # Position object
            return \
                (self.latitude_deg == to_compare.latitude_deg) and \
                (self.longitude_deg == to_compare.longitude_deg) and \
                (self.absolute_altitude_m == to_compare.absolute_altitude_m) and \
                (self.relative_altitude_m == to_compare.relative_altitude_m)

        except AttributeError:
            return False

    def __str__(self):
        """ Position in string representation """
        struct_repr = ", ".join([
                "latitude_deg: " + str(self.latitude_deg),
                "longitude_deg: " + str(self.longitude_deg),
                "absolute_altitude_m: " + str(self.absolute_altitude_m),
                "relative_altitude_m: " + str(self.relative_altitude_m)
                ])

        return f"Position: [{struct_repr}]"

    @staticmethod
    def translate_from_rpc(rpcPosition):
        """ Translates a gRPC struct to the SDK equivalent """
        return Position(
                
                rpcPosition.latitude_deg,
                
                
                rpcPosition.longitude_deg,
                
                
                rpcPosition.absolute_altitude_m,
                
                
                rpcPosition.relative_altitude_m
                )

    def translate_to_rpc(self, rpcPosition):
        """ Translates this SDK object into its gRPC equivalent """

        
        
            
        rpcPosition.latitude_deg = self.latitude_deg
            
        
        
        
            
        rpcPosition.longitude_deg = self.longitude_deg
            
        
        
        
            
        rpcPosition.absolute_altitude_m = self.absolute_altitude_m
            
        
        
        
            
        rpcPosition.relative_altitude_m = self.relative_altitude_m
            
        
        


class Quaternion:
    """ Generated by dcsdkgen """

    

    def __init__(
            self,
            w,
            x,
            y,
            z):
        """ Initializes the Quaternion object """
        self.w = w
        self.x = x
        self.y = y
        self.z = z

    def __equals__(self, to_compare):
        """ Checks if two Quaternion are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # Quaternion object
            return \
                (self.w == to_compare.w) and \
                (self.x == to_compare.x) and \
                (self.y == to_compare.y) and \
                (self.z == to_compare.z)

        except AttributeError:
            return False

    def __str__(self):
        """ Quaternion in string representation """
        struct_repr = ", ".join([
                "w: " + str(self.w),
                "x: " + str(self.x),
                "y: " + str(self.y),
                "z: " + str(self.z)
                ])

        return f"Quaternion: [{struct_repr}]"

    @staticmethod
    def translate_from_rpc(rpcQuaternion):
        """ Translates a gRPC struct to the SDK equivalent """
        return Quaternion(
                
                rpcQuaternion.w,
                
                
                rpcQuaternion.x,
                
                
                rpcQuaternion.y,
                
                
                rpcQuaternion.z
                )

    def translate_to_rpc(self, rpcQuaternion):
        """ Translates this SDK object into its gRPC equivalent """

        
        
            
        rpcQuaternion.w = self.w
            
        
        
        
            
        rpcQuaternion.x = self.x
            
        
        
        
            
        rpcQuaternion.y = self.y
            
        
        
        
            
        rpcQuaternion.z = self.z
            
        
        


class EulerAngle:
    """ Generated by dcsdkgen """

    

    def __init__(
            self,
            roll_deg,
            pitch_deg,
            yaw_deg):
        """ Initializes the EulerAngle object """
        self.roll_deg = roll_deg
        self.pitch_deg = pitch_deg
        self.yaw_deg = yaw_deg

    def __equals__(self, to_compare):
        """ Checks if two EulerAngle are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # EulerAngle object
            return \
                (self.roll_deg == to_compare.roll_deg) and \
                (self.pitch_deg == to_compare.pitch_deg) and \
                (self.yaw_deg == to_compare.yaw_deg)

        except AttributeError:
            return False

    def __str__(self):
        """ EulerAngle in string representation """
        struct_repr = ", ".join([
                "roll_deg: " + str(self.roll_deg),
                "pitch_deg: " + str(self.pitch_deg),
                "yaw_deg: " + str(self.yaw_deg)
                ])

        return f"EulerAngle: [{struct_repr}]"

    @staticmethod
    def translate_from_rpc(rpcEulerAngle):
        """ Translates a gRPC struct to the SDK equivalent """
        return EulerAngle(
                
                rpcEulerAngle.roll_deg,
                
                
                rpcEulerAngle.pitch_deg,
                
                
                rpcEulerAngle.yaw_deg
                )

    def translate_to_rpc(self, rpcEulerAngle):
        """ Translates this SDK object into its gRPC equivalent """

        
        
            
        rpcEulerAngle.roll_deg = self.roll_deg
            
        
        
        
            
        rpcEulerAngle.pitch_deg = self.pitch_deg
            
        
        
        
            
        rpcEulerAngle.yaw_deg = self.yaw_deg
            
        
        


class SpeedNed:
    """ Generated by dcsdkgen """

    

    def __init__(
            self,
            velocity_north_m_s,
            velocity_east_m_s,
            velocity_down_m_s):
        """ Initializes the SpeedNed object """
        self.velocity_north_m_s = velocity_north_m_s
        self.velocity_east_m_s = velocity_east_m_s
        self.velocity_down_m_s = velocity_down_m_s

    def __equals__(self, to_compare):
        """ Checks if two SpeedNed are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # SpeedNed object
            return \
                (self.velocity_north_m_s == to_compare.velocity_north_m_s) and \
                (self.velocity_east_m_s == to_compare.velocity_east_m_s) and \
                (self.velocity_down_m_s == to_compare.velocity_down_m_s)

        except AttributeError:
            return False

    def __str__(self):
        """ SpeedNed in string representation """
        struct_repr = ", ".join([
                "velocity_north_m_s: " + str(self.velocity_north_m_s),
                "velocity_east_m_s: " + str(self.velocity_east_m_s),
                "velocity_down_m_s: " + str(self.velocity_down_m_s)
                ])

        return f"SpeedNed: [{struct_repr}]"

    @staticmethod
    def translate_from_rpc(rpcSpeedNed):
        """ Translates a gRPC struct to the SDK equivalent """
        return SpeedNed(
                
                rpcSpeedNed.velocity_north_m_s,
                
                
                rpcSpeedNed.velocity_east_m_s,
                
                
                rpcSpeedNed.velocity_down_m_s
                )

    def translate_to_rpc(self, rpcSpeedNed):
        """ Translates this SDK object into its gRPC equivalent """

        
        
            
        rpcSpeedNed.velocity_north_m_s = self.velocity_north_m_s
            
        
        
        
            
        rpcSpeedNed.velocity_east_m_s = self.velocity_east_m_s
            
        
        
        
            
        rpcSpeedNed.velocity_down_m_s = self.velocity_down_m_s
            
        
        


class GpsInfo:
    """ Generated by dcsdkgen """

    

    def __init__(
            self,
            num_satellites,
            fix_type):
        """ Initializes the GpsInfo object """
        self.num_satellites = num_satellites
        self.fix_type = fix_type

    def __equals__(self, to_compare):
        """ Checks if two GpsInfo are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # GpsInfo object
            return \
                (self.num_satellites == to_compare.num_satellites) and \
                (self.fix_type == to_compare.fix_type)

        except AttributeError:
            return False

    def __str__(self):
        """ GpsInfo in string representation """
        struct_repr = ", ".join([
                "num_satellites: " + str(self.num_satellites),
                "fix_type: " + str(self.fix_type)
                ])

        return f"GpsInfo: [{struct_repr}]"

    @staticmethod
    def translate_from_rpc(rpcGpsInfo):
        """ Translates a gRPC struct to the SDK equivalent """
        return GpsInfo(
                
                rpcGpsInfo.num_satellites,
                
                
                FixType.translate_from_rpc(rpcGpsInfo.fix_type)
                )

    def translate_to_rpc(self, rpcGpsInfo):
        """ Translates this SDK object into its gRPC equivalent """

        
        
            
        rpcGpsInfo.num_satellites = self.num_satellites
            
        
        
        
            
        self.fix_type.translate_to_rpc(rpcGpsInfo.fix_type)
            
        
        


class Battery:
    """ Generated by dcsdkgen """

    

    def __init__(
            self,
            voltage_v,
            remaining_percent):
        """ Initializes the Battery object """
        self.voltage_v = voltage_v
        self.remaining_percent = remaining_percent

    def __equals__(self, to_compare):
        """ Checks if two Battery are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # Battery object
            return \
                (self.voltage_v == to_compare.voltage_v) and \
                (self.remaining_percent == to_compare.remaining_percent)

        except AttributeError:
            return False

    def __str__(self):
        """ Battery in string representation """
        struct_repr = ", ".join([
                "voltage_v: " + str(self.voltage_v),
                "remaining_percent: " + str(self.remaining_percent)
                ])

        return f"Battery: [{struct_repr}]"

    @staticmethod
    def translate_from_rpc(rpcBattery):
        """ Translates a gRPC struct to the SDK equivalent """
        return Battery(
                
                rpcBattery.voltage_v,
                
                
                rpcBattery.remaining_percent
                )

    def translate_to_rpc(self, rpcBattery):
        """ Translates this SDK object into its gRPC equivalent """

        
        
            
        rpcBattery.voltage_v = self.voltage_v
            
        
        
        
            
        rpcBattery.remaining_percent = self.remaining_percent
            
        
        


class Health:
    """ Generated by dcsdkgen """

    

    def __init__(
            self,
            is_gyrometer_calibration_ok,
            is_accelerometer_calibration_ok,
            is_magnetometer_calibration_ok,
            is_level_calibration_ok,
            is_local_position_ok,
            is_global_position_ok,
            is_home_position_ok):
        """ Initializes the Health object """
        self.is_gyrometer_calibration_ok = is_gyrometer_calibration_ok
        self.is_accelerometer_calibration_ok = is_accelerometer_calibration_ok
        self.is_magnetometer_calibration_ok = is_magnetometer_calibration_ok
        self.is_level_calibration_ok = is_level_calibration_ok
        self.is_local_position_ok = is_local_position_ok
        self.is_global_position_ok = is_global_position_ok
        self.is_home_position_ok = is_home_position_ok

    def __equals__(self, to_compare):
        """ Checks if two Health are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # Health object
            return \
                (self.is_gyrometer_calibration_ok == to_compare.is_gyrometer_calibration_ok) and \
                (self.is_accelerometer_calibration_ok == to_compare.is_accelerometer_calibration_ok) and \
                (self.is_magnetometer_calibration_ok == to_compare.is_magnetometer_calibration_ok) and \
                (self.is_level_calibration_ok == to_compare.is_level_calibration_ok) and \
                (self.is_local_position_ok == to_compare.is_local_position_ok) and \
                (self.is_global_position_ok == to_compare.is_global_position_ok) and \
                (self.is_home_position_ok == to_compare.is_home_position_ok)

        except AttributeError:
            return False

    def __str__(self):
        """ Health in string representation """
        struct_repr = ", ".join([
                "is_gyrometer_calibration_ok: " + str(self.is_gyrometer_calibration_ok),
                "is_accelerometer_calibration_ok: " + str(self.is_accelerometer_calibration_ok),
                "is_magnetometer_calibration_ok: " + str(self.is_magnetometer_calibration_ok),
                "is_level_calibration_ok: " + str(self.is_level_calibration_ok),
                "is_local_position_ok: " + str(self.is_local_position_ok),
                "is_global_position_ok: " + str(self.is_global_position_ok),
                "is_home_position_ok: " + str(self.is_home_position_ok)
                ])

        return f"Health: [{struct_repr}]"

    @staticmethod
    def translate_from_rpc(rpcHealth):
        """ Translates a gRPC struct to the SDK equivalent """
        return Health(
                
                rpcHealth.is_gyrometer_calibration_ok,
                
                
                rpcHealth.is_accelerometer_calibration_ok,
                
                
                rpcHealth.is_magnetometer_calibration_ok,
                
                
                rpcHealth.is_level_calibration_ok,
                
                
                rpcHealth.is_local_position_ok,
                
                
                rpcHealth.is_global_position_ok,
                
                
                rpcHealth.is_home_position_ok
                )

    def translate_to_rpc(self, rpcHealth):
        """ Translates this SDK object into its gRPC equivalent """

        
        
            
        rpcHealth.is_gyrometer_calibration_ok = self.is_gyrometer_calibration_ok
            
        
        
        
            
        rpcHealth.is_accelerometer_calibration_ok = self.is_accelerometer_calibration_ok
            
        
        
        
            
        rpcHealth.is_magnetometer_calibration_ok = self.is_magnetometer_calibration_ok
            
        
        
        
            
        rpcHealth.is_level_calibration_ok = self.is_level_calibration_ok
            
        
        
        
            
        rpcHealth.is_local_position_ok = self.is_local_position_ok
            
        
        
        
            
        rpcHealth.is_global_position_ok = self.is_global_position_ok
            
        
        
        
            
        rpcHealth.is_home_position_ok = self.is_home_position_ok
            
        
        


class RcStatus:
    """ Generated by dcsdkgen """

    

    def __init__(
            self,
            was_available_once,
            is_available,
            signal_strength_percent):
        """ Initializes the RcStatus object """
        self.was_available_once = was_available_once
        self.is_available = is_available
        self.signal_strength_percent = signal_strength_percent

    def __equals__(self, to_compare):
        """ Checks if two RcStatus are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # RcStatus object
            return \
                (self.was_available_once == to_compare.was_available_once) and \
                (self.is_available == to_compare.is_available) and \
                (self.signal_strength_percent == to_compare.signal_strength_percent)

        except AttributeError:
            return False

    def __str__(self):
        """ RcStatus in string representation """
        struct_repr = ", ".join([
                "was_available_once: " + str(self.was_available_once),
                "is_available: " + str(self.is_available),
                "signal_strength_percent: " + str(self.signal_strength_percent)
                ])

        return f"RcStatus: [{struct_repr}]"

    @staticmethod
    def translate_from_rpc(rpcRcStatus):
        """ Translates a gRPC struct to the SDK equivalent """
        return RcStatus(
                
                rpcRcStatus.was_available_once,
                
                
                rpcRcStatus.is_available,
                
                
                rpcRcStatus.signal_strength_percent
                )

    def translate_to_rpc(self, rpcRcStatus):
        """ Translates this SDK object into its gRPC equivalent """

        
        
            
        rpcRcStatus.was_available_once = self.was_available_once
            
        
        
        
            
        rpcRcStatus.is_available = self.is_available
            
        
        
        
            
        rpcRcStatus.signal_strength_percent = self.signal_strength_percent
            
        
        


class StatusText:
    """ Generated by dcsdkgen """

    
    
    class StatusType(Enum):
        """ Generated by dcsdkgen """

        
        INFO = 0
        WARNING = 1
        CRITICAL = 2

        def translate_to_rpc(self, rpcStatusType):
            rpcStatusType = {
                    0: telemetry_pb2.StatusText.INFO,
                    1: telemetry_pb2.StatusText.WARNING,
                    2: telemetry_pb2.StatusText.CRITICAL
                }.get(self.value, None)

        @staticmethod
        def translate_from_rpc(rpc_enum_value):
            """ Parses a gRPC response """
            return {
                    0: StatusText.StatusType.INFO,
                    1: StatusText.StatusType.WARNING,
                    2: StatusText.StatusType.CRITICAL,
                }.get(rpc_enum_value, None)

        def __str__(self):
            return self.name
    

    def __init__(
            self,
            type,
            text):
        """ Initializes the StatusText object """
        self.type = type
        self.text = text

    def __equals__(self, to_compare):
        """ Checks if two StatusText are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # StatusText object
            return \
                (self.type == to_compare.type) and \
                (self.text == to_compare.text)

        except AttributeError:
            return False

    def __str__(self):
        """ StatusText in string representation """
        struct_repr = ", ".join([
                "type: " + str(self.type),
                "text: " + str(self.text)
                ])

        return f"StatusText: [{struct_repr}]"

    @staticmethod
    def translate_from_rpc(rpcStatusText):
        """ Translates a gRPC struct to the SDK equivalent """
        return StatusText(
                
                StatusText.StatusType.translate_from_rpc(rpcStatusText.type),
                
                
                rpcStatusText.text
                )

    def translate_to_rpc(self, rpcStatusText):
        """ Translates this SDK object into its gRPC equivalent """

        
        
            
        self.type.translate_to_rpc(rpcStatusText.type)
            
        
        
        
            
        rpcStatusText.text = self.text
            
        
        




class Telemetry(AsyncBase):
    """ Generated by dcsdkgen - MAVSDK Telemetry API """

    # Plugin name
    name = "Telemetry"

    def _setup_stub(self, channel):
        """ Setups the api stub """
        self._stub = telemetry_pb2_grpc.TelemetryServiceStub(channel)

    

    async def position(self):
        """ Generated by dcsdkgen """
        request = telemetry_pb2.SubscribePositionRequest()
        position_stream = self._stub.SubscribePosition(request)

        try:
            async for response in position_stream:
                

            
                yield Position.translate_from_rpc(response.position)
        finally:
            position_stream.cancel()

    async def home(self):
        """ Generated by dcsdkgen """
        request = telemetry_pb2.SubscribeHomeRequest()
        home_stream = self._stub.SubscribeHome(request)

        try:
            async for response in home_stream:
                

            
                yield Position.translate_from_rpc(response.home)
        finally:
            home_stream.cancel()

    async def in_air(self):
        """ Generated by dcsdkgen """
        request = telemetry_pb2.SubscribeInAirRequest()
        in_air_stream = self._stub.SubscribeInAir(request)

        try:
            async for response in in_air_stream:
                

            
                yield response.is_in_air
        finally:
            in_air_stream.cancel()

    async def armed(self):
        """ Generated by dcsdkgen """
        request = telemetry_pb2.SubscribeArmedRequest()
        armed_stream = self._stub.SubscribeArmed(request)

        try:
            async for response in armed_stream:
                

            
                yield response.is_armed
        finally:
            armed_stream.cancel()

    async def attitude_quaternion(self):
        """ Generated by dcsdkgen """
        request = telemetry_pb2.SubscribeAttitudeQuaternionRequest()
        attitude_quaternion_stream = self._stub.SubscribeAttitudeQuaternion(request)

        try:
            async for response in attitude_quaternion_stream:
                

            
                yield Quaternion.translate_from_rpc(response.attitude_quaternion)
        finally:
            attitude_quaternion_stream.cancel()

    async def attitude_euler(self):
        """ Generated by dcsdkgen """
        request = telemetry_pb2.SubscribeAttitudeEulerRequest()
        attitude_euler_stream = self._stub.SubscribeAttitudeEuler(request)

        try:
            async for response in attitude_euler_stream:
                

            
                yield EulerAngle.translate_from_rpc(response.attitude_euler)
        finally:
            attitude_euler_stream.cancel()

    async def camera_attitude_quaternion(self):
        """ Generated by dcsdkgen """
        request = telemetry_pb2.SubscribeCameraAttitudeQuaternionRequest()
        camera_attitude_quaternion_stream = self._stub.SubscribeCameraAttitudeQuaternion(request)

        try:
            async for response in camera_attitude_quaternion_stream:
                

            
                yield Quaternion.translate_from_rpc(response.attitude_quaternion)
        finally:
            camera_attitude_quaternion_stream.cancel()

    async def camera_attitude_euler(self):
        """ Generated by dcsdkgen """
        request = telemetry_pb2.SubscribeCameraAttitudeEulerRequest()
        camera_attitude_euler_stream = self._stub.SubscribeCameraAttitudeEuler(request)

        try:
            async for response in camera_attitude_euler_stream:
                

            
                yield EulerAngle.translate_from_rpc(response.attitude_euler)
        finally:
            camera_attitude_euler_stream.cancel()

    async def ground_speed_ned(self):
        """ Generated by dcsdkgen """
        request = telemetry_pb2.SubscribeGroundSpeedNedRequest()
        ground_speed_ned_stream = self._stub.SubscribeGroundSpeedNed(request)

        try:
            async for response in ground_speed_ned_stream:
                

            
                yield SpeedNed.translate_from_rpc(response.ground_speed_ned)
        finally:
            ground_speed_ned_stream.cancel()

    async def gps_info(self):
        """ Generated by dcsdkgen """
        request = telemetry_pb2.SubscribeGpsInfoRequest()
        gps_info_stream = self._stub.SubscribeGpsInfo(request)

        try:
            async for response in gps_info_stream:
                

            
                yield GpsInfo.translate_from_rpc(response.gps_info)
        finally:
            gps_info_stream.cancel()

    async def battery(self):
        """ Generated by dcsdkgen """
        request = telemetry_pb2.SubscribeBatteryRequest()
        battery_stream = self._stub.SubscribeBattery(request)

        try:
            async for response in battery_stream:
                

            
                yield Battery.translate_from_rpc(response.battery)
        finally:
            battery_stream.cancel()

    async def flight_mode(self):
        """ Generated by dcsdkgen """
        request = telemetry_pb2.SubscribeFlightModeRequest()
        flight_mode_stream = self._stub.SubscribeFlightMode(request)

        try:
            async for response in flight_mode_stream:
                

            
                yield FlightMode.translate_from_rpc(response.flight_mode)
        finally:
            flight_mode_stream.cancel()

    async def health(self):
        """ Generated by dcsdkgen """
        request = telemetry_pb2.SubscribeHealthRequest()
        health_stream = self._stub.SubscribeHealth(request)

        try:
            async for response in health_stream:
                

            
                yield Health.translate_from_rpc(response.health)
        finally:
            health_stream.cancel()

    async def rc_status(self):
        """ Generated by dcsdkgen """
        request = telemetry_pb2.SubscribeRcStatusRequest()
        rc_status_stream = self._stub.SubscribeRcStatus(request)

        try:
            async for response in rc_status_stream:
                

            
                yield RcStatus.translate_from_rpc(response.rc_status)
        finally:
            rc_status_stream.cancel()

    async def status_text(self):
        """ Generated by dcsdkgen """
        request = telemetry_pb2.SubscribeStatusTextRequest()
        status_text_stream = self._stub.SubscribeStatusText(request)

        try:
            async for response in status_text_stream:
                

            
                yield StatusText.translate_from_rpc(response.status_text)
        finally:
            status_text_stream.cancel()