# -*- coding: utf-8 -*-
from .._base import AsyncBase
from ..generated import gimbal_pb2, gimbal_pb2_grpc
from enum import Enum


class GimbalResult:
    """ Generated by dcsdkgen """

    
    
    class Result(Enum):
        """ Generated by dcsdkgen """

        
        SUCCESS = 0
        ERROR = 1
        TIMEOUT = 2
        UNKNOWN = 3

        def translate_to_rpc(self, rpcResult):
            rpcResult = {
                    0: gimbal_pb2.GimbalResult.SUCCESS,
                    1: gimbal_pb2.GimbalResult.ERROR,
                    2: gimbal_pb2.GimbalResult.TIMEOUT,
                    3: gimbal_pb2.GimbalResult.UNKNOWN
                }.get(self.value, None)

        @staticmethod
        def translate_from_rpc(rpc_enum_value):
            """ Parses a gRPC response """
            return {
                    0: GimbalResult.Result.SUCCESS,
                    1: GimbalResult.Result.ERROR,
                    2: GimbalResult.Result.TIMEOUT,
                    3: GimbalResult.Result.UNKNOWN,
                }.get(rpc_enum_value, None)

        def __str__(self):
            return self.name
    

    def __init__(
            self,
            result,
            result_str):
        """ Initializes the GimbalResult object """
        self.result = result
        self.result_str = result_str

    def __equals__(self, to_compare):
        """ Checks if two GimbalResult are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # GimbalResult object
            return \
                (self.result == to_compare.result) and \
                (self.result_str == to_compare.result_str)

        except AttributeError:
            return False

    def __str__(self):
        """ GimbalResult in string representation """
        struct_repr = ", ".join([
                "result: " + str(self.result),
                "result_str: " + str(self.result_str)
                ])

        return f"GimbalResult: [{struct_repr}]"

    @staticmethod
    def translate_from_rpc(rpcGimbalResult):
        """ Translates a gRPC struct to the SDK equivalent """
        return GimbalResult(
                
                GimbalResult.Result.translate_from_rpc(rpcGimbalResult.result),
                
                
                rpcGimbalResult.result_str
                )

    def translate_to_rpc(self, rpcGimbalResult):
        """ Translates this SDK object into its gRPC equivalent """

        
        
            
        self.result.translate_to_rpc(rpcGimbalResult.result)
            
        
        
        
            
        rpcGimbalResult.result_str = self.result_str
            
        
        



class GimbalError(Exception):
    """ Raised when a GimbalResult is a fail code """

    def __init__(self, result, origin, *params):
        self._result = result
        self._origin = origin
        self._params = params

    def __str__(self):
        return f"{self._result.result}: '{self._result.result_str}'; origin: {self._origin}; params: {self._params}"


class Gimbal(AsyncBase):
    """ Generated by dcsdkgen - MAVSDK Gimbal API """

    # Plugin name
    name = "Gimbal"

    def _setup_stub(self, channel):
        """ Setups the api stub """
        self._stub = gimbal_pb2_grpc.GimbalServiceStub(channel)

    
    def _extract_result(self, response):
        """ Returns the response status and description """
        return GimbalResult.translate_from_rpc(response.gimbal_result)
    

    async def set_pitch_and_yaw(self, pitch_deg, yaw_deg):
        """ Generated by dcsdkgen

        :returns: Tuple[Success, Response]
        """

        request = gimbal_pb2.SetPitchAndYawRequest()
        request.pitch_deg = pitch_deg
        request.yaw_deg = yaw_deg
        response = await self._stub.SetPitchAndYaw(request)

        
        result = self._extract_result(response)

        if result.result is not GimbalResult.Result.SUCCESS:
            raise GimbalError(result, "set_pitch_and_yaw()", pitch_deg, yaw_deg)
        