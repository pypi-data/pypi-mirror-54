"""
pep-0000.ref

Title
"""

import inspect
import sys

import colorama
from colorama.ansi import AnsiFore
from colorama import Fore, Back


def highlight_print(msg: str, fore_color: AnsiFore = Fore.RED) -> None:
    print(Back.LIGHTYELLOW_EX + fore_color + msg)


def test_demo():
    """
    demo
    """
    print(eval(inspect.currentframe().f_code.co_name).__doc__)


def main():
    cur_module = sys.modules[__name__]
    list_test_functions = [(name.replace('test_', ''), func, func.__doc__) for name, func in
                           [item for item in inspect.getmembers(cur_module, inspect.isfunction)]
                           if name.startswith('test_')]

    dict_run = {idx: (name, fun, desc) for idx, (name, fun, desc) in enumerate(list_test_functions)}

    highlight_print(f"{'Action Number':<15} {'func_name':<20} {'description':<40}")
    [print(Fore.BLUE + f"{key:<15} {func_name:<20} {func_name:<100}") for key, (func_name, func, desc) in dict_run.items()]
    case = int(input('run case:'))
    if case not in dict_run:
        return
    func = dict_run[case][1]
    func()


if __name__ == '__main__':
    colorama.init(autoreset=True)

    from argparse import ArgumentParser

    arg_parser = ArgumentParser()
    arg_parser.add_argument("--required_1", help="")
    arg_parser.add_argument("--option_1", help="", dest="option_1", default=None)
    g_args = arg_parser.parse_args()
    highlight_print('GLOBAL ARGUMENT PARSER')
    print(f"{'key':<20} {'value':<40}")
    for _key, _value in vars(g_args).items():
        print(f"{_key:<20} {_value if _value is not None else '':<40}")
    main()
