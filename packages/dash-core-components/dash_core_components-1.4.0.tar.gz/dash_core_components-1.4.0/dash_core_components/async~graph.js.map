{"version":3,"sources":["webpack://dash_core_components/./node_modules/core-js/modules/es.array.from.js","webpack://dash_core_components/./node_modules/core-js/internals/array-from.js","webpack://dash_core_components/./src/fragments/Graph.react.js"],"names":["$","from","target","stat","forced","checkCorrectnessOfIteration","iterable","Array","bind","toObject","callWithSafeIterationClosing","isArrayIteratorMethod","toLength","createProperty","getIteratorMethod","module","exports","arrayLike","length","result","step","iterator","O","C","this","argumentsLength","arguments","mapfn","undefined","mapping","index","iteratorMethod","call","next","done","value","filterEventData","gd","eventData","event","filteredEventData","includes","points","isNil","data","i","fullPoint","pointData","filter","o","type","has","curveNumber","customdata","pointNumber","pointNumbers","range","lassoPoints","PlotlyGraph","props","React","createRef","bindEvents","_hasPlotted","_prevGd","graphResize","figure","animate","animation_options","config","current","Plotly","react","layout","clone","frames","then","removeAllListeners","purge","Plots","resize","clearExtendData","extendData","forEach","updateData","traceIndices","maxPoints","isArray","Object","keys","getFirstProp","extendTraces","setProps","clear_on_unhover","relayoutData","restyleData","hoverData","selectedData","on","clickData","clickAnnotationData","omit","hover","equals","selected","relayout","restyle","plot","window","addEventListener","extend","removeEventListener","nextProps","id","JSON","stringify","style","prevProps","className","loading_state","key","ref","data-dash-is-loading","is_loading","Component","propTypes","graphPropTypes","PropTypes","arrayOf","oneOfType","array","object","func","isRequired","defaultProps","graphDefaultProps"],"mappings":"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","file":"async~graph.js","sourcesContent":["var $ = require('../internals/export');\nvar from = require('../internals/array-from');\nvar checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');\n\nvar INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {\n  Array.from(iterable);\n});\n\n// `Array.from` method\n// https://tc39.github.io/ecma262/#sec-array.from\n$({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {\n  from: from\n});\n","'use strict';\nvar bind = require('../internals/bind-context');\nvar toObject = require('../internals/to-object');\nvar callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar toLength = require('../internals/to-length');\nvar createProperty = require('../internals/create-property');\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\n// `Array.from` method implementation\n// https://tc39.github.io/ecma262/#sec-array.from\nmodule.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n  var O = toObject(arrayLike);\n  var C = typeof this == 'function' ? this : Array;\n  var argumentsLength = arguments.length;\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n  var mapping = mapfn !== undefined;\n  var index = 0;\n  var iteratorMethod = getIteratorMethod(O);\n  var length, result, step, iterator;\n  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);\n  // if the target is not iterable or it's an array with the default iterator - use a simple case\n  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {\n    iterator = iteratorMethod.call(O);\n    result = new C();\n    for (;!(step = iterator.next()).done; index++) {\n      createProperty(result, index, mapping\n        ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true)\n        : step.value\n      );\n    }\n  } else {\n    length = toLength(O.length);\n    result = new C(length);\n    for (;length > index; index++) {\n      createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n    }\n  }\n  result.length = index;\n  return result;\n};\n","import React, {Component} from 'react';\nimport {clone, equals, filter, has, includes, isNil, omit, type} from 'ramda';\nimport PropTypes from 'prop-types';\nimport {graphPropTypes, graphDefaultProps} from '../components/Graph.react';\n/* global Plotly:true */\n\nconst filterEventData = (gd, eventData, event) => {\n    let filteredEventData;\n    if (includes(event, ['click', 'hover', 'selected'])) {\n        const points = [];\n\n        if (isNil(eventData)) {\n            return null;\n        }\n\n        /*\n         * remove `data`, `layout`, `xaxis`, etc\n         * objects from the event data since they're so big\n         * and cause JSON stringify ciricular structure errors.\n         *\n         * also, pull down the `customdata` point from the data array\n         * into the event object\n         */\n        const data = gd.data;\n\n        for (let i = 0; i < eventData.points.length; i++) {\n            const fullPoint = eventData.points[i];\n            const pointData = filter(function(o) {\n                return !includes(type(o), ['Object', 'Array']);\n            }, fullPoint);\n            if (\n                has('curveNumber', fullPoint) &&\n                has('pointNumber', fullPoint) &&\n                has('customdata', data[pointData.curveNumber])\n            ) {\n                pointData.customdata =\n                    data[pointData.curveNumber].customdata[\n                        fullPoint.pointNumber\n                    ];\n            }\n\n            // specific to histogram. see https://github.com/plotly/plotly.js/pull/2113/\n            if (has('pointNumbers', fullPoint)) {\n                pointData.pointNumbers = fullPoint.pointNumbers;\n            }\n\n            points[i] = pointData;\n        }\n        filteredEventData = {points};\n    } else if (event === 'relayout' || event === 'restyle') {\n        /*\n         * relayout shouldn't include any big objects\n         * it will usually just contain the ranges of the axes like\n         * \"xaxis.range[0]\": 0.7715822247381828,\n         * \"xaxis.range[1]\": 3.0095292008680063`\n         */\n        filteredEventData = eventData;\n    }\n    if (has('range', eventData)) {\n        filteredEventData.range = eventData.range;\n    }\n    if (has('lassoPoints', eventData)) {\n        filteredEventData.lassoPoints = eventData.lassoPoints;\n    }\n    return filteredEventData;\n};\n\n/**\n * Graph can be used to render any plotly.js-powered data visualization.\n *\n * You can define callbacks based on user interaction with Graphs such as\n * hovering, clicking or selecting\n */\nclass PlotlyGraph extends Component {\n    constructor(props) {\n        super(props);\n        this.gd = React.createRef();\n        this.bindEvents = this.bindEvents.bind(this);\n        this._hasPlotted = false;\n        this._prevGd = null;\n        this.graphResize = this.graphResize.bind(this);\n    }\n\n    plot(props) {\n        const {figure, animate, animation_options, config} = props;\n        const gd = this.gd.current;\n\n        if (\n            animate &&\n            this._hasPlotted &&\n            figure.data.length === gd.data.length\n        ) {\n            return Plotly.animate(gd, figure, animation_options);\n        }\n        return Plotly.react(gd, {\n            data: figure.data,\n            layout: clone(figure.layout),\n            frames: figure.frames,\n            config: config,\n        }).then(() => {\n            const gd = this.gd.current;\n\n            // double-check gd hasn't been unmounted\n            if (!gd) {\n                return;\n            }\n\n            // in case we've made a new DOM element, transfer events\n            if (this._hasPlotted && gd !== this._prevGd) {\n                if (this._prevGd && this._prevGd.removeAllListeners) {\n                    this._prevGd.removeAllListeners();\n                    Plotly.purge(this._prevGd);\n                }\n                this._hasPlotted = false;\n            }\n\n            if (!this._hasPlotted) {\n                this.bindEvents();\n                Plotly.Plots.resize(gd);\n                this._hasPlotted = true;\n                this._prevGd = gd;\n            }\n        });\n    }\n\n    extend(props) {\n        const {clearExtendData, extendData: extendDataArray} = props;\n\n        extendDataArray.forEach(extendData => {\n            let updateData, traceIndices, maxPoints;\n            if (\n                Array.isArray(extendData) &&\n                typeof extendData[0] === 'object'\n            ) {\n                [updateData, traceIndices, maxPoints] = extendData;\n            } else {\n                updateData = extendData;\n            }\n\n            if (!traceIndices) {\n                function getFirstProp(data) {\n                    return data[Object.keys(data)[0]];\n                }\n\n                function generateIndices(data) {\n                    return Array.from(Array(getFirstProp(data).length).keys());\n                }\n                traceIndices = generateIndices(updateData);\n            }\n\n            const gd = this.gd.current;\n            return Plotly.extendTraces(gd, updateData, traceIndices, maxPoints);\n        });\n        clearExtendData();\n    }\n\n    graphResize() {\n        const gd = this.gd.current;\n        if (gd) {\n            Plotly.Plots.resize(gd);\n        }\n    }\n\n    bindEvents() {\n        const {\n            setProps,\n            clear_on_unhover,\n            relayoutData,\n            restyleData,\n            hoverData,\n            selectedData,\n        } = this.props;\n\n        const gd = this.gd.current;\n\n        gd.on('plotly_click', eventData => {\n            const clickData = filterEventData(gd, eventData, 'click');\n            if (!isNil(clickData)) {\n                setProps({clickData});\n            }\n        });\n        gd.on('plotly_clickannotation', eventData => {\n            const clickAnnotationData = omit(\n                ['event', 'fullAnnotation'],\n                eventData\n            );\n            setProps({clickAnnotationData});\n        });\n        gd.on('plotly_hover', eventData => {\n            const hover = filterEventData(gd, eventData, 'hover');\n            if (!isNil(hover) && !equals(hover, hoverData)) {\n                setProps({hoverData: hover});\n            }\n        });\n        gd.on('plotly_selected', eventData => {\n            const selected = filterEventData(gd, eventData, 'selected');\n            if (!isNil(selected) && !equals(selected, selectedData)) {\n                setProps({selectedData: selected});\n            }\n        });\n        gd.on('plotly_deselect', () => {\n            setProps({selectedData: null});\n        });\n        gd.on('plotly_relayout', eventData => {\n            const relayout = filterEventData(gd, eventData, 'relayout');\n            if (!isNil(relayout) && !equals(relayout, relayoutData)) {\n                setProps({relayoutData: relayout});\n            }\n        });\n        gd.on('plotly_restyle', eventData => {\n            const restyle = filterEventData(gd, eventData, 'restyle');\n            if (!isNil(restyle) && !equals(restyle, restyleData)) {\n                setProps({restyleData: restyle});\n            }\n        });\n        gd.on('plotly_unhover', () => {\n            if (clear_on_unhover) {\n                setProps({hoverData: null});\n            }\n        });\n    }\n\n    componentDidMount() {\n        this.plot(this.props).then(() => {\n            window.addEventListener('resize', this.graphResize);\n        });\n\n        if (this.props.extendData) {\n            this.extend(this.props);\n        }\n    }\n\n    componentWillUnmount() {\n        const gd = this.gd.current;\n        if (gd && gd.removeAllListeners) {\n            gd.removeAllListeners();\n            if (this._hasPlotted) {\n                Plotly.purge(gd);\n            }\n        }\n        window.removeEventListener('resize', this.graphResize);\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return (\n            this.props.id !== nextProps.id ||\n            JSON.stringify(this.props.style) !== JSON.stringify(nextProps.style)\n        );\n    }\n\n    componentWillReceiveProps(nextProps) {\n        const idChanged = this.props.id !== nextProps.id;\n        if (idChanged) {\n            /*\n             * then the dom needs to get re-rendered with a new ID.\n             * the graph will get updated in componentDidUpdate\n             */\n            return;\n        }\n        if (this.props.figure !== nextProps.figure) {\n            this.plot(nextProps);\n        }\n\n        if (this.props.extendData !== nextProps.extendData) {\n            this.extend(nextProps);\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.id !== this.props.id) {\n            this.plot(this.props);\n        }\n    }\n\n    render() {\n        const {className, id, style, loading_state} = this.props;\n\n        return (\n            <div\n                key={id}\n                id={id}\n                ref={this.gd}\n                data-dash-is-loading={\n                    (loading_state && loading_state.is_loading) || undefined\n                }\n                style={style}\n                className={className}\n            />\n        );\n    }\n}\n\nPlotlyGraph.propTypes = {\n    ...graphPropTypes,\n    extendData: PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.array, PropTypes.object])\n    ),\n    clearExtendData: PropTypes.func.isRequired,\n};\n\nPlotlyGraph.defaultProps = {\n    ...graphDefaultProps,\n    extendData: [],\n};\n\nexport default PlotlyGraph;\n"],"sourceRoot":""}