# coding: utf-8

"""
    GeoAPI

    Geospatial API for TAPIS  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Overlay(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'label': 'str',
        'max_lat': 'float',
        'max_lon': 'float',
        'min_lat': 'float',
        'min_lon': 'float',
        'path': 'str',
        'project_id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'id': 'id',
        'label': 'label',
        'max_lat': 'maxLat',
        'max_lon': 'maxLon',
        'min_lat': 'minLat',
        'min_lon': 'minLon',
        'path': 'path',
        'project_id': 'project_id',
        'uuid': 'uuid'
    }

    def __init__(self, id=None, label=None, max_lat=None, max_lon=None, min_lat=None, min_lon=None, path=None, project_id=None, uuid=None):  # noqa: E501
        """Overlay - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._label = None
        self._max_lat = None
        self._max_lon = None
        self._min_lat = None
        self._min_lon = None
        self._path = None
        self._project_id = None
        self._uuid = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if label is not None:
            self.label = label
        if max_lat is not None:
            self.max_lat = max_lat
        if max_lon is not None:
            self.max_lon = max_lon
        if min_lat is not None:
            self.min_lat = min_lat
        if min_lon is not None:
            self.min_lon = min_lon
        if path is not None:
            self.path = path
        if project_id is not None:
            self.project_id = project_id
        if uuid is not None:
            self.uuid = uuid

    @property
    def id(self):
        """Gets the id of this Overlay.  # noqa: E501


        :return: The id of this Overlay.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Overlay.


        :param id: The id of this Overlay.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this Overlay.  # noqa: E501


        :return: The label of this Overlay.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Overlay.


        :param label: The label of this Overlay.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def max_lat(self):
        """Gets the max_lat of this Overlay.  # noqa: E501


        :return: The max_lat of this Overlay.  # noqa: E501
        :rtype: float
        """
        return self._max_lat

    @max_lat.setter
    def max_lat(self, max_lat):
        """Sets the max_lat of this Overlay.


        :param max_lat: The max_lat of this Overlay.  # noqa: E501
        :type: float
        """

        self._max_lat = max_lat

    @property
    def max_lon(self):
        """Gets the max_lon of this Overlay.  # noqa: E501


        :return: The max_lon of this Overlay.  # noqa: E501
        :rtype: float
        """
        return self._max_lon

    @max_lon.setter
    def max_lon(self, max_lon):
        """Sets the max_lon of this Overlay.


        :param max_lon: The max_lon of this Overlay.  # noqa: E501
        :type: float
        """

        self._max_lon = max_lon

    @property
    def min_lat(self):
        """Gets the min_lat of this Overlay.  # noqa: E501


        :return: The min_lat of this Overlay.  # noqa: E501
        :rtype: float
        """
        return self._min_lat

    @min_lat.setter
    def min_lat(self, min_lat):
        """Sets the min_lat of this Overlay.


        :param min_lat: The min_lat of this Overlay.  # noqa: E501
        :type: float
        """

        self._min_lat = min_lat

    @property
    def min_lon(self):
        """Gets the min_lon of this Overlay.  # noqa: E501


        :return: The min_lon of this Overlay.  # noqa: E501
        :rtype: float
        """
        return self._min_lon

    @min_lon.setter
    def min_lon(self, min_lon):
        """Sets the min_lon of this Overlay.


        :param min_lon: The min_lon of this Overlay.  # noqa: E501
        :type: float
        """

        self._min_lon = min_lon

    @property
    def path(self):
        """Gets the path of this Overlay.  # noqa: E501


        :return: The path of this Overlay.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Overlay.


        :param path: The path of this Overlay.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def project_id(self):
        """Gets the project_id of this Overlay.  # noqa: E501


        :return: The project_id of this Overlay.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Overlay.


        :param project_id: The project_id of this Overlay.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def uuid(self):
        """Gets the uuid of this Overlay.  # noqa: E501


        :return: The uuid of this Overlay.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Overlay.


        :param uuid: The uuid of this Overlay.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Overlay, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Overlay):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
