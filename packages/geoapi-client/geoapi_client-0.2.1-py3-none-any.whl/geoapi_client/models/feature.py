# coding: utf-8

"""
    GeoAPI

    Geospatial API for TAPIS  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Feature(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assets': 'list[Asset]',
        'geometry': 'object',
        'id': 'int',
        'properties': 'object',
        'styles': 'object',
        'type': 'str'
    }

    attribute_map = {
        'assets': 'assets',
        'geometry': 'geometry',
        'id': 'id',
        'properties': 'properties',
        'styles': 'styles',
        'type': 'type'
    }

    def __init__(self, assets=None, geometry=None, id=None, properties=None, styles=None, type='Feature'):  # noqa: E501
        """Feature - a model defined in Swagger"""  # noqa: E501

        self._assets = None
        self._geometry = None
        self._id = None
        self._properties = None
        self._styles = None
        self._type = None
        self.discriminator = None

        if assets is not None:
            self.assets = assets
        self.geometry = geometry
        if id is not None:
            self.id = id
        if properties is not None:
            self.properties = properties
        if styles is not None:
            self.styles = styles
        self.type = type

    @property
    def assets(self):
        """Gets the assets of this Feature.  # noqa: E501


        :return: The assets of this Feature.  # noqa: E501
        :rtype: list[Asset]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this Feature.


        :param assets: The assets of this Feature.  # noqa: E501
        :type: list[Asset]
        """

        self._assets = assets

    @property
    def geometry(self):
        """Gets the geometry of this Feature.  # noqa: E501


        :return: The geometry of this Feature.  # noqa: E501
        :rtype: object
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this Feature.


        :param geometry: The geometry of this Feature.  # noqa: E501
        :type: object
        """
        if geometry is None:
            raise ValueError("Invalid value for `geometry`, must not be `None`")  # noqa: E501

        self._geometry = geometry

    @property
    def id(self):
        """Gets the id of this Feature.  # noqa: E501


        :return: The id of this Feature.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Feature.


        :param id: The id of this Feature.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def properties(self):
        """Gets the properties of this Feature.  # noqa: E501


        :return: The properties of this Feature.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Feature.


        :param properties: The properties of this Feature.  # noqa: E501
        :type: object
        """

        self._properties = properties

    @property
    def styles(self):
        """Gets the styles of this Feature.  # noqa: E501


        :return: The styles of this Feature.  # noqa: E501
        :rtype: object
        """
        return self._styles

    @styles.setter
    def styles(self, styles):
        """Sets the styles of this Feature.


        :param styles: The styles of this Feature.  # noqa: E501
        :type: object
        """

        self._styles = styles

    @property
    def type(self):
        """Gets the type of this Feature.  # noqa: E501


        :return: The type of this Feature.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Feature.


        :param type: The type of this Feature.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Feature, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Feature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
