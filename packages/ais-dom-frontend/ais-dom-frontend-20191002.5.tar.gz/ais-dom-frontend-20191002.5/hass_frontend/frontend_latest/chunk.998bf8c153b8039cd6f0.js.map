{"version":3,"sources":["webpack:///./node_modules/es6-object-assign/index.js","webpack:///./node_modules/mdn-polyfills/Array.prototype.includes.js","webpack:///./node_modules/regenerator-runtime/runtime.js","webpack:///./node_modules/unfetch/polyfill/polyfill.mjs","webpack:///./node_modules/unfetch/src/index.mjs","webpack:///./src/entrypoints/compatibility.ts"],"names":["assign","target","firstSource","TypeError","to","Object","i","arguments","length","nextSource","keysArray","keys","nextIndex","len","nextKey","desc","getOwnPropertyDescriptor","undefined","enumerable","module","exports","polyfill","defineProperty","configurable","writable","value","Array","prototype","includes","r","this","e","n","parseInt","t","o","runtime","Op","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","GenStateSuspendedStart","method","arg","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","done","GenStateSuspendedYield","makeInvokeMethod","fn","obj","call","err","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","previousPromise","callInvokeWithMethodAndArg","Promise","resolve","reject","invoke","result","__await","then","unwrapped","error","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","object","key","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","fetch","url","options","request","XMLHttpRequest","all","headers","response","ok","status","statusText","responseURL","text","responseText","json","JSON","parse","blob","Blob","clone","entries","get","toLowerCase","has","open","onload","getAllResponseHeaders","replace","m","onerror","withCredentials","credentials","setRequestHeader","send","body","a","map","String","padStart","targetLength","padString","repeat"],"mappings":"0FAOA,SAAAA,EAAAC,EAAAC,GACA,GAAAD,QACA,UAAAE,UAAA,2CAIA,IADA,IAAAC,EAAAC,OAAAJ,GACAK,EAAA,EAAiBA,EAAAC,UAAAC,OAAsBF,IAAA,CACvC,IAAAG,EAAAF,UAAAD,GACA,GAAAG,QAKA,IADA,IAAAC,EAAAL,OAAAM,KAAAN,OAAAI,IACAG,EAAA,EAAAC,EAAAH,EAAAF,OAAmDI,EAAAC,EAAiBD,IAAA,CACpE,IAAAE,EAAAJ,EAAAE,GACAG,EAAAV,OAAAW,yBAAAP,EAAAK,QACAG,IAAAF,KAAAG,aACAd,EAAAU,GAAAL,EAAAK,KAIA,OAAAV,EAcAe,EAAAC,QAAA,CACApB,SACAqB,SAbA,WACAhB,OAAAL,QACAK,OAAAiB,eAAAjB,OAAA,UACAa,YAAA,EACAK,cAAA,EACAC,UAAA,EACAC,MAAAzB,yBCrCA0B,MAAAC,UAAAC,WAAAF,MAAAC,UAAAC,SAAA,SAAAC,GAAgE,SAAAC,KAAA,UAAA3B,UAAA,wDAA0F,IAAA4B,EAAA1B,OAAAyB,MAAAE,EAAAC,SAAAF,EAAAvB,OAAA,OAA8C,OAAAwB,EAAA,SAAkB,IAAAE,EAAAC,EAAA7B,EAAA2B,SAAA1B,UAAA,UAAuC,OAAAD,EAAA4B,EAAA5B,GAAA4B,EAAAF,EAAA1B,GAAA,IAAA4B,EAAA,GAA8BA,EAAAF,GAAI,CAAE,GAAAH,KAAAM,EAAAJ,EAAAG,KAAAL,MAAAM,KAAA,SAAqCD,IAAI,gCCO9U,IAAAE,EAAA,SAAAhB,GACA,aAEA,IAEAH,EAFAoB,EAAAhC,OAAAsB,UACAW,EAAAD,EAAAE,eAEAC,EAAA,mBAAAC,cAAA,GACAC,EAAAF,EAAAG,UAAA,aACAC,EAAAJ,EAAAK,eAAA,kBACAC,EAAAN,EAAAO,aAAA,gBAEA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,IAAAC,EAAAH,KAAAvB,qBAAA2B,EAAAJ,EAAAI,EACAC,EAAAlD,OAAAmD,OAAAH,EAAA1B,WACA8B,EAAA,IAAAC,EAAAN,GAAA,IAMA,OAFAG,EAAAI,QAkMA,SAAAV,EAAAE,EAAAM,GACA,IAAAG,EAAAC,EAEA,gBAAAC,EAAAC,GACA,GAAAH,IAAAI,EACA,UAAAC,MAAA,gCAGA,GAAAL,IAAAM,EAAA,CACA,aAAAJ,EACA,MAAAC,EAKA,OAAAI,IAMA,IAHAV,EAAAK,SACAL,EAAAM,QAEA,CACA,IAAAK,EAAAX,EAAAW,SACA,GAAAA,EAAA,CACA,IAAAC,EAAAC,EAAAF,EAAAX,GACA,GAAAY,EAAA,CACA,GAAAA,IAAAE,EAAA,SACA,OAAAF,GAIA,YAAAZ,EAAAK,OAGAL,EAAAe,KAAAf,EAAAgB,MAAAhB,EAAAM,SAES,aAAAN,EAAAK,OAAA,CACT,GAAAF,IAAAC,EAEA,MADAD,EAAAM,EACAT,EAAAM,IAGAN,EAAAiB,kBAAAjB,EAAAM,SAES,WAAAN,EAAAK,QACTL,EAAAkB,OAAA,SAAAlB,EAAAM,KAGAH,EAAAI,EAEA,IAAAY,EAAAC,EAAA5B,EAAAE,EAAAM,GACA,cAAAmB,EAAAE,KAAA,CAOA,GAJAlB,EAAAH,EAAAsB,KACAb,EACAc,EAEAJ,EAAAb,MAAAQ,EACA,SAGA,OACA9C,MAAAmD,EAAAb,IACAgB,KAAAtB,EAAAsB,MAGS,UAAAH,EAAAE,OACTlB,EAAAM,EAGAT,EAAAK,OAAA,QACAL,EAAAM,IAAAa,EAAAb,OA1QAkB,CAAAhC,EAAAE,EAAAM,GAEAF,EAcA,SAAAsB,EAAAK,EAAAC,EAAApB,GACA,IACA,OAAce,KAAA,SAAAf,IAAAmB,EAAAE,KAAAD,EAAApB,IACT,MAAAsB,GACL,OAAcP,KAAA,QAAAf,IAAAsB,IAhBdjE,EAAA4B,OAoBA,IAAAa,EAAA,iBACAmB,EAAA,iBACAhB,EAAA,YACAE,EAAA,YAIAK,EAAA,GAMA,SAAAjB,KACA,SAAAgC,KACA,SAAAC,KAIA,IAAAC,EAAA,GACAA,EAAA9C,GAAA,WACA,OAAAZ,MAGA,IAAA2D,EAAApF,OAAAqF,eACAC,EAAAF,OAAAG,EAAA,MACAD,GACAA,IAAAtD,GACAC,EAAA8C,KAAAO,EAAAjD,KAGA8C,EAAAG,GAGA,IAAAE,EAAAN,EAAA5D,UACA2B,EAAA3B,UAAAtB,OAAAmD,OAAAgC,GAQA,SAAAM,EAAAnE,GACA,0BAAAoE,QAAA,SAAAjC,GACAnC,EAAAmC,GAAA,SAAAC,GACA,OAAAjC,KAAA6B,QAAAG,EAAAC,MAoCA,SAAAiC,EAAAzC,GAgCA,IAAA0C,EAgCAnE,KAAA6B,QA9BA,SAAAG,EAAAC,GACA,SAAAmC,IACA,WAAAC,QAAA,SAAAC,EAAAC,IAnCA,SAAAC,EAAAxC,EAAAC,EAAAqC,EAAAC,GACA,IAAAzB,EAAAC,EAAAtB,EAAAO,GAAAP,EAAAQ,GACA,aAAAa,EAAAE,KAEO,CACP,IAAAyB,EAAA3B,EAAAb,IACAtC,EAAA8E,EAAA9E,MACA,OAAAA,GACA,iBAAAA,GACAa,EAAA8C,KAAA3D,EAAA,WACA0E,QAAAC,QAAA3E,EAAA+E,SAAAC,KAAA,SAAAhF,GACA6E,EAAA,OAAA7E,EAAA2E,EAAAC,IACW,SAAAhB,GACXiB,EAAA,QAAAjB,EAAAe,EAAAC,KAIAF,QAAAC,QAAA3E,GAAAgF,KAAA,SAAAC,GAIAH,EAAA9E,MAAAiF,EACAN,EAAAG,IACS,SAAAI,GAGT,OAAAL,EAAA,QAAAK,EAAAP,EAAAC,KAvBAA,EAAAzB,EAAAb,KAiCAuC,CAAAxC,EAAAC,EAAAqC,EAAAC,KAIA,OAAAJ,EAaAA,IAAAQ,KACAP,EAGAA,GACAA,KA+GA,SAAA5B,EAAAF,EAAAX,GACA,IAAAK,EAAAM,EAAAzB,SAAAc,EAAAK,QACA,GAAAA,IAAA7C,EAAA,CAKA,GAFAwC,EAAAW,SAAA,KAEA,UAAAX,EAAAK,OAAA,CAEA,GAAAM,EAAAzB,SAAA,SAGAc,EAAAK,OAAA,SACAL,EAAAM,IAAA9C,EACAqD,EAAAF,EAAAX,GAEA,UAAAA,EAAAK,QAGA,OAAAS,EAIAd,EAAAK,OAAA,QACAL,EAAAM,IAAA,IAAA5D,UACA,kDAGA,OAAAoE,EAGA,IAAAK,EAAAC,EAAAf,EAAAM,EAAAzB,SAAAc,EAAAM,KAEA,aAAAa,EAAAE,KAIA,OAHArB,EAAAK,OAAA,QACAL,EAAAM,IAAAa,EAAAb,IACAN,EAAAW,SAAA,KACAG,EAGA,IAAAqC,EAAAhC,EAAAb,IAEA,OAAA6C,EAOAA,EAAA7B,MAGAtB,EAAAW,EAAAyC,YAAAD,EAAAnF,MAGAgC,EAAAqD,KAAA1C,EAAA2C,QAQA,WAAAtD,EAAAK,SACAL,EAAAK,OAAA,OACAL,EAAAM,IAAA9C,GAUAwC,EAAAW,SAAA,KACAG,GANAqC,GA3BAnD,EAAAK,OAAA,QACAL,EAAAM,IAAA,IAAA5D,UAAA,oCACAsD,EAAAW,SAAA,KACAG,GAoDA,SAAAyC,EAAAC,GACA,IAAAC,EAAA,CAAiBC,OAAAF,EAAA,IAEjB,KAAAA,IACAC,EAAAE,SAAAH,EAAA,IAGA,KAAAA,IACAC,EAAAG,WAAAJ,EAAA,GACAC,EAAAI,SAAAL,EAAA,IAGAnF,KAAAyF,WAAAC,KAAAN,GAGA,SAAAO,EAAAP,GACA,IAAAtC,EAAAsC,EAAAQ,YAAA,GACA9C,EAAAE,KAAA,gBACAF,EAAAb,IACAmD,EAAAQ,WAAA9C,EAGA,SAAAlB,EAAAN,GAIAtB,KAAAyF,WAAA,EAAwBJ,OAAA,SACxB/D,EAAA2C,QAAAiB,EAAAlF,MACAA,KAAA6F,OAAA,GA8BA,SAAA/B,EAAAgC,GACA,GAAAA,EAAA,CACA,IAAAC,EAAAD,EAAAlF,GACA,GAAAmF,EACA,OAAAA,EAAAzC,KAAAwC,GAGA,sBAAAA,EAAAd,KACA,OAAAc,EAGA,IAAAE,MAAAF,EAAApH,QAAA,CACA,IAAAF,GAAA,EAAAwG,EAAA,SAAAA,IACA,OAAAxG,EAAAsH,EAAApH,QACA,GAAA8B,EAAA8C,KAAAwC,EAAAtH,GAGA,OAFAwG,EAAArF,MAAAmG,EAAAtH,GACAwG,EAAA/B,MAAA,EACA+B,EAOA,OAHAA,EAAArF,MAAAR,EACA6F,EAAA/B,MAAA,EAEA+B,GAGA,OAAAA,UAKA,OAAYA,KAAA3C,GAIZ,SAAAA,IACA,OAAY1C,MAAAR,EAAA8D,MAAA,GA+MZ,OAxmBAO,EAAA3D,UAAAkE,EAAAkC,YAAAxC,EACAA,EAAAwC,YAAAzC,EACAC,EAAAzC,GACAwC,EAAA0C,YAAA,oBAYA5G,EAAA6G,oBAAA,SAAAC,GACA,IAAAC,EAAA,mBAAAD,KAAAH,YACA,QAAAI,IACAA,IAAA7C,GAGA,uBAAA6C,EAAAH,aAAAG,EAAAC,QAIAhH,EAAAiH,KAAA,SAAAH,GAUA,OATA7H,OAAAiI,eACAjI,OAAAiI,eAAAJ,EAAA3C,IAEA2C,EAAAK,UAAAhD,EACAzC,KAAAoF,IACAA,EAAApF,GAAA,sBAGAoF,EAAAvG,UAAAtB,OAAAmD,OAAAqC,GACAqC,GAOA9G,EAAAoH,MAAA,SAAAzE,GACA,OAAYyC,QAAAzC,IAsEZ+B,EAAAE,EAAArE,WACAqE,EAAArE,UAAAiB,GAAA,WACA,OAAAd,MAEAV,EAAA4E,gBAKA5E,EAAAqH,MAAA,SAAAxF,EAAAC,EAAAC,EAAAC,GACA,IAAAsF,EAAA,IAAA1C,EACAhD,EAAAC,EAAAC,EAAAC,EAAAC,IAGA,OAAAhC,EAAA6G,oBAAA/E,GACAwF,EACAA,EAAA5B,OAAAL,KAAA,SAAAF,GACA,OAAAA,EAAAxB,KAAAwB,EAAA9E,MAAAiH,EAAA5B,UAuKAhB,EAAAD,GAEAA,EAAA/C,GAAA,YAOA+C,EAAAnD,GAAA,WACA,OAAAZ,MAGA+D,EAAA8C,SAAA,WACA,4BAkCAvH,EAAAT,KAAA,SAAAiI,GACA,IAAAjI,EAAA,GACA,QAAAkI,KAAAD,EACAjI,EAAA6G,KAAAqB,GAMA,OAJAlI,EAAAmI,UAIA,SAAAhC,IACA,KAAAnG,EAAAH,QAAA,CACA,IAAAqI,EAAAlI,EAAAoI,MACA,GAAAF,KAAAD,EAGA,OAFA9B,EAAArF,MAAAoH,EACA/B,EAAA/B,MAAA,EACA+B,EAQA,OADAA,EAAA/B,MAAA,EACA+B,IAsCA1F,EAAAwE,SAMAlC,EAAA/B,UAAA,CACAoG,YAAArE,EAEAiE,MAAA,SAAAqB,GAcA,GAbAlH,KAAAmH,KAAA,EACAnH,KAAAgF,KAAA,EAGAhF,KAAA0C,KAAA1C,KAAA2C,MAAAxD,EACAa,KAAAiD,MAAA,EACAjD,KAAAsC,SAAA,KAEAtC,KAAAgC,OAAA,OACAhC,KAAAiC,IAAA9C,EAEAa,KAAAyF,WAAAxB,QAAA0B,IAEAuB,EACA,QAAAZ,KAAAtG,KAEA,MAAAsG,EAAAc,OAAA,IACA5G,EAAA8C,KAAAtD,KAAAsG,KACAN,OAAAM,EAAAe,MAAA,MACArH,KAAAsG,GAAAnH,IAMAmI,KAAA,WACAtH,KAAAiD,MAAA,EAEA,IACAsE,EADAvH,KAAAyF,WAAA,GACAG,WACA,aAAA2B,EAAAvE,KACA,MAAAuE,EAAAtF,IAGA,OAAAjC,KAAAwH,MAGA5E,kBAAA,SAAA6E,GACA,GAAAzH,KAAAiD,KACA,MAAAwE,EAGA,IAAA9F,EAAA3B,KACA,SAAA0H,EAAAC,EAAAC,GAYA,OAXA9E,EAAAE,KAAA,QACAF,EAAAb,IAAAwF,EACA9F,EAAAqD,KAAA2C,EAEAC,IAGAjG,EAAAK,OAAA,OACAL,EAAAM,IAAA9C,KAGAyI,EAGA,QAAApJ,EAAAwB,KAAAyF,WAAA/G,OAAA,EAA8CF,GAAA,IAAQA,EAAA,CACtD,IAAA4G,EAAApF,KAAAyF,WAAAjH,GACAsE,EAAAsC,EAAAQ,WAEA,YAAAR,EAAAC,OAIA,OAAAqC,EAAA,OAGA,GAAAtC,EAAAC,QAAArF,KAAAmH,KAAA,CACA,IAAAU,EAAArH,EAAA8C,KAAA8B,EAAA,YACA0C,EAAAtH,EAAA8C,KAAA8B,EAAA,cAEA,GAAAyC,GAAAC,EAAA,CACA,GAAA9H,KAAAmH,KAAA/B,EAAAE,SACA,OAAAoC,EAAAtC,EAAAE,UAAA,GACa,GAAAtF,KAAAmH,KAAA/B,EAAAG,WACb,OAAAmC,EAAAtC,EAAAG,iBAGW,GAAAsC,GACX,GAAA7H,KAAAmH,KAAA/B,EAAAE,SACA,OAAAoC,EAAAtC,EAAAE,UAAA,OAGW,KAAAwC,EAMX,UAAA3F,MAAA,0CALA,GAAAnC,KAAAmH,KAAA/B,EAAAG,WACA,OAAAmC,EAAAtC,EAAAG,gBAUA1C,OAAA,SAAAG,EAAAf,GACA,QAAAzD,EAAAwB,KAAAyF,WAAA/G,OAAA,EAA8CF,GAAA,IAAQA,EAAA,CACtD,IAAA4G,EAAApF,KAAAyF,WAAAjH,GACA,GAAA4G,EAAAC,QAAArF,KAAAmH,MACA3G,EAAA8C,KAAA8B,EAAA,eACApF,KAAAmH,KAAA/B,EAAAG,WAAA,CACA,IAAAwC,EAAA3C,EACA,OAIA2C,IACA,UAAA/E,GACA,aAAAA,IACA+E,EAAA1C,QAAApD,GACAA,GAAA8F,EAAAxC,aAGAwC,EAAA,MAGA,IAAAjF,EAAAiF,IAAAnC,WAAA,GAIA,OAHA9C,EAAAE,OACAF,EAAAb,MAEA8F,GACA/H,KAAAgC,OAAA,OACAhC,KAAAgF,KAAA+C,EAAAxC,WACA9C,GAGAzC,KAAAgI,SAAAlF,IAGAkF,SAAA,SAAAlF,EAAA0C,GACA,aAAA1C,EAAAE,KACA,MAAAF,EAAAb,IAcA,MAXA,UAAAa,EAAAE,MACA,aAAAF,EAAAE,KACAhD,KAAAgF,KAAAlC,EAAAb,IACO,WAAAa,EAAAE,MACPhD,KAAAwH,KAAAxH,KAAAiC,IAAAa,EAAAb,IACAjC,KAAAgC,OAAA,SACAhC,KAAAgF,KAAA,OACO,WAAAlC,EAAAE,MAAAwC,IACPxF,KAAAgF,KAAAQ,GAGA/C,GAGAwF,OAAA,SAAA1C,GACA,QAAA/G,EAAAwB,KAAAyF,WAAA/G,OAAA,EAA8CF,GAAA,IAAQA,EAAA,CACtD,IAAA4G,EAAApF,KAAAyF,WAAAjH,GACA,GAAA4G,EAAAG,eAGA,OAFAvF,KAAAgI,SAAA5C,EAAAQ,WAAAR,EAAAI,UACAG,EAAAP,GACA3C,IAKAyF,MAAA,SAAA7C,GACA,QAAA7G,EAAAwB,KAAAyF,WAAA/G,OAAA,EAA8CF,GAAA,IAAQA,EAAA,CACtD,IAAA4G,EAAApF,KAAAyF,WAAAjH,GACA,GAAA4G,EAAAC,WAAA,CACA,IAAAvC,EAAAsC,EAAAQ,WACA,aAAA9C,EAAAE,KAAA,CACA,IAAAmF,EAAArF,EAAAb,IACA0D,EAAAP,GAEA,OAAA+C,GAMA,UAAAhG,MAAA,0BAGAiG,cAAA,SAAAtC,EAAAf,EAAAE,GAaA,OAZAjF,KAAAsC,SAAA,CACAzB,SAAAiD,EAAAgC,GACAf,aACAE,WAGA,SAAAjF,KAAAgC,SAGAhC,KAAAiC,IAAA9C,GAGAsD,IAQAnD,EAvrBA,CA8rB4BD,EAAAC,SAG5B,IACA+I,mBAAA/H,EACC,MAAAgI,GAUDC,SAAA,6BAAAA,CAAAjI,oDCntBAe,KAAAmH,QAAAnH,KAAAmH,MCDe,SAAAC,EAAAC,GAEf,OADAA,KAAA,GACA,IAAArE,QAAA,CAAAC,EAAAC,KACA,MAAAoE,EAAA,IAAAC,eACA/J,EAAA,GACAgK,EAAA,GACAC,EAAA,GAEAC,EAAA,MACAC,GAAA,IAAAL,EAAAM,OAAA,OACAC,WAAAP,EAAAO,WACAD,OAAAN,EAAAM,OACAR,IAAAE,EAAAQ,YACAC,KAAA,IAAA/E,QAAAC,QAAAqE,EAAAU,cACAC,KAAA,IAAAjF,QAAAC,QAAAiF,KAAAC,MAAAb,EAAAU,eACAI,KAAA,IAAApF,QAAAC,QAAA,IAAAoF,KAAA,CAAAf,EAAAI,YACAY,MAAAZ,EACAD,QAAA,CACAjK,KAAA,IAAAA,EACA+K,QAAA,IAAAf,EACAgB,IAAA3J,GAAA4I,EAAA5I,EAAA4J,eACAC,IAAA7J,KAAA4J,gBAAAhB,KAIAH,EAAAqB,KAAAtB,EAAA1G,QAAA,MAAAyG,GAAA,GAEAE,EAAAsB,OAAA,MACAtB,EAAAuB,wBAAAC,QAAA,gCAAAC,EAAArD,EAAApH,KACAd,EAAA6G,KAAAqB,IAAA+C,eACAjB,EAAAnD,KAAA,CAAAqB,EAAApH,IACAmJ,EAAA/B,GAAA+B,EAAA/B,MAAqC+B,EAAA/B,MAAgBpH,IAAMA,IAE3D2E,EAAAyE,OAGAJ,EAAA0B,QAAA9F,EAEAoE,EAAA2B,gBAAA,WAAA5B,EAAA6B,YAEA,UAAA/L,KAAAkK,EAAAI,QACAH,EAAA6B,iBAAAhM,EAAAkK,EAAAI,QAAAtK,IAGAmK,EAAA8B,KAAA/B,EAAAgC,MAAA,qCCvCAC,EAAUpL,gBAEYJ,IAAlBZ,OAAOuF,SACTvF,OAAOuF,OAAS,CAAC3F,GACRI,OAAOM,KAAKV,GAAQyM,IAAK7D,GAAQ5I,EAAO4I,MAO9C8D,OAAOhL,UAAUiL,WACpBD,OAAOhL,UAAUiL,SAAW,SAAkBC,EAAcC,GAG1D,OAFAD,IAA+B,EAC/BC,EAAYH,YAA4B,IAAdG,EAA4BA,EAAY,KAC9DhL,KAAKtB,QAAUqM,EACVF,OAAO7K,QAEd+K,GAA8B/K,KAAKtB,QAChBsM,EAAUtM,SAC3BsM,GAAaA,EAAUC,OAAOF,EAAeC,EAAUtM,SAElDsM,EAAU3D,MAAM,EAAG0D,GAAgBF,OAAO7K","file":"chunk.998bf8c153b8039cd6f0.js","sourcesContent":["/**\n * Code refactored from Mozilla Developer Network:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n */\n\n'use strict';\n\nfunction assign(target, firstSource) {\n  if (target === undefined || target === null) {\n    throw new TypeError('Cannot convert first argument to object');\n  }\n\n  var to = Object(target);\n  for (var i = 1; i < arguments.length; i++) {\n    var nextSource = arguments[i];\n    if (nextSource === undefined || nextSource === null) {\n      continue;\n    }\n\n    var keysArray = Object.keys(Object(nextSource));\n    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n      var nextKey = keysArray[nextIndex];\n      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n      if (desc !== undefined && desc.enumerable) {\n        to[nextKey] = nextSource[nextKey];\n      }\n    }\n  }\n  return to;\n}\n\nfunction polyfill() {\n  if (!Object.assign) {\n    Object.defineProperty(Object, 'assign', {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n      value: assign\n    });\n  }\n}\n\nmodule.exports = {\n  assign: assign,\n  polyfill: polyfill\n};\n","Array.prototype.includes||(Array.prototype.includes=function(r){if(null==this)throw new TypeError(\"Array.prototype.includes called on null or undefined\");var e=Object(this),n=parseInt(e.length,10)||0;if(0===n)return!1;var t,o,i=parseInt(arguments[1],10)||0;for(0<=i?t=i:(t=n+i)<0&&(t=0);t<n;){if(r===(o=e[t])||r!=r&&o!=o)return!0;t++}return!1});\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import unfetch from '../src/index.mjs';\nif (!self.fetch) self.fetch = unfetch;\n","export default function(url, options) {\n\toptions = options || {};\n\treturn new Promise( (resolve, reject) => {\n\t\tconst request = new XMLHttpRequest();\n\t\tconst keys = [];\n\t\tconst all = [];\n\t\tconst headers = {};\n\n\t\tconst response = () => ({\n\t\t\tok: (request.status/100|0) == 2,\t\t// 200-299\n\t\t\tstatusText: request.statusText,\n\t\t\tstatus: request.status,\n\t\t\turl: request.responseURL,\n\t\t\ttext: () => Promise.resolve(request.responseText),\n\t\t\tjson: () => Promise.resolve(JSON.parse(request.responseText)),\n\t\t\tblob: () => Promise.resolve(new Blob([request.response])),\n\t\t\tclone: response,\n\t\t\theaders: {\n\t\t\t\tkeys: () => keys,\n\t\t\t\tentries: () => all,\n\t\t\t\tget: n => headers[n.toLowerCase()],\n\t\t\t\thas: n => n.toLowerCase() in headers\n\t\t\t}\n\t\t});\n\n\t\trequest.open(options.method || 'get', url, true);\n\n\t\trequest.onload = () => {\n\t\t\trequest.getAllResponseHeaders().replace(/^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm, (m, key, value) => {\n\t\t\t\tkeys.push(key = key.toLowerCase());\n\t\t\t\tall.push([key, value]);\n\t\t\t\theaders[key] = headers[key] ? `${headers[key]},${value}` : value;\n\t\t\t});\n\t\t\tresolve(response());\n\t\t};\n\n\t\trequest.onerror = reject;\n\n\t\trequest.withCredentials = options.credentials=='include';\n\n\t\tfor (const i in options.headers) {\n\t\t\trequest.setRequestHeader(i, options.headers[i]);\n\t\t}\n\n\t\trequest.send(options.body || null);\n\t});\n}\n","import \"mdn-polyfills/Array.prototype.includes\";\nimport \"unfetch/polyfill\";\nimport \"regenerator-runtime/runtime\";\nimport objAssign from \"es6-object-assign\";\n\nobjAssign.polyfill();\n\nif (Object.values === undefined) {\n  Object.values = (target) => {\n    return Object.keys(target).map((key) => target[key]);\n  };\n}\n\n/* tslint:disable */\n// https://github.com/uxitten/polyfill/blob/master/string.polyfill.js\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\nif (!String.prototype.padStart) {\n  String.prototype.padStart = function padStart(targetLength, padString) {\n    targetLength = targetLength >> 0; //truncate if number, or convert non-number to 0;\n    padString = String(typeof padString !== \"undefined\" ? padString : \" \");\n    if (this.length >= targetLength) {\n      return String(this);\n    } else {\n      targetLength = targetLength - this.length;\n      if (targetLength > padString.length) {\n        padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed\n      }\n      return padString.slice(0, targetLength) + String(this);\n    }\n  };\n}\n/* tslint:enable */\n"],"sourceRoot":""}