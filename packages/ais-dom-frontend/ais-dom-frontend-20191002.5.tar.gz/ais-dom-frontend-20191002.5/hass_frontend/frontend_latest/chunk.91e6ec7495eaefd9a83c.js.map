{"version":3,"sources":["webpack:///./node_modules/@polymer/iron-selector/iron-multi-selectable.js","webpack:///./node_modules/@polymer/iron-menu-behavior/iron-menu-behavior.js","webpack:///./node_modules/@polymer/iron-selector/iron-selection.js","webpack:///./node_modules/@polymer/iron-selector/iron-selectable.js"],"names":["IronMultiSelectableBehaviorImpl","properties","multi","type","Boolean","value","observer","selectedValues","Array","notify","selectedItems","readOnly","observers","select","this","_toggleSelected","selected","multiChanged","_selection","_updateSelected","_shouldUpdateSelection","length","_updateAttrForSelected","map","selectedItem","_indexToValue","indexOf","filter","unfilteredValue","iron_selectable","apply","_selectMulti","_selectSelected","values","_valuesToItems","item","clear","i","setItemSelected","fallbackSelection","get","_valueToItem","_selectionChange","s","_setSelectedItems","_setSelectedItem","push","splice","IronMultiSelectableBehavior","__webpack_require__","d","__webpack_exports__","IronMenuBehaviorImpl","IronMenuBehavior","focusedItem","Object","attrForItemTitle","String","disabled","_MODIFIER_KEYS","_SEARCH_RESET_TIMEOUT_MS","_previousTabIndex","hostAttributes","role","listeners","focus","keydown","iron-items-changed","keyBindings","up","down","esc","shift+tab:keydown","attached","_resetTabindices","_defaultFocusAsync","cancelAsync","hasAttribute","_setFocusedItem","arguments","firstSelectedItem","items","forEach","setAttribute","isSelected","_updateMultiselectable","removeAttribute","_focusWithKeyboardEvent","event","key","cancelDebouncer","searchText","_searchText","searchLength","fromCharCode","keyCode","toLocaleLowerCase","attr","title","getAttribute","trim","slice","debounce","_clearSearchText","_focusPrevious","curFocusIndex","Number","owner","polymer_dom","getOwnerRoot","document","activeElement","_focusNext","_applySelection","_focusedItemChanged","old","_onIronItemsChanged","detail","addedNodes","_onShiftTabDown","oldTabIndex","_shiftTabPressed","async","_onFocus","rootTarget","tabIndex","isLightDescendant","_onUpKey","keyboardEvent","preventDefault","_onDownKey","_onEscKey","blur","_onKeydown","keyboardEventMatchesKeys","stopPropagation","_activateHandler","call","_disabledChanged","iron_a11y_keys_behavior","IronSelection","[object Object]","selectCallback","selection","excludes","toggle","IronSelectableBehavior","attrForSelected","activateEvent","selectable","selectedClass","selectedAttribute","_excludedLocalNames","template","dom-bind","dom-if","dom-repeat","created","_bindFilterItem","_filterItem","bind","_observer","_observeItems","_addListener","detached","unobserveNodes","_removeListener","selectPrevious","index","undefined","_valueToIndex","selectNext","selectIndex","forceSynchronousItemUpdate","flush","_updateItems","_checkFallback","eventName","listen","unlisten","_activateEventChanged","nodes","queryDistributedElements","prototype","_setItems","_valueForItem","node","localName","propValue","case_map","toggleClass","toggleAttribute","fire","observeNodes","mutation","bubbles","cancelable","e","t","target","_itemActivate","parentNode","defaultPrevented"],"mappings":";+GAiBO,MAAAA,EAAA,CACPC,WAAA,CAKAC,MAAA,CAAYC,KAAAC,QAAAC,OAAA,EAAAC,SAAA,gBAMZC,eAAA,CACAJ,KAAAK,MACAC,QAAA,EACAJ,MAAA,WACA,WAOAK,cAAA,CACAP,KAAAK,MACAG,UAAA,EACAF,QAAA,EACAJ,MAAA,WACA,YAMAO,UAAA,4CAUAC,OAAA,SAAAR,GACAS,KAAAZ,MACAY,KAAAC,gBAAAV,GAEAS,KAAAE,SAAAX,GAIAY,aAAA,SAAAf,GACAY,KAAAI,WAAAhB,QACAY,KAAAK,mBAIAC,6BACA,aAAAN,KAAAE,UACA,MAAAF,KAAAP,gBAAAO,KAAAP,eAAAc,QAGAC,uBAAA,WACAR,KAAAZ,MAEKY,KAAAJ,eAAAI,KAAAJ,cAAAW,OAAA,IACLP,KAAAP,eACAO,KAAAJ,cACAa,IACA,SAAAC,GACA,OAAAV,KAAAW,cAAAX,KAAAY,QAAAF,KAEAV,MACAa,OAAA,SAAAC,GACA,aAAAA,GACed,OAXTe,EAAA,EAAsBP,uBAAAQ,MAAAhB,OAe5BK,gBAAA,WACAL,KAAAZ,MACAY,KAAAiB,aAAAjB,KAAAP,gBAEAO,KAAAkB,gBAAAlB,KAAAE,WAIAe,aAAA,SAAAE,GACAA,KAAA,GAEA,IAAAvB,GACAI,KAAAoB,eAAAD,IAAA,IAAAN,OAAA,SAAAQ,GACA,OAAAA,UAIArB,KAAAI,WAAAkB,MAAA1B,GAGA,QAAA2B,EAAA,EAAmBA,EAAA3B,EAAAW,OAA0BgB,IAC7CvB,KAAAI,WAAAoB,gBAAA5B,EAAA2B,IAAA,GAIAvB,KAAAyB,oBAAAzB,KAAAI,WAAAsB,MAAAnB,SACAP,KAAA2B,aAAA3B,KAAAyB,oBAEAzB,KAAAD,OAAAC,KAAAyB,qBAKAG,iBAAA,WACA,IAAAC,EAAA7B,KAAAI,WAAAsB,MACA1B,KAAAZ,OACAY,KAAA8B,kBAAAD,GACA7B,KAAA+B,iBAAAF,EAAAtB,OAAAsB,EAAA,UAEAA,SACA7B,KAAA8B,kBAAA,CAAAD,IACA7B,KAAA+B,iBAAAF,KAEA7B,KAAA8B,kBAAA,IACA9B,KAAA+B,iBAAA,QAKA9B,gBAAA,SAAAV,GACA,IAAAgC,EAAAvB,KAAAP,eAAAmB,QAAArB,GACAgC,EAAA,EAEAvB,KAAAgC,KAAA,iBAAAzC,GAEAS,KAAAiC,OAAA,iBAAAV,EAAA,IAIAH,eAAA,SAAAD,GACA,aAAAA,EAAA,KAAAA,EAAAV,IAAA,SAAAlB,GACA,OAAAS,KAAA2B,aAAApC,IACKS,QAKEkC,EACP,CAAKnB,EAAA,EAAsB7B,cCrK3BiD,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAuBO,MAAAD,EAAA,CAEPnD,WAAA,CAMAqD,YACA,CAAShD,SAAA,sBAAAK,UAAA,EAAAR,KAAAoD,QAOTC,iBAAA,CAAuBrD,KAAAsD,QAKvBC,SAAA,CACAvD,KAAAC,QACAC,OAAA,EACAC,SAAA,qBASAqD,eAAA,CACA,MACA,WACA,WACA,UACA,KACA,SACA,QACA,OACA,UACA,KACA,aACA,QACA,QACA,SACA,cAIAC,yBAAA,IAGAC,kBAAA,EAEAC,eAAA,CACAC,KAAA,QAGAnD,UAAA,kCAEAoD,UAAA,CACAC,MAAA,WACAC,QAAA,aACAC,qBAAA,uBAMAC,YAAA,CACAC,GAAA,WACAC,KAAA,aACAC,IAAA,YACAC,oBAAA,mBAGAC,SAAA,WACA3D,KAAA4D,oBAUA7D,OAAA,SAAAR,GAGAS,KAAA6D,qBACA7D,KAAA8D,YAAA9D,KAAA6D,oBACA7D,KAAA6D,mBAAA,MAEA,IAAAxC,EAAArB,KAAA2B,aAAApC,GACA8B,KAAA0C,aAAA,cAEA/D,KAAAgE,gBAAA3C,GACInC,EAA+Ba,OAAAiB,MAAAhB,KAAAiE,aAUnCL,iBAAA,WACA,IAAAM,EAAAlE,KAAAZ,MACAY,KAAAJ,eAAAI,KAAAJ,cAAA,GACAI,KAAAU,aAEAV,KAAAmE,MAAAC,QAAA,SAAA/C,GACAA,EAAAgD,aAAA,WAAAhD,IAAA6C,EAAA,UACA7C,EAAAgD,aAAA,gBAAArE,KAAAI,WAAAkE,WAAAjD,KACKrB,OASLuE,uBAAA,SAAAnF,GACAA,EACAY,KAAAqE,aAAA,+BAEArE,KAAAwE,gBAAA,yBAUAC,wBAAA,SAAAC,GAIA,QAAA1E,KAAA6C,eAAAjC,QAAA8D,EAAAC,KAAA,CAGA3E,KAAA4E,gBAAA,oBAUA,IARA,IAQAvD,EARAwD,EAAA7E,KAAA8E,aAAA,GAMAC,GAFAF,IAHAH,EAAAC,KAAA,GAAAD,EAAAC,IAAApE,OACAmE,EAAAC,IACAhC,OAAAqC,aAAAN,EAAAO,UACAC,qBAEA3E,OAEAgB,EAAA,EAAyBF,EAAArB,KAAAmE,MAAA5C,GAAsBA,IAC/C,IAAAF,EAAA0C,aAAA,aAIA,IAAAoB,EAAAnF,KAAA0C,kBAAA,cACA0C,GAAA/D,EAAA8D,IAAA9D,EAAAgE,aAAAF,IAAA,IAAAG,OAEA,KAAAF,EAAA7E,OAAAwE,IAIAK,EAAAG,MAAA,EAAAR,GAAAG,qBAAAL,EAAA,CACA7E,KAAAgE,gBAAA3C,GACA,OAIArB,KAAA8E,YAAAD,EACA7E,KAAAwF,SACA,mBACAxF,KAAAyF,iBACAzF,KAAA8C,4BAGA2C,iBAAA,WACAzF,KAAA8E,YAAA,IAQAY,eAAA,WAIA,IAHA,IAAAnF,EAAAP,KAAAmE,MAAA5D,OACAoF,EAAAC,OAAA5F,KAAAY,QAAAZ,KAAAwC,cAEAjB,EAAA,EAAmBA,EAAAhB,EAAA,EAAgBgB,IAAA,CACnC,IAAAF,EAAArB,KAAAmE,OAAAwB,EAAApE,EAAAhB,MACA,IAAAc,EAAA0C,aAAA,aACA,IAAA8B,EAAoBpD,OAAAqD,EAAA,EAAArD,CAAGpB,GAAA0E,gBAAAC,SAKvB,GAJAhG,KAAAgE,gBAAA3C,GAIYoB,OAAAqD,EAAA,EAAArD,CAAGoD,GAAAI,eAAA5E,EACf,UAWA6E,WAAA,WAIA,IAHA,IAAA3F,EAAAP,KAAAmE,MAAA5D,OACAoF,EAAAC,OAAA5F,KAAAY,QAAAZ,KAAAwC,cAEAjB,EAAA,EAAmBA,EAAAhB,EAAA,EAAgBgB,IAAA,CACnC,IAAAF,EAAArB,KAAAmE,OAAAwB,EAAApE,GAAAhB,GACA,IAAAc,EAAA0C,aAAA,aACA,IAAA8B,EAAoBpD,OAAAqD,EAAA,EAAArD,CAAGpB,GAAA0E,gBAAAC,SAKvB,GAJAhG,KAAAgE,gBAAA3C,GAIYoB,OAAAqD,EAAA,EAAArD,CAAGoD,GAAAI,eAAA5E,EACf,UAcA8E,gBAAA,SAAA9E,EAAAiD,GACAA,EACAjD,EAAAgD,aAAA,wBAEAhD,EAAAgD,aAAA,yBAEItD,EAAA,EAAsBoF,gBAAAnF,MAAAhB,KAAAiE,YAW1BmC,oBAAA,SAAA5D,EAAA6D,GACAA,KAAAhC,aAAA,kBACA7B,KAAAuB,aAAA,aACA/D,KAAA4C,WACAJ,EAAA6B,aAAA,gBACA7B,EAAAW,UAWAmD,oBAAA,SAAA5B,GACAA,EAAA6B,OAAAC,WAAAjG,QACAP,KAAA4D,oBASA6C,gBAAA,SAAA/B,GACA,IAAAgC,EAAA1G,KAAAqF,aAAA,YAEA/C,EAAAqE,kBAAA,EAEA3G,KAAAgE,gBAAA,MAEAhE,KAAAqE,aAAA,iBAEArE,KAAA4G,MAAA,WACA5G,KAAAqE,aAAA,WAAAqC,GACApE,EAAAqE,kBAAA,GAEK,IAQLE,SAAA,SAAAnC,GACA,IAAApC,EAAAqE,iBAAA,CAOA,IAAAG,EACqCrE,OAAAqD,EAAA,EAAArD,CAAGiC,GAAA,YACxCoC,IAAA9G,WAAA,IAAA8G,EAAAC,UACA/G,KAAAgH,kBAAAF,MAKA9G,KAAA6D,mBAAA7D,KAAA4G,MAAA,WAGA,IAAA1C,EAAAlE,KAAAZ,MACAY,KAAAJ,eAAAI,KAAAJ,cAAA,GACAI,KAAAU,aAEAV,KAAAgE,gBAAA,MAEAE,EACAlE,KAAAgE,gBAAAE,GACOlE,KAAAmE,MAAA,IAEPnE,KAAAkG,kBAUAe,SAAA,SAAAvC,GAEA1E,KAAA0F,iBACAhB,EAAA6B,OAAAW,cAAAC,kBAQAC,WAAA,SAAA1C,GACA1E,KAAAkG,aACAxB,EAAA6B,OAAAW,cAAAC,kBAQAE,UAAA,SAAA3C,GACA,IAAAlC,EAAAxC,KAAAwC,YACAA,GACAA,EAAA8E,QASAC,WAAA,SAAA7C,GACA1E,KAAAwH,yBAAA9C,EAAA,gBAEA1E,KAAAyE,wBAAAC,GAEAA,EAAA+C,mBAIAC,iBAAA,SAAAhD,GACI3D,EAAA,EAAsB2G,iBAAAC,KAAA3H,KAAA0E,GAC1BA,EAAA+C,mBAOAG,iBAAA,SAAAhF,GACAA,GACA5C,KAAA+C,kBACA/C,KAAA+D,aAAA,YAAA/D,KAAA+G,SAAA,EACA/G,KAAAwE,gBACA,aACKxE,KAAA+D,aAAA,aACL/D,KAAAqE,aAAA,WAAArE,KAAA+C,oBAKA4D,kBAAA,GAGOpE,EACP,CAAKL,EAA6B2F,EAAA,EAAoBvF,4DC1a/C,MAAAwF,EAKPC,YAAAC,GACAhI,KAAAiI,UAAA,GACAjI,KAAAgI,iBAUAD,MACA,OAAA/H,KAAAZ,MAAAY,KAAAiI,UAAA1C,QAAAvF,KAAAiI,UAAA,GAQAF,MAAAG,GACAlI,KAAAiI,UAAA1C,QAAAnB,QAAA,SAAA/C,KACA6G,KAAAtH,QAAAS,GAAA,IACArB,KAAAwB,gBAAAH,GAAA,IAEKrB,MASL+H,WAAA1G,GACA,OAAArB,KAAAiI,UAAArH,QAAAS,IAAA,EASA0G,gBAAA1G,EAAAiD,GACA,SAAAjD,GACAiD,IAAAtE,KAAAsE,WAAAjD,GAAA,CAGA,GAAAiD,EACAtE,KAAAiI,UAAAjG,KAAAX,OACS,CACT,IAAAE,EAAAvB,KAAAiI,UAAArH,QAAAS,GACAE,GAAA,GACAvB,KAAAiI,UAAAhG,OAAAV,EAAA,GAGAvB,KAAAgI,gBACAhI,KAAAgI,eAAA3G,EAAAiD,IAaAyD,OAAA1G,GACArB,KAAAZ,MACAY,KAAAmI,OAAA9G,GACKrB,KAAA0B,QAAAL,IACLrB,KAAAwB,gBAAAxB,KAAA0B,OAAA,GACA1B,KAAAwB,gBAAAH,GAAA,IASA0G,OAAA1G,GACArB,KAAAwB,gBAAAH,GAAArB,KAAAsE,WAAAjD,KCxGAc,EAAAC,EAAAC,EAAA,sBAAA+F,IAoBO,MAAAA,EAAA,CA8BPjJ,WAAA,CAYAkJ,gBAAA,CAAsBhJ,KAAAsD,OAAApD,MAAA,MAOtBW,SAAA,CAAeb,KAAAsD,OAAAhD,QAAA,GAOfe,aAAA,CAAmBrB,KAAAoD,OAAA5C,UAAA,EAAAF,QAAA,GAOnB2I,cACA,CAASjJ,KAAAsD,OAAApD,MAAA,MAAAC,SAAA,yBAMT+I,WAAA5F,OAKA6F,cAAA,CAAoBnJ,KAAAsD,OAAApD,MAAA,iBAKpBkJ,kBAAA,CAAwBpJ,KAAAsD,OAAApD,MAAA,MAMxBkC,kBAAA,CAAwBpC,KAAAsD,OAAApD,MAAA,MAKxB4E,MAAA,CACA9E,KAAAK,MACAG,UAAA,EACAF,QAAA,EACAJ,MAAA,WACA,WAUAmJ,oBAAA,CACArJ,KAAAoD,OACAlD,MAAA,WACA,OACAoJ,SAAA,EACAC,WAAA,EACAC,SAAA,EACAC,aAAA,MAMAhJ,UAAA,CACA,0CACA,4BACA,qCAGAiJ,QAAA,WACA/I,KAAAgJ,gBAAAhJ,KAAAiJ,YAAAC,KAAAlJ,MACAA,KAAAI,WAAA,IAA0B0H,EAAa9H,KAAAmG,gBAAA+C,KAAAlJ,QAGvC2D,SAAA,WACA3D,KAAAmJ,UAAAnJ,KAAAoJ,cAAApJ,MACAA,KAAAqJ,aAAArJ,KAAAsI,gBAGAgB,SAAA,WACAtJ,KAAAmJ,WACM1G,OAAAqD,EAAA,EAAArD,CAAGzC,MAAAuJ,eAAAvJ,KAAAmJ,WAETnJ,KAAAwJ,gBAAAxJ,KAAAsI,gBAUA1H,QAAA,SAAAS,GACA,OAAArB,KAAAmE,MAAAnE,KAAAmE,MAAAvD,QAAAS,IAAA,GASAtB,OAAA,SAAAR,GACAS,KAAAE,SAAAX,GAQAkK,eAAA,WACA,IAAAlJ,EAAAP,KAAAmE,MAAA5D,OACAmJ,EAAAnJ,EAAA,OACAoJ,IAAA3J,KAAAE,WACAwJ,GAAA9D,OAAA5F,KAAA4J,cAAA5J,KAAAE,WAAA,EAAAK,MAEAP,KAAAE,SAAAF,KAAAW,cAAA+I,IAQAG,WAAA,WACA,IAAAH,EAAA,OACAC,IAAA3J,KAAAE,WACAwJ,GACA9D,OAAA5F,KAAA4J,cAAA5J,KAAAE,WAAA,GAAAF,KAAAmE,MAAA5D,QAEAP,KAAAE,SAAAF,KAAAW,cAAA+I,IAQAI,YAAA,SAAAJ,GACA1J,KAAAD,OAAAC,KAAAW,cAAA+I,KAeAK,2BAAA,WACA/J,KAAAmJ,WAAA,mBAAAnJ,KAAAmJ,UAAAa,MAOAhK,KAAAmJ,UAAAa,QAEAhK,KAAAiK,gBAKA3J,6BACA,aAAAN,KAAAE,UAGAgK,eAAA,WACAlK,KAAAK,mBAGAgJ,aAAA,SAAAc,GACAnK,KAAAoK,OAAApK,KAAAmK,EAAA,qBAGAX,gBAAA,SAAAW,GACAnK,KAAAqK,SAAArK,KAAAmK,EAAA,qBAGAG,sBAAA,SAAAH,EAAA9D,GACArG,KAAAwJ,gBAAAnD,GACArG,KAAAqJ,aAAAc,IAGAF,aAAA,WACA,IAAAM,EAAgB9H,OAAAqD,EAAA,EAAArD,CAAGzC,MAAAwK,yBAAAxK,KAAAuI,YAAA,KACnBgC,EAAA7K,MAAA+K,UAAA5J,OAAA8G,KAAA4C,EAAAvK,KAAAgJ,iBACAhJ,KAAA0K,UAAAH,IAGA/J,uBAAA,WACAR,KAAAU,eACAV,KAAAE,SAAAF,KAAA2K,cAAA3K,KAAAU,gBAIAL,gBAAA,WACAL,KAAAkB,gBAAAlB,KAAAE,WAGAgB,gBAAA,SAAAhB,GACA,GAAAF,KAAAmE,MAAA,CAIA,IAAA9C,EAAArB,KAAA2B,aAAA3B,KAAAE,UACAmB,EACArB,KAAAI,WAAAL,OAAAsB,GAEArB,KAAAI,WAAAkB,QAIAtB,KAAAyB,mBAAAzB,KAAAmE,MAAA5D,aACAoJ,IAAA3J,KAAAI,WAAAsB,QACA1B,KAAAE,SAAAF,KAAAyB,qBAIAwH,YAAA,SAAA2B,GACA,OAAA5K,KAAA0I,oBAAAkC,EAAAC,YAGAlJ,aAAA,SAAApC,GACA,aAAAA,EAAA,KAAAS,KAAAmE,MAAAnE,KAAA4J,cAAArK,KAGAqK,cAAA,SAAArK,GACA,IAAAS,KAAAqI,gBAOA,OAAAzC,OAAArG,GANA,QAAA8B,EAAAE,EAAA,EAA2BF,EAAArB,KAAAmE,MAAA5C,GAAsBA,IACjD,GAAAvB,KAAA2K,cAAAtJ,IAAA9B,EACA,OAAAgC,GAQAZ,cAAA,SAAA+I,GACA,IAAA1J,KAAAqI,gBAMA,OAAAqB,EALA,IAAArI,EAAArB,KAAAmE,MAAAuF,GACA,OAAArI,EACArB,KAAA2K,cAAAtJ,QADA,GAQAsJ,cAAA,SAAAtJ,GACA,IAAAA,EACA,YAEA,IAAArB,KAAAqI,gBAAA,CACA,IAAA9G,EAAAvB,KAAAY,QAAAS,GACA,WAAAE,EAAA,KAAAA,EAEA,IAAAuJ,EAAAzJ,EAAyBoB,OAAAsI,EAAA,EAAAtI,CAAezC,KAAAqI,kBACxC,OAAAsB,MAAAmB,IACAzJ,EAAAgE,aAAArF,KAAAqI,kBAGAlC,gBAAA,SAAA9E,EAAAiD,GACAtE,KAAAwI,eACAxI,KAAAgL,YAAAhL,KAAAwI,cAAAlE,EAAAjD,GAEArB,KAAAyI,mBACAzI,KAAAiL,gBAAAjL,KAAAyI,kBAAAnE,EAAAjD,GAEArB,KAAA4B,mBACA5B,KAAAkL,KAAA,SAAA5G,EAAA,sBAA+DjD,UAG/DO,iBAAA,WACA5B,KAAA+B,iBAAA/B,KAAAI,WAAAsB,QAIA0H,cAAA,SAAAwB,GACA,OAAWnI,OAAAqD,EAAA,EAAArD,CAAGmI,GAAAO,aAAA,SAAAC,GACdpL,KAAAiK,eACAjK,KAAAK,kBAIAL,KAAAkL,KACA,qBAAAE,EAAA,CAA2CC,SAAA,EAAAC,YAAA,OAI3C5D,iBAAA,SAAA6D,GAGA,IAFA,IAAAC,EAAAD,EAAAE,OACAtH,EAAAnE,KAAAmE,MACAqH,MAAAxL,MAAA,CACA,IAAAuB,EAAA4C,EAAAvD,QAAA4K,GACA,GAAAjK,GAAA,GACA,IAAAhC,EAAAS,KAAAW,cAAAY,GAEA,YADAvB,KAAA0L,cAAAnM,EAAAiM,GAGAA,IAAAG,aAIAD,cAAA,SAAAnM,EAAA8B,GACArB,KAAAkL,KAAA,iBAAqChL,SAAAX,EAAA8B,QAA4B,CACjEiK,YAAA,IAEAM,kBACA5L,KAAAD,OAAAR","file":"chunk.91e6ec7495eaefd9a83c.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronSelectableBehavior} from './iron-selectable.js';\n\n/**\n * @polymerBehavior IronMultiSelectableBehavior\n */\nexport const IronMultiSelectableBehaviorImpl = {\n  properties: {\n\n    /**\n     * If true, multiple selections are allowed.\n     */\n    multi: {type: Boolean, value: false, observer: 'multiChanged'},\n\n    /**\n     * Gets or sets the selected elements. This is used instead of `selected`\n     * when `multi` is true.\n     */\n    selectedValues: {\n      type: Array,\n      notify: true,\n      value: function() {\n        return [];\n      }\n    },\n\n    /**\n     * Returns an array of currently selected items.\n     */\n    selectedItems: {\n      type: Array,\n      readOnly: true,\n      notify: true,\n      value: function() {\n        return [];\n      }\n    },\n\n  },\n\n  observers: ['_updateSelected(selectedValues.splices)'],\n\n  /**\n   * Selects the given value. If the `multi` property is true, then the selected\n   * state of the `value` will be toggled; otherwise the `value` will be\n   * selected.\n   *\n   * @method select\n   * @param {string|number} value the value to select.\n   */\n  select: function(value) {\n    if (this.multi) {\n      this._toggleSelected(value);\n    } else {\n      this.selected = value;\n    }\n  },\n\n  multiChanged: function(multi) {\n    this._selection.multi = multi;\n    this._updateSelected();\n  },\n\n  // UNUSED, FOR API COMPATIBILITY\n  get _shouldUpdateSelection() {\n    return this.selected != null ||\n        (this.selectedValues != null && this.selectedValues.length);\n  },\n\n  _updateAttrForSelected: function() {\n    if (!this.multi) {\n      IronSelectableBehavior._updateAttrForSelected.apply(this);\n    } else if (this.selectedItems && this.selectedItems.length > 0) {\n      this.selectedValues =\n          this.selectedItems\n              .map(\n                  function(selectedItem) {\n                    return this._indexToValue(this.indexOf(selectedItem));\n                  },\n                  this)\n              .filter(function(unfilteredValue) {\n                return unfilteredValue != null;\n              }, this);\n    }\n  },\n\n  _updateSelected: function() {\n    if (this.multi) {\n      this._selectMulti(this.selectedValues);\n    } else {\n      this._selectSelected(this.selected);\n    }\n  },\n\n  _selectMulti: function(values) {\n    values = values || [];\n\n    var selectedItems =\n        (this._valuesToItems(values) || []).filter(function(item) {\n          return item !== null && item !== undefined;\n        });\n\n    // clear all but the current selected items\n    this._selection.clear(selectedItems);\n\n    // select only those not selected yet\n    for (var i = 0; i < selectedItems.length; i++) {\n      this._selection.setItemSelected(selectedItems[i], true);\n    }\n\n    // Check for items, since this array is populated only when attached\n    if (this.fallbackSelection && !this._selection.get().length) {\n      var fallback = this._valueToItem(this.fallbackSelection);\n      if (fallback) {\n        this.select(this.fallbackSelection);\n      }\n    }\n  },\n\n  _selectionChange: function() {\n    var s = this._selection.get();\n    if (this.multi) {\n      this._setSelectedItems(s);\n      this._setSelectedItem(s.length ? s[0] : null);\n    } else {\n      if (s !== null && s !== undefined) {\n        this._setSelectedItems([s]);\n        this._setSelectedItem(s);\n      } else {\n        this._setSelectedItems([]);\n        this._setSelectedItem(null);\n      }\n    }\n  },\n\n  _toggleSelected: function(value) {\n    var i = this.selectedValues.indexOf(value);\n    var unselected = i < 0;\n    if (unselected) {\n      this.push('selectedValues', value);\n    } else {\n      this.splice('selectedValues', i, 1);\n    }\n  },\n\n  _valuesToItems: function(values) {\n    return (values == null) ? null : values.map(function(value) {\n      return this._valueToItem(value);\n    }, this);\n  }\n};\n\n/** @polymerBehavior */\nexport const IronMultiSelectableBehavior =\n    [IronSelectableBehavior, IronMultiSelectableBehaviorImpl];\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronA11yKeysBehavior} from '@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js';\nimport {IronMultiSelectableBehavior, IronMultiSelectableBehaviorImpl} from '@polymer/iron-selector/iron-multi-selectable.js';\nimport {IronSelectableBehavior} from '@polymer/iron-selector/iron-selectable.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\n\n/**\n * `IronMenuBehavior` implements accessible menu behavior.\n *\n * @demo demo/index.html\n * @polymerBehavior IronMenuBehavior\n */\nexport const IronMenuBehaviorImpl = {\n\n  properties: {\n\n    /**\n     * Returns the currently focused item.\n     * @type {?Object}\n     */\n    focusedItem:\n        {observer: '_focusedItemChanged', readOnly: true, type: Object},\n\n    /**\n     * The attribute to use on menu items to look up the item title. Typing the\n     * first letter of an item when the menu is open focuses that item. If\n     * unset, `textContent` will be used.\n     */\n    attrForItemTitle: {type: String},\n\n    /**\n     * @type {boolean}\n     */\n    disabled: {\n      type: Boolean,\n      value: false,\n      observer: '_disabledChanged',\n    },\n  },\n\n  /**\n   * The list of keys has been taken from\n   * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState\n   * @private\n   */\n  _MODIFIER_KEYS: [\n    'Alt',\n    'AltGraph',\n    'CapsLock',\n    'Control',\n    'Fn',\n    'FnLock',\n    'Hyper',\n    'Meta',\n    'NumLock',\n    'OS',\n    'ScrollLock',\n    'Shift',\n    'Super',\n    'Symbol',\n    'SymbolLock'\n  ],\n\n  /** @private */\n  _SEARCH_RESET_TIMEOUT_MS: 1000,\n\n  /** @private */\n  _previousTabIndex: 0,\n\n  hostAttributes: {\n    'role': 'menu',\n  },\n\n  observers: ['_updateMultiselectable(multi)'],\n\n  listeners: {\n    'focus': '_onFocus',\n    'keydown': '_onKeydown',\n    'iron-items-changed': '_onIronItemsChanged'\n  },\n\n  /**\n   * @type {!Object}\n   */\n  keyBindings: {\n    'up': '_onUpKey',\n    'down': '_onDownKey',\n    'esc': '_onEscKey',\n    'shift+tab:keydown': '_onShiftTabDown'\n  },\n\n  attached: function() {\n    this._resetTabindices();\n  },\n\n  /**\n   * Selects the given value. If the `multi` property is true, then the selected\n   * state of the `value` will be toggled; otherwise the `value` will be\n   * selected.\n   *\n   * @param {string|number} value the value to select.\n   */\n  select: function(value) {\n    // Cancel automatically focusing a default item if the menu received focus\n    // through a user action selecting a particular item.\n    if (this._defaultFocusAsync) {\n      this.cancelAsync(this._defaultFocusAsync);\n      this._defaultFocusAsync = null;\n    }\n    var item = this._valueToItem(value);\n    if (item && item.hasAttribute('disabled'))\n      return;\n    this._setFocusedItem(item);\n    IronMultiSelectableBehaviorImpl.select.apply(this, arguments);\n  },\n\n  /**\n   * Resets all tabindex attributes to the appropriate value based on the\n   * current selection state. The appropriate value is `0` (focusable) for\n   * the default selected item, and `-1` (not keyboard focusable) for all\n   * other items. Also sets the correct initial values for aria-selected\n   * attribute, true for default selected item and false for others.\n   */\n  _resetTabindices: function() {\n    var firstSelectedItem = this.multi ?\n        (this.selectedItems && this.selectedItems[0]) :\n        this.selectedItem;\n\n    this.items.forEach(function(item) {\n      item.setAttribute('tabindex', item === firstSelectedItem ? '0' : '-1');\n      item.setAttribute('aria-selected', this._selection.isSelected(item));\n    }, this);\n  },\n\n  /**\n   * Sets appropriate ARIA based on whether or not the menu is meant to be\n   * multi-selectable.\n   *\n   * @param {boolean} multi True if the menu should be multi-selectable.\n   */\n  _updateMultiselectable: function(multi) {\n    if (multi) {\n      this.setAttribute('aria-multiselectable', 'true');\n    } else {\n      this.removeAttribute('aria-multiselectable');\n    }\n  },\n\n  /**\n   * Given a KeyboardEvent, this method will focus the appropriate item in the\n   * menu (if there is a relevant item, and it is possible to focus it).\n   *\n   * @param {KeyboardEvent} event A KeyboardEvent.\n   */\n  _focusWithKeyboardEvent: function(event) {\n    // Make sure that the key pressed is not a modifier key.\n    // getModifierState is not being used, as it is not available in Safari\n    // earlier than 10.0.2 (https://trac.webkit.org/changeset/206725/webkit)\n    if (this._MODIFIER_KEYS.indexOf(event.key) !== -1)\n      return;\n\n    this.cancelDebouncer('_clearSearchText');\n\n    var searchText = this._searchText || '';\n    var key = event.key && event.key.length == 1 ?\n        event.key :\n        String.fromCharCode(event.keyCode);\n    searchText += key.toLocaleLowerCase();\n\n    var searchLength = searchText.length;\n\n    for (var i = 0, item; item = this.items[i]; i++) {\n      if (item.hasAttribute('disabled')) {\n        continue;\n      }\n\n      var attr = this.attrForItemTitle || 'textContent';\n      var title = (item[attr] || item.getAttribute(attr) || '').trim();\n\n      if (title.length < searchLength) {\n        continue;\n      }\n\n      if (title.slice(0, searchLength).toLocaleLowerCase() == searchText) {\n        this._setFocusedItem(item);\n        break;\n      }\n    }\n\n    this._searchText = searchText;\n    this.debounce(\n        '_clearSearchText',\n        this._clearSearchText,\n        this._SEARCH_RESET_TIMEOUT_MS);\n  },\n\n  _clearSearchText: function() {\n    this._searchText = '';\n  },\n\n  /**\n   * Focuses the previous item (relative to the currently focused item) in the\n   * menu, disabled items will be skipped.\n   * Loop until length + 1 to handle case of single item in menu.\n   */\n  _focusPrevious: function() {\n    var length = this.items.length;\n    var curFocusIndex = Number(this.indexOf(this.focusedItem));\n\n    for (var i = 1; i < length + 1; i++) {\n      var item = this.items[(curFocusIndex - i + length) % length];\n      if (!item.hasAttribute('disabled')) {\n        var owner = dom(item).getOwnerRoot() || document;\n        this._setFocusedItem(item);\n\n        // Focus might not have worked, if the element was hidden or not\n        // focusable. In that case, try again.\n        if (dom(owner).activeElement == item) {\n          return;\n        }\n      }\n    }\n  },\n\n  /**\n   * Focuses the next item (relative to the currently focused item) in the\n   * menu, disabled items will be skipped.\n   * Loop until length + 1 to handle case of single item in menu.\n   */\n  _focusNext: function() {\n    var length = this.items.length;\n    var curFocusIndex = Number(this.indexOf(this.focusedItem));\n\n    for (var i = 1; i < length + 1; i++) {\n      var item = this.items[(curFocusIndex + i) % length];\n      if (!item.hasAttribute('disabled')) {\n        var owner = dom(item).getOwnerRoot() || document;\n        this._setFocusedItem(item);\n\n        // Focus might not have worked, if the element was hidden or not\n        // focusable. In that case, try again.\n        if (dom(owner).activeElement == item) {\n          return;\n        }\n      }\n    }\n  },\n\n  /**\n   * Mutates items in the menu based on provided selection details, so that\n   * all items correctly reflect selection state.\n   *\n   * @param {Element} item An item in the menu.\n   * @param {boolean} isSelected True if the item should be shown in a\n   * selected state, otherwise false.\n   */\n  _applySelection: function(item, isSelected) {\n    if (isSelected) {\n      item.setAttribute('aria-selected', 'true');\n    } else {\n      item.setAttribute('aria-selected', 'false');\n    }\n    IronSelectableBehavior._applySelection.apply(this, arguments);\n  },\n\n  /**\n   * Discretely updates tabindex values among menu items as the focused item\n   * changes.\n   *\n   * @param {Element} focusedItem The element that is currently focused.\n   * @param {?Element} old The last element that was considered focused, if\n   * applicable.\n   */\n  _focusedItemChanged: function(focusedItem, old) {\n    old && old.setAttribute('tabindex', '-1');\n    if (focusedItem && !focusedItem.hasAttribute('disabled') &&\n        !this.disabled) {\n      focusedItem.setAttribute('tabindex', '0');\n      focusedItem.focus();\n    }\n  },\n\n  /**\n   * A handler that responds to mutation changes related to the list of items\n   * in the menu.\n   *\n   * @param {CustomEvent} event An event containing mutation records as its\n   * detail.\n   */\n  _onIronItemsChanged: function(event) {\n    if (event.detail.addedNodes.length) {\n      this._resetTabindices();\n    }\n  },\n\n  /**\n   * Handler that is called when a shift+tab keypress is detected by the menu.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onShiftTabDown: function(event) {\n    var oldTabIndex = this.getAttribute('tabindex');\n\n    IronMenuBehaviorImpl._shiftTabPressed = true;\n\n    this._setFocusedItem(null);\n\n    this.setAttribute('tabindex', '-1');\n\n    this.async(function() {\n      this.setAttribute('tabindex', oldTabIndex);\n      IronMenuBehaviorImpl._shiftTabPressed = false;\n      // NOTE(cdata): polymer/polymer#1305\n    }, 1);\n  },\n\n  /**\n   * Handler that is called when the menu receives focus.\n   *\n   * @param {FocusEvent} event A focus event.\n   */\n  _onFocus: function(event) {\n    if (IronMenuBehaviorImpl._shiftTabPressed) {\n      // do not focus the menu itself\n      return;\n    }\n\n    // Do not focus the selected tab if the deepest target is part of the\n    // menu element's local DOM and is focusable.\n    var rootTarget =\n        /** @type {?HTMLElement} */ (dom(event).rootTarget);\n    if (rootTarget !== this && typeof rootTarget.tabIndex !== 'undefined' &&\n        !this.isLightDescendant(rootTarget)) {\n      return;\n    }\n\n    // clear the cached focus item\n    this._defaultFocusAsync = this.async(function() {\n      // focus the selected item when the menu receives focus, or the first item\n      // if no item is selected\n      var firstSelectedItem = this.multi ?\n          (this.selectedItems && this.selectedItems[0]) :\n          this.selectedItem;\n\n      this._setFocusedItem(null);\n\n      if (firstSelectedItem) {\n        this._setFocusedItem(firstSelectedItem);\n      } else if (this.items[0]) {\n        // We find the first none-disabled item (if one exists)\n        this._focusNext();\n      }\n    });\n  },\n\n  /**\n   * Handler that is called when the up key is pressed.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onUpKey: function(event) {\n    // up and down arrows moves the focus\n    this._focusPrevious();\n    event.detail.keyboardEvent.preventDefault();\n  },\n\n  /**\n   * Handler that is called when the down key is pressed.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onDownKey: function(event) {\n    this._focusNext();\n    event.detail.keyboardEvent.preventDefault();\n  },\n\n  /**\n   * Handler that is called when the esc key is pressed.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onEscKey: function(event) {\n    var focusedItem = this.focusedItem;\n    if (focusedItem) {\n      focusedItem.blur();\n    }\n  },\n\n  /**\n   * Handler that is called when a keydown event is detected.\n   *\n   * @param {KeyboardEvent} event A keyboard event.\n   */\n  _onKeydown: function(event) {\n    if (!this.keyboardEventMatchesKeys(event, 'up down esc')) {\n      // all other keys focus the menu item starting with that character\n      this._focusWithKeyboardEvent(event);\n    }\n    event.stopPropagation();\n  },\n\n  // override _activateHandler\n  _activateHandler: function(event) {\n    IronSelectableBehavior._activateHandler.call(this, event);\n    event.stopPropagation();\n  },\n\n  /**\n   * Updates this element's tab index when it's enabled/disabled.\n   * @param {boolean} disabled\n   */\n  _disabledChanged: function(disabled) {\n    if (disabled) {\n      this._previousTabIndex =\n          this.hasAttribute('tabindex') ? this.tabIndex : 0;\n      this.removeAttribute(\n          'tabindex');  // No tabindex means not tab-able or select-able.\n    } else if (!this.hasAttribute('tabindex')) {\n      this.setAttribute('tabindex', this._previousTabIndex);\n    }\n  }\n};\n\nIronMenuBehaviorImpl._shiftTabPressed = false;\n\n/** @polymerBehavior */\nexport const IronMenuBehavior =\n    [IronMultiSelectableBehavior, IronA11yKeysBehavior, IronMenuBehaviorImpl];\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nexport class IronSelection {\n  /**\n   * @param {!Function} selectCallback\n   * @suppress {missingProvide}\n   */\n  constructor(selectCallback) {\n    this.selection = [];\n    this.selectCallback = selectCallback;\n  }\n\n  /**\n   * Retrieves the selected item(s).\n   *\n   * @returns Returns the selected item(s). If the multi property is true,\n   * `get` will return an array, otherwise it will return\n   * the selected item or undefined if there is no selection.\n   */\n  get() {\n    return this.multi ? this.selection.slice() : this.selection[0];\n  }\n\n  /**\n   * Clears all the selection except the ones indicated.\n   *\n   * @param {Array} excludes items to be excluded.\n   */\n  clear(excludes) {\n    this.selection.slice().forEach(function(item) {\n      if (!excludes || excludes.indexOf(item) < 0) {\n        this.setItemSelected(item, false);\n      }\n    }, this);\n  }\n\n  /**\n   * Indicates if a given item is selected.\n   *\n   * @param {*} item The item whose selection state should be checked.\n   * @return {boolean} Returns true if `item` is selected.\n   */\n  isSelected(item) {\n    return this.selection.indexOf(item) >= 0;\n  }\n\n  /**\n   * Sets the selection state for a given item to either selected or deselected.\n   *\n   * @param {*} item The item to select.\n   * @param {boolean} isSelected True for selected, false for deselected.\n   */\n  setItemSelected(item, isSelected) {\n    if (item != null) {\n      if (isSelected !== this.isSelected(item)) {\n        // proceed to update selection only if requested state differs from\n        // current\n        if (isSelected) {\n          this.selection.push(item);\n        } else {\n          var i = this.selection.indexOf(item);\n          if (i >= 0) {\n            this.selection.splice(i, 1);\n          }\n        }\n        if (this.selectCallback) {\n          this.selectCallback(item, isSelected);\n        }\n      }\n    }\n  }\n\n  /**\n   * Sets the selection state for a given item. If the `multi` property\n   * is true, then the selected state of `item` will be toggled; otherwise\n   * the `item` will be selected.\n   *\n   * @param {*} item The item to select.\n   */\n  select(item) {\n    if (this.multi) {\n      this.toggle(item);\n    } else if (this.get() !== item) {\n      this.setItemSelected(this.get(), false);\n      this.setItemSelected(item, true);\n    }\n  }\n\n  /**\n   * Toggles the selection state for `item`.\n   *\n   * @param {*} item The item to toggle.\n   */\n  toggle(item) {\n    this.setItemSelected(item, !this.isSelected(item));\n  }\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {dashToCamelCase} from '@polymer/polymer/lib/utils/case-map.js';\n\nimport {IronSelection} from './iron-selection.js';\n\n/**\n * @polymerBehavior\n */\nexport const IronSelectableBehavior = {\n\n  /**\n   * Fired when iron-selector is activated (selected or deselected).\n   * It is fired before the selected items are changed.\n   * Cancel the event to abort selection.\n   *\n   * @event iron-activate\n   */\n\n  /**\n   * Fired when an item is selected\n   *\n   * @event iron-select\n   */\n\n  /**\n   * Fired when an item is deselected\n   *\n   * @event iron-deselect\n   */\n\n  /**\n   * Fired when the list of selectable items changes (e.g., items are\n   * added or removed). The detail of the event is a mutation record that\n   * describes what changed.\n   *\n   * @event iron-items-changed\n   */\n\n  properties: {\n\n    /**\n     * If you want to use an attribute value or property of an element for\n     * `selected` instead of the index, set this to the name of the attribute\n     * or property. Hyphenated values are converted to camel case when used to\n     * look up the property of a selectable element. Camel cased values are\n     * *not* converted to hyphenated values for attribute lookup. It's\n     * recommended that you provide the hyphenated form of the name so that\n     * selection works in both cases. (Use `attr-or-property-name` instead of\n     * `attrOrPropertyName`.)\n     */\n    attrForSelected: {type: String, value: null},\n\n    /**\n     * Gets or sets the selected element. The default is to use the index of the\n     * item.\n     * @type {string|number}\n     */\n    selected: {type: String, notify: true},\n\n    /**\n     * Returns the currently selected item.\n     *\n     * @type {?Object}\n     */\n    selectedItem: {type: Object, readOnly: true, notify: true},\n\n    /**\n     * The event that fires from items when they are selected. Selectable\n     * will listen for this event from items and update the selection state.\n     * Set to empty string to listen to no events.\n     */\n    activateEvent:\n        {type: String, value: 'tap', observer: '_activateEventChanged'},\n\n    /**\n     * This is a CSS selector string.  If this is set, only items that match the\n     * CSS selector are selectable.\n     */\n    selectable: String,\n\n    /**\n     * The class to set on elements when selected.\n     */\n    selectedClass: {type: String, value: 'iron-selected'},\n\n    /**\n     * The attribute to set on elements when selected.\n     */\n    selectedAttribute: {type: String, value: null},\n\n    /**\n     * Default fallback if the selection based on selected with\n     * `attrForSelected` is not found.\n     */\n    fallbackSelection: {type: String, value: null},\n\n    /**\n     * The list of items from which a selection can be made.\n     */\n    items: {\n      type: Array,\n      readOnly: true,\n      notify: true,\n      value: function() {\n        return [];\n      }\n    },\n\n    /**\n     * The set of excluded elements where the key is the `localName`\n     * of the element that will be ignored from the item list.\n     *\n     * @default {template: 1}\n     */\n    _excludedLocalNames: {\n      type: Object,\n      value: function() {\n        return {\n          'template': 1,\n          'dom-bind': 1,\n          'dom-if': 1,\n          'dom-repeat': 1,\n        };\n      }\n    }\n  },\n\n  observers: [\n    '_updateAttrForSelected(attrForSelected)',\n    '_updateSelected(selected)',\n    '_checkFallback(fallbackSelection)'\n  ],\n\n  created: function() {\n    this._bindFilterItem = this._filterItem.bind(this);\n    this._selection = new IronSelection(this._applySelection.bind(this));\n  },\n\n  attached: function() {\n    this._observer = this._observeItems(this);\n    this._addListener(this.activateEvent);\n  },\n\n  detached: function() {\n    if (this._observer) {\n      dom(this).unobserveNodes(this._observer);\n    }\n    this._removeListener(this.activateEvent);\n  },\n\n  /**\n   * Returns the index of the given item.\n   *\n   * @method indexOf\n   * @param {Object} item\n   * @returns Returns the index of the item\n   */\n  indexOf: function(item) {\n    return this.items ? this.items.indexOf(item) : -1;\n  },\n\n  /**\n   * Selects the given value.\n   *\n   * @method select\n   * @param {string|number} value the value to select.\n   */\n  select: function(value) {\n    this.selected = value;\n  },\n\n  /**\n   * Selects the previous item.\n   *\n   * @method selectPrevious\n   */\n  selectPrevious: function() {\n    var length = this.items.length;\n    var index = length - 1;\n    if (this.selected !== undefined) {\n      index = (Number(this._valueToIndex(this.selected)) - 1 + length) % length;\n    }\n    this.selected = this._indexToValue(index);\n  },\n\n  /**\n   * Selects the next item.\n   *\n   * @method selectNext\n   */\n  selectNext: function() {\n    var index = 0;\n    if (this.selected !== undefined) {\n      index =\n          (Number(this._valueToIndex(this.selected)) + 1) % this.items.length;\n    }\n    this.selected = this._indexToValue(index);\n  },\n\n  /**\n   * Selects the item at the given index.\n   *\n   * @method selectIndex\n   */\n  selectIndex: function(index) {\n    this.select(this._indexToValue(index));\n  },\n\n  /**\n   * Force a synchronous update of the `items` property.\n   *\n   * NOTE: Consider listening for the `iron-items-changed` event to respond to\n   * updates to the set of selectable items after updates to the DOM list and\n   * selection state have been made.\n   *\n   * WARNING: If you are using this method, you should probably consider an\n   * alternate approach. Synchronously querying for items is potentially\n   * slow for many use cases. The `items` property will update asynchronously\n   * on its own to reflect selectable items in the DOM.\n   */\n  forceSynchronousItemUpdate: function() {\n    if (this._observer && typeof this._observer.flush === 'function') {\n      // NOTE(bicknellr): `dom.flush` above is no longer sufficient to trigger\n      // `observeNodes` callbacks. Polymer 2.x returns an object from\n      // `observeNodes` with a `flush` that synchronously gives the callback any\n      // pending MutationRecords (retrieved with `takeRecords`). Any case where\n      // ShadyDOM flushes were expected to synchronously trigger item updates\n      // will now require calling `forceSynchronousItemUpdate`.\n      this._observer.flush();\n    } else {\n      this._updateItems();\n    }\n  },\n\n  // UNUSED, FOR API COMPATIBILITY\n  get _shouldUpdateSelection() {\n    return this.selected != null;\n  },\n\n  _checkFallback: function() {\n    this._updateSelected();\n  },\n\n  _addListener: function(eventName) {\n    this.listen(this, eventName, '_activateHandler');\n  },\n\n  _removeListener: function(eventName) {\n    this.unlisten(this, eventName, '_activateHandler');\n  },\n\n  _activateEventChanged: function(eventName, old) {\n    this._removeListener(old);\n    this._addListener(eventName);\n  },\n\n  _updateItems: function() {\n    var nodes = dom(this).queryDistributedElements(this.selectable || '*');\n    nodes = Array.prototype.filter.call(nodes, this._bindFilterItem);\n    this._setItems(nodes);\n  },\n\n  _updateAttrForSelected: function() {\n    if (this.selectedItem) {\n      this.selected = this._valueForItem(this.selectedItem);\n    }\n  },\n\n  _updateSelected: function() {\n    this._selectSelected(this.selected);\n  },\n\n  _selectSelected: function(selected) {\n    if (!this.items) {\n      return;\n    }\n\n    var item = this._valueToItem(this.selected);\n    if (item) {\n      this._selection.select(item);\n    } else {\n      this._selection.clear();\n    }\n    // Check for items, since this array is populated only when attached\n    // Since Number(0) is falsy, explicitly check for undefined\n    if (this.fallbackSelection && this.items.length &&\n        (this._selection.get() === undefined)) {\n      this.selected = this.fallbackSelection;\n    }\n  },\n\n  _filterItem: function(node) {\n    return !this._excludedLocalNames[node.localName];\n  },\n\n  _valueToItem: function(value) {\n    return (value == null) ? null : this.items[this._valueToIndex(value)];\n  },\n\n  _valueToIndex: function(value) {\n    if (this.attrForSelected) {\n      for (var i = 0, item; item = this.items[i]; i++) {\n        if (this._valueForItem(item) == value) {\n          return i;\n        }\n      }\n    } else {\n      return Number(value);\n    }\n  },\n\n  _indexToValue: function(index) {\n    if (this.attrForSelected) {\n      var item = this.items[index];\n      if (item) {\n        return this._valueForItem(item);\n      }\n    } else {\n      return index;\n    }\n  },\n\n  _valueForItem: function(item) {\n    if (!item) {\n      return null;\n    }\n    if (!this.attrForSelected) {\n      var i = this.indexOf(item);\n      return i === -1 ? null : i;\n    }\n    var propValue = item[dashToCamelCase(this.attrForSelected)];\n    return propValue != undefined ? propValue :\n                                    item.getAttribute(this.attrForSelected);\n  },\n\n  _applySelection: function(item, isSelected) {\n    if (this.selectedClass) {\n      this.toggleClass(this.selectedClass, isSelected, item);\n    }\n    if (this.selectedAttribute) {\n      this.toggleAttribute(this.selectedAttribute, isSelected, item);\n    }\n    this._selectionChange();\n    this.fire('iron-' + (isSelected ? 'select' : 'deselect'), {item: item});\n  },\n\n  _selectionChange: function() {\n    this._setSelectedItem(this._selection.get());\n  },\n\n  // observe items change under the given node.\n  _observeItems: function(node) {\n    return dom(node).observeNodes(function(mutation) {\n      this._updateItems();\n      this._updateSelected();\n\n      // Let other interested parties know about the change so that\n      // we don't have to recreate mutation observers everywhere.\n      this.fire(\n          'iron-items-changed', mutation, {bubbles: false, cancelable: false});\n    });\n  },\n\n  _activateHandler: function(e) {\n    var t = e.target;\n    var items = this.items;\n    while (t && t != this) {\n      var i = items.indexOf(t);\n      if (i >= 0) {\n        var value = this._indexToValue(i);\n        this._itemActivate(value, t);\n        return;\n      }\n      t = t.parentNode;\n    }\n  },\n\n  _itemActivate: function(value, item) {\n    if (!this.fire('iron-activate', {selected: value, item: item}, {\n               cancelable: true\n             })\n             .defaultPrevented) {\n      this.select(value);\n    }\n  }\n\n};\n"],"sourceRoot":""}