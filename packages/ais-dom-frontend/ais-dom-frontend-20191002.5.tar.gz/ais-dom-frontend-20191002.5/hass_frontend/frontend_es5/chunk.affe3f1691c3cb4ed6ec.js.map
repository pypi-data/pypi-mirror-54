{"version":3,"sources":["webpack:///./src/components/dialog/ha-iron-focusables-helper.js","webpack:///./src/components/dialog/ha-paper-dialog.ts","webpack:///./src/panels/config/area_registry/dialog-area-registry-detail.ts"],"names":["HaIronFocusablesHelper","getTabbableNodes","node","result","this","_collectTabbableNodes","IronFocusablesHelper","_sortByTabIndex","nodeType","Node","ELEMENT_NODE","_isVisible","children","element","tabIndex","_normalizedTabIndex","needsSort","push","localName","dom","getDistributedNodes","shadowRoot","root","i","length","paperDialogClass","customElements","get","haTabFixBehaviorImpl","_focusableNodes","ha_paper_dialog_HaPaperDialog","_super","HaPaperDialog","Object","tslib_es6","legacy_class","define","DialogAreaDetail","tslib__WEBPACK_IMPORTED_MODULE_0__","defineProperty","_error","_name","_params","prototype","showDialog","params","undefined","entry","name","updateComplete","_a","sent","render","lit_element__WEBPACK_IMPORTED_MODULE_1__","templateObject_1","nameInvalid","trim","templateObject_6","_openedChanged","hass","localize","templateObject_2","templateObject_3","area_id","_nameChanged","templateObject_4","_deleteEntry","_submitting","templateObject_5","_updateEntry","ev","detail","value","values","updateEntry","createEntry","err_1","message","removeEntry","_resources_styles__WEBPACK_IMPORTED_MODULE_5__","templateObject_7"],"mappings":"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","file":"chunk.affe3f1691c3cb4ed6ec.js","sourcesContent":["/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/*\n  Fixes issue with not using shadow dom properly in iron-overlay-behavior/icon-focusables-helper.js\n*/\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\n\nimport { IronFocusablesHelper } from \"@polymer/iron-overlay-behavior/iron-focusables-helper.js\";\n\nexport const HaIronFocusablesHelper = {\n  /**\n   * Returns a sorted array of tabbable nodes, including the root node.\n   * It searches the tabbable nodes in the light and shadow dom of the chidren,\n   * sorting the result by tabindex.\n   * @param {!Node} node\n   * @return {!Array<!HTMLElement>}\n   */\n  getTabbableNodes: function(node) {\n    var result = [];\n    // If there is at least one element with tabindex > 0, we need to sort\n    // the final array by tabindex.\n    var needsSortByTabIndex = this._collectTabbableNodes(node, result);\n    if (needsSortByTabIndex) {\n      return IronFocusablesHelper._sortByTabIndex(result);\n    }\n    return result;\n  },\n\n  /**\n   * Searches for nodes that are tabbable and adds them to the `result` array.\n   * Returns if the `result` array needs to be sorted by tabindex.\n   * @param {!Node} node The starting point for the search; added to `result`\n   * if tabbable.\n   * @param {!Array<!HTMLElement>} result\n   * @return {boolean}\n   * @private\n   */\n  _collectTabbableNodes: function(node, result) {\n    // If not an element or not visible, no need to explore children.\n    if (\n      node.nodeType !== Node.ELEMENT_NODE ||\n      !IronFocusablesHelper._isVisible(node)\n    ) {\n      return false;\n    }\n    var element = /** @type {!HTMLElement} */ (node);\n    var tabIndex = IronFocusablesHelper._normalizedTabIndex(element);\n    var needsSort = tabIndex > 0;\n    if (tabIndex >= 0) {\n      result.push(element);\n    }\n\n    // In ShadowDOM v1, tab order is affected by the order of distrubution.\n    // E.g. getTabbableNodes(#root) in ShadowDOM v1 should return [#A, #B];\n    // in ShadowDOM v0 tab order is not affected by the distrubution order,\n    // in fact getTabbableNodes(#root) returns [#B, #A].\n    //  <div id=\"root\">\n    //   <!-- shadow -->\n    //     <slot name=\"a\">\n    //     <slot name=\"b\">\n    //   <!-- /shadow -->\n    //   <input id=\"A\" slot=\"a\">\n    //   <input id=\"B\" slot=\"b\" tabindex=\"1\">\n    //  </div>\n    // TODO(valdrin) support ShadowDOM v1 when upgrading to Polymer v2.0.\n    var children;\n    if (element.localName === \"content\" || element.localName === \"slot\") {\n      children = dom(element).getDistributedNodes();\n    } else {\n      // /////////////////////////\n      // Use shadow root if possible, will check for distributed nodes.\n      // THIS IS THE CHANGED LINE\n      children = dom(element.shadowRoot || element.root || element).children;\n      // /////////////////////////\n    }\n    for (var i = 0; i < children.length; i++) {\n      // Ensure method is always invoked to collect tabbable children.\n      needsSort = this._collectTabbableNodes(children[i], result) || needsSort;\n    }\n    return needsSort;\n  },\n};\n","import \"@polymer/paper-dialog/paper-dialog\";\nimport { mixinBehaviors } from \"@polymer/polymer/lib/legacy/class\";\nimport { HaIronFocusablesHelper } from \"./ha-iron-focusables-helper.js\";\n// tslint:disable-next-line\nimport { PaperDialogElement } from \"@polymer/paper-dialog/paper-dialog\";\n\nconst paperDialogClass = customElements.get(\"paper-dialog\");\n\n// behavior that will override existing iron-overlay-behavior and call the fixed implementation\nconst haTabFixBehaviorImpl = {\n  get _focusableNodes() {\n    return HaIronFocusablesHelper.getTabbableNodes(this);\n  },\n};\n\n// paper-dialog that uses the haTabFixBehaviorImpl behvaior\n// export class HaPaperDialog extends paperDialogClass {}\n// @ts-ignore\nexport class HaPaperDialog\n  extends mixinBehaviors([haTabFixBehaviorImpl], paperDialogClass)\n  implements PaperDialogElement {}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-paper-dialog\": HaPaperDialog;\n  }\n}\ncustomElements.define(\"ha-paper-dialog\", HaPaperDialog);\n","import {\n  LitElement,\n  html,\n  css,\n  PropertyDeclarations,\n  CSSResult,\n  TemplateResult,\n} from \"lit-element\";\nimport \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable\";\nimport \"@polymer/paper-input/paper-input\";\n\nimport \"../../../components/dialog/ha-paper-dialog\";\nimport { AreaRegistryDetailDialogParams } from \"./show-dialog-area-registry-detail\";\nimport { PolymerChangedEvent } from \"../../../polymer-types\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { AreaRegistryEntryMutableParams } from \"../../../data/area_registry\";\n\nclass DialogAreaDetail extends LitElement {\n  public hass!: HomeAssistant;\n  private _name!: string;\n  private _error?: string;\n  private _params?: AreaRegistryDetailDialogParams;\n  private _submitting?: boolean;\n\n  static get properties(): PropertyDeclarations {\n    return {\n      _error: {},\n      _name: {},\n      _params: {},\n    };\n  }\n\n  public async showDialog(\n    params: AreaRegistryDetailDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    this._name = this._params.entry ? this._params.entry.name : \"\";\n    await this.updateComplete;\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this._params) {\n      return html``;\n    }\n    const entry = this._params.entry;\n    const nameInvalid = this._name.trim() === \"\";\n    return html`\n      <ha-paper-dialog\n        with-backdrop\n        opened\n        @opened-changed=\"${this._openedChanged}\"\n      >\n        <h2>\n          ${entry\n            ? entry.name\n            : this.hass.localize(\n                \"ui.panel.config.area_registry.editor.default_name\"\n              )}\n        </h2>\n        <paper-dialog-scrollable>\n          ${this._error\n            ? html`\n                <div class=\"error\">${this._error}</div>\n              `\n            : \"\"}\n          <div class=\"form\">\n            ${entry\n              ? html`\n                  <div>Area ID: ${entry.area_id}</div>\n                `\n              : \"\"}\n\n            <paper-input\n              .value=${this._name}\n              @value-changed=${this._nameChanged}\n              label=\"Name\"\n              error-message=\"Name is required\"\n              .invalid=${nameInvalid}\n            ></paper-input>\n          </div>\n        </paper-dialog-scrollable>\n        <div class=\"paper-dialog-buttons\">\n          ${entry\n            ? html`\n                <mwc-button\n                  class=\"warning\"\n                  @click=\"${this._deleteEntry}\"\n                  .disabled=${this._submitting}\n                >\n                  ${this.hass.localize(\n                    \"ui.panel.config.area_registry.editor.delete\"\n                  )}\n                </mwc-button>\n              `\n            : html``}\n          <mwc-button\n            @click=\"${this._updateEntry}\"\n            .disabled=${nameInvalid || this._submitting}\n          >\n            ${entry\n              ? this.hass.localize(\n                  \"ui.panel.config.area_registry.editor.update\"\n                )\n              : this.hass.localize(\n                  \"ui.panel.config.area_registry.editor.create\"\n                )}\n          </mwc-button>\n        </div>\n      </ha-paper-dialog>\n    `;\n  }\n\n  private _nameChanged(ev: PolymerChangedEvent<string>) {\n    this._error = undefined;\n    this._name = ev.detail.value;\n  }\n\n  private async _updateEntry() {\n    this._submitting = true;\n    try {\n      const values: AreaRegistryEntryMutableParams = {\n        name: this._name.trim(),\n      };\n      if (this._params!.entry) {\n        await this._params!.updateEntry(values);\n      } else {\n        await this._params!.createEntry(values);\n      }\n      this._params = undefined;\n    } catch (err) {\n      this._error = err.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _deleteEntry() {\n    this._submitting = true;\n    try {\n      if (await this._params!.removeEntry()) {\n        this._params = undefined;\n      }\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>): void {\n    if (!(ev.detail as any).value) {\n      this._params = undefined;\n    }\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-paper-dialog {\n          min-width: 400px;\n        }\n        .form {\n          padding-bottom: 24px;\n        }\n        mwc-button.warning {\n          margin-right: auto;\n        }\n        .error {\n          color: var(--google-red-500);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-area-registry-detail\": DialogAreaDetail;\n  }\n}\n\ncustomElements.define(\"dialog-area-registry-detail\", DialogAreaDetail);\n"],"sourceRoot":""}