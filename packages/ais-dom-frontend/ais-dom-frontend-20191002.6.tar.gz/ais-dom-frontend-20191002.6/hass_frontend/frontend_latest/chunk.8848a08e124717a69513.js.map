{"version":3,"sources":["webpack:///./src/components/entity/ha-entity-picker.ts","webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/panels/lovelace/editor/config-elements/config-elements-style.ts","webpack:///./src/panels/lovelace/editor/config-elements/hui-alarm-panel-card-editor.ts"],"names":["rowRenderer","root","_owner","model","firstElementChild","innerHTML","querySelector","stateObj","item","textContent","Object","_common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_8__","entity_id","HaEntityPicker","lit_element__WEBPACK_IMPORTED_MODULE_9__","[object Object]","this","_getStates","memoize_one__WEBPACK_IMPORTED_MODULE_6__","hass","domainFilter","entityFilter","states","entityIds","keys","filter","eid","substr","indexOf","sort","map","key","value","changedProps","super","updated","has","_opened","_hass","_value","allowCustomEntity","_openedChanged","_valueChanged","autofocus","undefined","label","localize","disabled","length","ev","detail","setTimeout","_common_dom_fire_event__WEBPACK_IMPORTED_MODULE_10__","styles","tslib__WEBPACK_IMPORTED_MODULE_0__","type","Boolean","attribute","customElements","define","__webpack_require__","d","__webpack_exports__","struct","index_es","types","entity-id","includes","icon","configElementStyle","cardConfigStruct","_common_structs_struct__WEBPACK_IMPORTED_MODULE_5__","entity","name","HuiAlarmPanelCardEditor","lit_element__WEBPACK_IMPORTED_MODULE_1__","config","_config","_entity","_name","_states","_config_elements_style__WEBPACK_IMPORTED_MODULE_7__","state","index","_stateRemoved","_stateAdded","target","Number","newStates","splice","assign","_common_dom_fire_event__WEBPACK_IMPORTED_MODULE_6__","push","configValue"],"mappings":"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","file":"chunk.8848a08e124717a69513.js","sourcesContent":["import \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@vaadin/vaadin-combo-box/vaadin-combo-box-light\";\nimport memoizeOne from \"memoize-one\";\n\nimport \"./state-badge\";\n\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport {\n  LitElement,\n  TemplateResult,\n  html,\n  css,\n  CSSResult,\n  property,\n  PropertyValues,\n} from \"lit-element\";\nimport { HomeAssistant } from \"../../types\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\n\nexport type HaEntityPickerEntityFilterFunc = (entityId: HassEntity) => boolean;\n\nconst rowRenderer = (\n  root: HTMLElement,\n  _owner,\n  model: { item: HassEntity }\n) => {\n  if (!root.firstElementChild) {\n    root.innerHTML = `\n      <style>\n        paper-icon-item {\n          margin: -10px;\n          padding: 0;\n        }\n      </style>\n      <paper-icon-item>\n        <state-badge state-obj=\"[[item]]\" slot=\"item-icon\"></state-badge>\n        <paper-item-body two-line=\"\">\n          <div class='name'>[[_computeStateName(item)]]</div>\n          <div secondary>[[item.entity_id]]</div>\n        </paper-item-body>\n      </paper-icon-item>\n    `;\n  }\n\n  root.querySelector(\"state-badge\")!.stateObj = model.item;\n  root.querySelector(\".name\")!.textContent = computeStateName(model.item);\n  root.querySelector(\"[secondary]\")!.textContent = model.item.entity_id;\n};\n\nclass HaEntityPicker extends LitElement {\n  @property({ type: Boolean }) public autofocus?: boolean;\n  @property({ type: Boolean }) public disabled?: boolean;\n  @property({ type: Boolean, attribute: \"allow-custom-entity\" })\n  public allowCustomEntity;\n  @property() public hass?: HomeAssistant;\n  @property() public label?: string;\n  @property() public value?: string;\n  @property({ attribute: \"domain-filter\" }) public domainFilter?: string;\n  @property() public entityFilter?: HaEntityPickerEntityFilterFunc;\n  @property({ type: Boolean }) private _opened?: boolean;\n  @property() private _hass?: HomeAssistant;\n\n  private _getStates = memoizeOne(\n    (\n      hass: this[\"hass\"],\n      domainFilter: this[\"domainFilter\"],\n      entityFilter: this[\"entityFilter\"]\n    ) => {\n      let states: HassEntity[] = [];\n\n      if (!hass) {\n        return [];\n      }\n      let entityIds = Object.keys(hass.states);\n\n      if (domainFilter) {\n        entityIds = entityIds.filter(\n          (eid) => eid.substr(0, eid.indexOf(\".\")) === domainFilter\n        );\n      }\n\n      states = entityIds.sort().map((key) => hass!.states[key]);\n\n      if (entityFilter) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value || entityFilter!(stateObj)\n        );\n      }\n      return states;\n    }\n  );\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"hass\") && !this._opened) {\n      this._hass = this.hass;\n    }\n  }\n\n  protected render(): TemplateResult | void {\n    const states = this._getStates(\n      this._hass,\n      this.domainFilter,\n      this.entityFilter\n    );\n\n    return html`\n      <vaadin-combo-box-light\n        item-value-path=\"entity_id\"\n        item-label-path=\"entity_id\"\n        .items=${states}\n        .value=${this._value}\n        .allowCustomValue=${this.allowCustomEntity}\n        .renderer=${rowRenderer}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n      >\n        <paper-input\n          .autofocus=${this.autofocus}\n          .label=${this.label === undefined && this._hass\n            ? this._hass.localize(\"ui.components.entity.entity-picker.entity\")\n            : this.label}\n          .value=${this._value}\n          .disabled=${this.disabled}\n          class=\"input\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          spellcheck=\"false\"\n        >\n          ${this.value\n            ? html`\n                <paper-icon-button\n                  aria-label=\"Clear\"\n                  slot=\"suffix\"\n                  class=\"clear-button\"\n                  icon=\"hass:close\"\n                  no-ripple\n                >\n                  Clear\n                </paper-icon-button>\n              `\n            : \"\"}\n          ${states.length > 0\n            ? html`\n                <paper-icon-button\n                  aria-label=\"Show entities\"\n                  slot=\"suffix\"\n                  class=\"toggle-button\"\n                  .icon=${this._opened ? \"hass:menu-up\" : \"hass:menu-down\"}\n                >\n                  Toggle\n                </paper-icon-button>\n              `\n            : \"\"}\n        </paper-input>\n      </vaadin-combo-box-light>\n    `;\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    const newValue = ev.detail.value;\n    if (newValue !== this._value) {\n      this.value = ev.detail.value;\n      setTimeout(() => {\n        fireEvent(this, \"value-changed\", { value: this.value });\n        fireEvent(this, \"change\");\n      }, 0);\n    }\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-input > paper-icon-button {\n        width: 24px;\n        height: 24px;\n        padding: 2px;\n        color: var(--secondary-text-color);\n      }\n      [hidden] {\n        display: none;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"ha-entity-picker\", HaEntityPicker);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entity-picker\": HaEntityPicker;\n  }\n}\n","import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","import { html } from \"lit-element\";\n\nexport const configElementStyle = html`\n  <style>\n    ha-switch {\n      padding: 16px 0;\n    }\n    .side-by-side {\n      display: flex;\n    }\n    .side-by-side > * {\n      flex: 1;\n      padding-right: 4px;\n    }\n    .suffix {\n      margin: 0 8px;\n    }\n  </style>\n`;\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n  CSSResult,\n  css,\n} from \"lit-element\";\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\n\nimport { struct } from \"../../common/structs/struct\";\nimport { EntitiesEditorEvent, EditorTarget } from \"../types\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { configElementStyle } from \"./config-elements-style\";\n\nimport \"../../../../components/entity/ha-entity-picker\";\nimport \"../../../../components/ha-icon\";\nimport { AlarmPanelCardConfig } from \"../../cards/types\";\n\nconst cardConfigStruct = struct({\n  type: \"string\",\n  entity: \"string?\",\n  name: \"string?\",\n  states: \"array?\",\n});\n\n@customElement(\"hui-alarm-panel-card-editor\")\nexport class HuiAlarmPanelCardEditor extends LitElement\n  implements LovelaceCardEditor {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: AlarmPanelCardConfig;\n\n  public setConfig(config: AlarmPanelCardConfig): void {\n    config = cardConfigStruct(config);\n    this._config = config;\n  }\n\n  get _entity(): string {\n    return this._config!.entity || \"\";\n  }\n\n  get _name(): string {\n    return this._config!.name || \"\";\n  }\n\n  get _states(): string[] {\n    return this._config!.states || [];\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass) {\n      return html``;\n    }\n\n    const states = [\"arm_home\", \"arm_away\", \"arm_night\", \"arm_custom_bypass\"];\n\n    return html`\n      ${configElementStyle}\n      <div class=\"card-config\">\n        <ha-entity-picker\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.entity\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.required\"\n          )})\"\n          .hass=\"${this.hass}\"\n          .value=\"${this._entity}\"\n          .configValue=${\"entity\"}\n          domain-filter=\"alarm_control_panel\"\n          @change=\"${this._valueChanged}\"\n          allow-custom-entity\n        ></ha-entity-picker>\n        <paper-input\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.name\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .value=\"${this._name}\"\n          .configValue=\"${\"name\"}\"\n          @value-changed=\"${this._valueChanged}\"\n        ></paper-input>\n        <span>Used States</span> ${this._states.map((state, index) => {\n          return html`\n            <div class=\"states\">\n              <paper-item>${state}</paper-item>\n              <ha-icon\n                class=\"deleteState\"\n                .value=\"${index}\"\n                icon=\"hass:close\"\n                @click=${this._stateRemoved}\n              ></ha-icon>\n            </div>\n          `;\n        })}\n        <paper-dropdown-menu\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.alarm_panel.available_states\"\n          )}\"\n          @value-changed=\"${this._stateAdded}\"\n        >\n          <paper-listbox slot=\"dropdown-content\">\n            ${states.map((state) => {\n              return html`\n                <paper-item>${state}</paper-item>\n              `;\n            })}\n          </paper-listbox>\n        </paper-dropdown-menu>\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .states {\n        display: flex;\n        flex-direction: row;\n      }\n      .deleteState {\n        visibility: hidden;\n      }\n      .states:hover > .deleteState {\n        visibility: visible;\n      }\n      ha-icon {\n        padding-top: 12px;\n      }\n    `;\n  }\n\n  private _stateRemoved(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this._states || !this.hass) {\n      return;\n    }\n\n    const target = ev.target! as EditorTarget;\n    const index = Number(target.value);\n    if (index > -1) {\n      const newStates = this._states;\n      newStates.splice(index, 1);\n      this._config = {\n        ...this._config,\n        states: newStates,\n      };\n      fireEvent(this, \"config-changed\", { config: this._config });\n    }\n  }\n\n  private _stateAdded(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    if (!target.value || this._states.indexOf(target.value) >= 0) {\n      return;\n    }\n    const newStates = this._states;\n    newStates.push(target.value);\n    this._config = {\n      ...this._config,\n      states: newStates,\n    };\n    target.value = \"\";\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    if (this[`_${target.configValue}`] === target.value) {\n      return;\n    }\n    if (target.configValue) {\n      if (target.value === \"\") {\n        delete this._config[target.configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [target.configValue!]: target.value,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-alarm-panel-card-editor\": HuiAlarmPanelCardEditor;\n  }\n}\n"],"sourceRoot":""}