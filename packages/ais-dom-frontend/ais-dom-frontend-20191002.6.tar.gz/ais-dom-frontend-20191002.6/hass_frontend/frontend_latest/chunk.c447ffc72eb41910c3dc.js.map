{"version":3,"sources":["webpack:///./node_modules/@polymer/paper-item/paper-item-body.js","webpack:///./node_modules/@polymer/paper-item/paper-icon-item.js","webpack:///./node_modules/superstruct/lib/index.es.js"],"names":["__webpack_require__","_polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_4__","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_5__","Object","_template","is","_paper_item_behavior_js__WEBPACK_IMPORTED_MODULE_6__","behaviors","d","__webpack_exports__","superstruct","StructError","TypeError","[object Object]","attrs","type","path","value","length","join","JSON","stringify","super","format","data","reason","errors","this","push","Error","captureStackTrace","constructor","stack","toString","prototype","kindOf","val","ctorName","Array","isArray","isBuffer","callee","err","message","indexOf","isArguments","Date","toDateString","getDate","setDate","isDate","stackTraceLimit","isError","RegExp","flags","ignoreCase","multiline","global","isRegexp","throw","return","next","isGeneratorObj","call","slice","toLowerCase","replace","name","IS_STRUCT","KIND","isStruct","resolveDefaults","defaults","_extends","assign","target","i","arguments","source","key","hasOwnProperty","Kind","validate","any","schema","defaults$$1","options","tuple","list","func","object","required","endsWith","includes","union","split","intersection","scalar","optional","undefined","en","map","s","e","String","result","isValid","failure","array","element","error","ret","v","r","forEach","singleE","concat","first","obj","ks","properties","kind","valueKeys","keys","propertiesKeys","Set","types","fn","kinds","k","Math","max","t","Kinds","dict","values","resolved","e2","r2","enum","enums","function","instance","interface","lazy","struct","literal","partial","dynamic","createSchema","Types","config","Struct","assert","defineProperty","test","date","isNaN"],"mappings":"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","file":"chunk.c447ffc72eb41910c3dc.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/paper-styles/typography.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/*\nUse `<paper-item-body>` in a `<paper-item>` or `<paper-icon-item>` to make two-\nor three- line items. It is a flex item that is a vertical flexbox.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n    </paper-item>\n\nThe child elements with the `secondary` attribute is given secondary text\nstyling.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-body-two-line-min-height` | Minimum height of a two-line item | `72px`\n`--paper-item-body-three-line-min-height` | Minimum height of a three-line item | `88px`\n`--paper-item-body-secondary-color` | Foreground color for the `secondary` area | `--secondary-text-color`\n`--paper-item-body-secondary` | Mixin applied to the `secondary` area | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        overflow: hidden; /* needed for text-overflow: ellipsis to work on ff */\n        @apply --layout-vertical;\n        @apply --layout-center-justified;\n        @apply --layout-flex;\n      }\n\n      :host([two-line]) {\n        min-height: var(--paper-item-body-two-line-min-height, 72px);\n      }\n\n      :host([three-line]) {\n        min-height: var(--paper-item-body-three-line-min-height, 88px);\n      }\n\n      :host > ::slotted(*) {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n\n      :host > ::slotted([secondary]) {\n        @apply --paper-font-body1;\n\n        color: var(--paper-item-body-secondary-color, var(--secondary-text-color));\n\n        @apply --paper-item-body-secondary;\n      }\n    </style>\n\n    <slot></slot>\n`,\n\n  is: 'paper-item-body'\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/typography.js';\nimport './paper-item-shared-styles.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperItemBehavior} from './paper-item-behavior.js';\n\n/*\n`<paper-icon-item>` is a convenience element to make an item with icon. It is an\ninteractive list item with a fixed-width icon area, according to Material\nDesign. This is useful if the icons are of varying widths, but you want the item\nbodies to line up. Use this like a `<paper-item>`. The child node with the slot\nname `item-icon` is placed in the icon area.\n\n    <paper-icon-item>\n      <iron-icon icon=\"favorite\" slot=\"item-icon\"></iron-icon>\n      Favorite\n    </paper-icon-item>\n    <paper-icon-item>\n      <div class=\"avatar\" slot=\"item-icon\"></div>\n      Avatar\n    </paper-icon-item>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-icon-width` | Width of the icon area | `56px`\n`--paper-item-icon` | Mixin applied to the icon area | `{}`\n`--paper-icon-item` | Mixin applied to the item | `{}`\n`--paper-item-selected-weight` | The font weight of a selected item | `bold`\n`--paper-item-selected` | Mixin applied to selected paper-items | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items | `--disabled-text-color`\n`--paper-item-disabled` | Mixin applied to disabled paper-items | `{}`\n`--paper-item-focused` | Mixin applied to focused paper-items | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-item-shared-styles\"></style>\n    <style>\n      :host {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        @apply --paper-font-subhead;\n\n        @apply --paper-item;\n        @apply --paper-icon-item;\n      }\n\n      .content-icon {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n\n        width: var(--paper-item-icon-width, 56px);\n        @apply --paper-item-icon;\n      }\n    </style>\n\n    <div id=\"contentIcon\" class=\"content-icon\">\n      <slot name=\"item-icon\"></slot>\n    </div>\n    <slot></slot>\n`,\n\n  is: 'paper-icon-item',\n  behaviors: [PaperItemBehavior]\n});\n","/**\n * Define a struct error.\n *\n * @type {StructError}\n */\n\nclass StructError extends TypeError {\n  static format(attrs) {\n    const { type, path, value } = attrs;\n    const message = `Expected a value of type \\`${type}\\`${path.length ? ` for \\`${path.join('.')}\\`` : ''} but received \\`${JSON.stringify(value)}\\`.`;\n    return message;\n  }\n\n  constructor(attrs) {\n    const message = StructError.format(attrs);\n    super(message);\n\n    const { data, path, value, reason, type, errors = [] } = attrs;\n    this.data = data;\n    this.path = path;\n    this.value = value;\n    this.reason = reason;\n    this.type = type;\n    this.errors = errors;\n\n    if (!errors.length) {\n      errors.push(this);\n    }\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n}\n\nvar toString = Object.prototype.toString;\n\nvar kindOf = function kindOf(val) {\n  if (val === void 0) return 'undefined';\n  if (val === null) return 'null';\n\n  var type = typeof val;\n  if (type === 'boolean') return 'boolean';\n  if (type === 'string') return 'string';\n  if (type === 'number') return 'number';\n  if (type === 'symbol') return 'symbol';\n  if (type === 'function') {\n    return isGeneratorFn(val) ? 'generatorfunction' : 'function';\n  }\n\n  if (isArray(val)) return 'array';\n  if (isBuffer(val)) return 'buffer';\n  if (isArguments(val)) return 'arguments';\n  if (isDate(val)) return 'date';\n  if (isError(val)) return 'error';\n  if (isRegexp(val)) return 'regexp';\n\n  switch (ctorName(val)) {\n    case 'Symbol': return 'symbol';\n    case 'Promise': return 'promise';\n\n    // Set, Map, WeakSet, WeakMap\n    case 'WeakMap': return 'weakmap';\n    case 'WeakSet': return 'weakset';\n    case 'Map': return 'map';\n    case 'Set': return 'set';\n\n    // 8-bit typed arrays\n    case 'Int8Array': return 'int8array';\n    case 'Uint8Array': return 'uint8array';\n    case 'Uint8ClampedArray': return 'uint8clampedarray';\n\n    // 16-bit typed arrays\n    case 'Int16Array': return 'int16array';\n    case 'Uint16Array': return 'uint16array';\n\n    // 32-bit typed arrays\n    case 'Int32Array': return 'int32array';\n    case 'Uint32Array': return 'uint32array';\n    case 'Float32Array': return 'float32array';\n    case 'Float64Array': return 'float64array';\n  }\n\n  if (isGeneratorObj(val)) {\n    return 'generator';\n  }\n\n  // Non-plain objects\n  type = toString.call(val);\n  switch (type) {\n    case '[object Object]': return 'object';\n    // iterators\n    case '[object Map Iterator]': return 'mapiterator';\n    case '[object Set Iterator]': return 'setiterator';\n    case '[object String Iterator]': return 'stringiterator';\n    case '[object Array Iterator]': return 'arrayiterator';\n  }\n\n  // other\n  return type.slice(8, -1).toLowerCase().replace(/\\s/g, '');\n};\n\nfunction ctorName(val) {\n  return val.constructor ? val.constructor.name : null;\n}\n\nfunction isArray(val) {\n  if (Array.isArray) return Array.isArray(val);\n  return val instanceof Array;\n}\n\nfunction isError(val) {\n  return val instanceof Error || (typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number');\n}\n\nfunction isDate(val) {\n  if (val instanceof Date) return true;\n  return typeof val.toDateString === 'function'\n    && typeof val.getDate === 'function'\n    && typeof val.setDate === 'function';\n}\n\nfunction isRegexp(val) {\n  if (val instanceof RegExp) return true;\n  return typeof val.flags === 'string'\n    && typeof val.ignoreCase === 'boolean'\n    && typeof val.multiline === 'boolean'\n    && typeof val.global === 'boolean';\n}\n\nfunction isGeneratorFn(name, val) {\n  return ctorName(name) === 'GeneratorFunction';\n}\n\nfunction isGeneratorObj(val) {\n  return typeof val.throw === 'function'\n    && typeof val.return === 'function'\n    && typeof val.next === 'function';\n}\n\nfunction isArguments(val) {\n  try {\n    if (typeof val.length === 'number' && typeof val.callee === 'function') {\n      return true;\n    }\n  } catch (err) {\n    if (err.message.indexOf('callee') !== -1) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * If you need to support Safari 5-7 (8-10 yr-old browser),\n * take a look at https://github.com/feross/is-buffer\n */\n\nfunction isBuffer(val) {\n  if (val.constructor && typeof val.constructor.isBuffer === 'function') {\n    return val.constructor.isBuffer(val);\n  }\n  return false;\n}\n\n/**\n * A private string to identify structs by.\n *\n * @type {String}\n */\n\nconst IS_STRUCT = '@@__STRUCT__@@';\n\n/**\n * A private string to refer to a struct's kind.\n *\n * @type {String}\n */\n\nconst KIND = '@@__KIND__@@';\n\n/**\n * Check if a `value` is a struct.\n *\n * @param {Any} value\n * @return {Boolean}\n */\n\nfunction isStruct(value) {\n  return !!(value && value[IS_STRUCT]);\n}\n\n/**\n * Resolve `defaults`, for an optional `value`.\n *\n * @param {Function|Any} defaults\n * @param {Any} value\n * @return {Any}\n */\n\nfunction resolveDefaults(defaults, value) {\n  return typeof defaults === 'function' ? defaults(value) : defaults;\n}\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Kind.\n *\n * @type {Kind}\n */\n\nclass Kind {\n  constructor(name, type, validate) {\n    this.name = name;\n    this.type = type;\n    this.validate = validate;\n  }\n}\n\n/**\n * Any.\n *\n * @param {Array|Function|Object|String} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction any(schema, defaults$$1, options) {\n  if (isStruct(schema)) {\n    return schema[KIND];\n  }\n\n  if (schema instanceof Kind) {\n    return schema;\n  }\n\n  switch (kindOf(schema)) {\n    case 'array':\n      {\n        return schema.length > 1 ? tuple(schema, defaults$$1, options) : list(schema, defaults$$1, options);\n      }\n\n    case 'function':\n      {\n        return func(schema, defaults$$1, options);\n      }\n\n    case 'object':\n      {\n        return object(schema, defaults$$1, options);\n      }\n\n    case 'string':\n      {\n        let required = true;\n        let type;\n\n        if (schema.endsWith('?')) {\n          required = false;\n          schema = schema.slice(0, -1);\n        }\n\n        if (schema.includes('|')) {\n          const scalars = schema.split(/\\s*\\|\\s*/g);\n          type = union(scalars, defaults$$1, options);\n        } else if (schema.includes('&')) {\n          const scalars = schema.split(/\\s*&\\s*/g);\n          type = intersection(scalars, defaults$$1, options);\n        } else {\n          type = scalar(schema, defaults$$1, options);\n        }\n\n        if (!required) {\n          type = optional(type, undefined, options);\n        }\n\n        return type;\n      }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    throw new Error(`A schema definition must be an object, array, string or function, but you passed: ${schema}`);\n  } else {\n    throw new Error(`Invalid schema: ${schema}`);\n  }\n}\n\n/**\n * Dict.\n *\n * @param {Array} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction dict(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'array' || schema.length !== 2) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Dict structs must be defined as an array with two elements, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const obj = scalar('object', undefined, options);\n  const keys = any(schema[0], undefined, options);\n  const values = any(schema[1], undefined, options);\n  const name = 'dict';\n  const type = `dict<${keys.type},${values.type}>`;\n  const validate = value => {\n    const resolved = resolveDefaults(defaults$$1);\n    value = resolved ? _extends({}, resolved, value) : value;\n    const [error] = obj.validate(value);\n\n    if (error) {\n      error.type = type;\n      return [error];\n    }\n\n    const ret = {};\n    const errors = [];\n\n    for (let k in value) {\n      const v = value[k];\n      const [e, r] = keys.validate(k);\n\n      if (e) {\n        const allE = e.errors || [e];\n        allE.forEach(singleE => {\n          singleE.path = [k].concat(singleE.path);\n          singleE.data = value;\n          errors.push(singleE);\n        });\n        continue;\n      }\n\n      k = r;\n      const [e2, r2] = values.validate(v);\n\n      if (e2) {\n        const allE2 = e2.errors || [e2];\n        allE2.forEach(singleE => {\n          singleE.path = [k].concat(singleE.path);\n          singleE.data = value;\n          errors.push(singleE);\n        });\n        continue;\n      }\n\n      ret[k] = r2;\n    }\n\n    if (errors.length) {\n      const first = errors[0];\n      first.errors = errors;\n      return [first];\n    }\n\n    return [undefined, ret];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Enum.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction en(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Enum structs must be defined as an array, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const name = 'enum';\n  const type = schema.map(s => {\n    try {\n      return JSON.stringify(s);\n    } catch (e) {\n      return String(s);\n    }\n  }).join(' | ');\n\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    return schema.includes(value) ? [undefined, value] : [{ data: value, path: [], value, type }];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Enums.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction enums(schema, defaults$$1, options) {\n  const e = en(schema, undefined, options);\n  const l = list([e], defaults$$1, options);\n  return l;\n}\n\n/**\n * Function.\n *\n * @param {Function} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction func(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Function structs must be defined as a function, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const name = 'function';\n  const type = '<function>';\n  const validate = (value = resolveDefaults(defaults$$1), data) => {\n    const result = schema(value, data);\n    let failure = { path: [], reason: null };\n    let isValid;\n\n    switch (kindOf(result)) {\n      case 'boolean':\n        {\n          isValid = result;\n          break;\n        }\n      case 'string':\n        {\n          isValid = false;\n          failure.reason = result;\n          break;\n        }\n      case 'object':\n        {\n          isValid = false;\n          failure = _extends({}, failure, result);\n          break;\n        }\n      default:\n        {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(`Validator functions must return a boolean, an error reason string or an error reason object, but you passed: ${schema}`);\n          } else {\n            throw new Error(`Invalid result: ${result}`);\n          }\n        }\n    }\n\n    return isValid ? [undefined, value] : [_extends({ type, value, data: value }, failure)];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Instance.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction instance(schema, defaults$$1, options) {\n  const name = 'instance';\n  const type = `instance<${schema.name}>`;\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    return value instanceof schema ? [undefined, value] : [{ data: value, path: [], value, type }];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Interface.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction inter(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Interface structs must be defined as an object, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const ks = [];\n  const properties = {};\n\n  for (const key in schema) {\n    ks.push(key);\n    const s = schema[key];\n    const kind = any(s, undefined, options);\n    properties[key] = kind;\n  }\n\n  const name = 'interface';\n  const type = `{${ks.join()}}`;\n  const validate = value => {\n    const resolved = resolveDefaults(defaults$$1);\n    value = resolved ? _extends({}, resolved, value) : value;\n    const errors = [];\n    const ret = value;\n\n    for (const key in properties) {\n      let v = value[key];\n      const kind = properties[key];\n\n      if (v === undefined) {\n        const d = defaults$$1 && defaults$$1[key];\n        v = resolveDefaults(d, value);\n      }\n\n      const [e, r] = kind.validate(v, value);\n\n      if (e) {\n        const allE = e.errors || [e];\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path);\n          singleE.data = value;\n          errors.push(singleE);\n        });\n        continue;\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r;\n      }\n    }\n\n    if (errors.length) {\n      const first = errors[0];\n      first.errors = errors;\n      return [first];\n    }\n\n    return [undefined, ret];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Lazy.\n *\n * @param {Function} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction lazy(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Lazy structs must be defined as an function that returns a schema, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  let kind;\n  let struct;\n  const name = 'lazy';\n  const type = `lazy...`;\n  const compile = value => {\n    struct = schema();\n    kind.name = struct.kind;\n    kind.type = struct.type;\n    kind.validate = struct.validate;\n    return kind.validate(value);\n  };\n\n  kind = new Kind(name, type, compile);\n  return kind;\n}\n\n/**\n * Dynamic.\n *\n * @param {Function} createSchema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction dynamic(createSchema, defaults$$1, options) {\n  if (kindOf(createSchema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Dynamic structs must be defined as a function, but you passed: ${createSchema}`);\n    } else {\n      throw new Error(`Invalid schema: ${createSchema}`);\n    }\n  }\n\n  const name = 'dynamic';\n  const type = 'dynamic...';\n  const validate = (value = resolveDefaults(defaults$$1), data) => {\n    const schema = createSchema(value, data);\n\n    if (kindOf(schema) !== 'function') {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(`Dynamic structs must return a schema, but you passed: ${schema}`);\n      } else {\n        throw new Error(`Invalid schema: ${schema}`);\n      }\n    }\n\n    const [error, result] = schema.validate(value);\n\n    if (error) {\n      return [error];\n    }\n\n    return [undefined, result];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * List.\n *\n * @param {Array} schema\n * @param {Array} defaults\n * @param {Object} options\n */\n\nfunction list(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'array' || schema.length !== 1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`List structs must be defined as an array with a single element, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const array = scalar('array', undefined, options);\n  const element = any(schema[0], undefined, options);\n  const name = 'list';\n  const type = `[${element.type}]`;\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    const [error, result] = array.validate(value);\n\n    if (error) {\n      error.type = type;\n      return [error];\n    }\n\n    value = result;\n    const errors = [];\n    const ret = [];\n\n    for (let i = 0; i < value.length; i++) {\n      const v = value[i];\n      const [e, r] = element.validate(v);\n\n      if (e) {\n        const allE = e.errors || [e];\n        allE.forEach(singleE => {\n          singleE.path = [i].concat(singleE.path);\n          singleE.data = value;\n          errors.push(singleE);\n        });\n        continue;\n      }\n\n      ret[i] = r;\n    }\n\n    if (errors.length) {\n      const first = errors[0];\n      first.errors = errors;\n      return [first];\n    }\n\n    return [undefined, ret];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Literal.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction literal(schema, defaults$$1, options) {\n  const name = 'literal';\n  const type = `literal: ${JSON.stringify(schema)}`;\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    return value === schema ? [undefined, value] : [{ data: value, path: [], value, type }];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Object.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction object(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Object structs must be defined as an object, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const obj = scalar('object', undefined, options);\n  const ks = [];\n  const properties = {};\n\n  for (const key in schema) {\n    ks.push(key);\n    const s = schema[key];\n    const kind = any(s, undefined, options);\n    properties[key] = kind;\n  }\n\n  const name = 'object';\n  const type = `{${ks.join()}}`;\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    const [error] = obj.validate(value);\n\n    if (error) {\n      error.type = type;\n      return [error];\n    }\n\n    const errors = [];\n    const ret = {};\n    const valueKeys = Object.keys(value);\n    const propertiesKeys = Object.keys(properties);\n    const keys = new Set(valueKeys.concat(propertiesKeys));\n\n    keys.forEach(key => {\n      let v = value[key];\n      const kind = properties[key];\n\n      if (v === undefined) {\n        const d = defaults$$1 && defaults$$1[key];\n        v = resolveDefaults(d, value);\n      }\n\n      if (!kind) {\n        const e = { data: value, path: [key], value: v };\n        errors.push(e);\n        return;\n      }\n\n      const [e, r] = kind.validate(v, value);\n\n      if (e) {\n        const allE = e.errors || [e];\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path);\n          singleE.data = value;\n          errors.push(singleE);\n        });\n        return;\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r;\n      }\n    });\n\n    if (errors.length) {\n      const first = errors[0];\n      first.errors = errors;\n      return [first];\n    }\n\n    return [undefined, ret];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Optional.\n *\n * @param {Any} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction optional(schema, defaults$$1, options) {\n  return union([schema, 'undefined'], defaults$$1, options);\n}\n\n/**\n * Partial.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction partial(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Partial structs must be defined as an object, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const obj = scalar('object', undefined, options);\n  const ks = [];\n  const properties = {};\n\n  for (const key in schema) {\n    ks.push(key);\n    const s = schema[key];\n    const kind = any(s, undefined, options);\n    properties[key] = kind;\n  }\n\n  const name = 'partial';\n  const type = `{${ks.join()},...}`;\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    const [error] = obj.validate(value);\n\n    if (error) {\n      error.type = type;\n      return [error];\n    }\n\n    const errors = [];\n    const ret = {};\n\n    for (const key in properties) {\n      let v = value[key];\n      const kind = properties[key];\n\n      if (v === undefined) {\n        const d = defaults$$1 && defaults$$1[key];\n        v = resolveDefaults(d, value);\n      }\n\n      const [e, r] = kind.validate(v, value);\n\n      if (e) {\n        const allE = e.errors || [e];\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path);\n          singleE.data = value;\n          errors.push(singleE);\n        });\n        continue;\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r;\n      }\n    }\n\n    if (errors.length) {\n      const first = errors[0];\n      first.errors = errors;\n      return [first];\n    }\n\n    return [undefined, ret];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Scalar.\n *\n * @param {String} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction scalar(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'string') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Scalar structs must be defined as a string, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const { types } = options;\n  const fn = types[schema];\n\n  if (kindOf(fn) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`No struct validator function found for type \"${schema}\".`);\n    } else {\n      throw new Error(`Invalid type: ${schema}`);\n    }\n  }\n\n  const kind = func(fn, defaults$$1, options);\n  const name = 'scalar';\n  const type = schema;\n  const validate = value => {\n    const [error, result] = kind.validate(value);\n\n    if (error) {\n      error.type = type;\n      return [error];\n    }\n\n    return [undefined, result];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Tuple.\n *\n * @param {Array} schema\n * @param {Array} defaults\n * @param {Object} options\n */\n\nfunction tuple(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Tuple structs must be defined as an array, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const kinds = schema.map(s => any(s, undefined, options));\n  const array = scalar('array', undefined, options);\n  const name = 'tuple';\n  const type = `[${kinds.map(k => k.type).join()}]`;\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    const [error] = array.validate(value);\n\n    if (error) {\n      error.type = type;\n      return [error];\n    }\n\n    const ret = [];\n    const errors = [];\n    const length = Math.max(value.length, kinds.length);\n\n    for (let i = 0; i < length; i++) {\n      const kind = kinds[i];\n      const v = value[i];\n\n      if (!kind) {\n        const e = { data: value, path: [i], value: v };\n        errors.push(e);\n        continue;\n      }\n\n      const [e, r] = kind.validate(v);\n\n      if (e) {\n        const allE = e.errors || [e];\n        allE.forEach(singleE => {\n          singleE.path = [i].concat(singleE.path);\n          singleE.data = value;\n          errors.push(singleE);\n        });\n        continue;\n      }\n\n      ret[i] = r;\n    }\n\n    if (errors.length) {\n      const first = errors[0];\n      first.errors = errors;\n      return [first];\n    }\n\n    return [undefined, ret];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Union.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction union(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Union structs must be defined as an array, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const kinds = schema.map(s => any(s, undefined, options));\n  const name = 'union';\n  const type = kinds.map(k => k.type).join(' | ');\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    const errors = [];\n\n    for (const k of kinds) {\n      const [e, r] = k.validate(value);\n\n      if (!e) {\n        return [undefined, r];\n      }\n\n      errors.push(e);\n    }\n    errors[0].type = type;\n    return errors;\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Intersection.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction intersection(schema, defaults$$1, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`Intersection structs must be defined as an array, but you passed: ${schema}`);\n    } else {\n      throw new Error(`Invalid schema: ${schema}`);\n    }\n  }\n\n  const types = schema.map(s => any(s, undefined, options));\n  const name = 'intersection';\n  const type = types.map(t => t.type).join(' & ');\n  const validate = (value = resolveDefaults(defaults$$1)) => {\n    let v = value;\n\n    for (const t of types) {\n      const [e, r] = t.validate(v);\n\n      if (e) {\n        e.type = type;\n        return [e];\n      }\n\n      v = r;\n    }\n\n    return [undefined, v];\n  };\n\n  return new Kind(name, type, validate);\n}\n\n/**\n * Kinds.\n *\n * @type {Object}\n */\n\nconst Kinds = {\n  any,\n  dict,\n  enum: en,\n  enums,\n  function: func,\n  instance,\n  interface: inter,\n  lazy,\n  list,\n  literal,\n  object,\n  optional,\n  partial,\n  scalar,\n  tuple,\n  union,\n  intersection,\n  dynamic\n\n  /**\n   * Export.\n   *\n   * @type {Object}\n   */\n\n};\n\n/**\n * The types that `kind-of` supports.\n *\n * @type {Array}\n */\n\nconst TYPES = ['arguments', 'array', 'boolean', 'buffer', 'error', 'float32array', 'float64array', 'function', 'generatorfunction', 'int16array', 'int32array', 'int8array', 'map', 'null', 'number', 'object', 'promise', 'regexp', 'set', 'string', 'symbol', 'uint16array', 'uint32array', 'uint8array', 'uint8clampedarray', 'undefined', 'weakmap', 'weakset'];\n\n/**\n * The default types that Superstruct ships with.\n *\n * @type {Object}\n */\n\nconst Types = {\n  any: value => value !== undefined\n};\n\nTYPES.forEach(type => {\n  Types[type] = value => kindOf(value) === type;\n});\n\n/**\n * Handle the 'date' case specially, to throw out invalid `Date` objects.\n *\n * @param {Mixed} value\n * @return {Boolean}\n */\n\nTypes.date = value => kindOf(value) === 'date' && !isNaN(value);\n\n/**\n * Create a struct factory with a `config`.\n *\n * @param {Object} config\n * @return {Function}\n */\n\nfunction superstruct(config = {}) {\n  const types = _extends({}, Types, config.types || {});\n\n  /**\n   * Create a `kind` struct with `schema`, `defaults` and `options`.\n   *\n   * @param {Any} schema\n   * @param {Any} defaults\n   * @param {Object} options\n   * @return {Function}\n   */\n\n  function struct(schema, defaults$$1, options = {}) {\n    if (isStruct(schema)) {\n      schema = schema.schema;\n    }\n\n    const kind = Kinds.any(schema, defaults$$1, _extends({}, options, { types }));\n\n    function Struct(data) {\n      if (this instanceof Struct) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error('The `Struct` creation function should not be used with the `new` keyword.');\n        } else {\n          throw new Error('Invalid `new` keyword!');\n        }\n      }\n\n      return Struct.assert(data);\n    }\n\n    Object.defineProperty(Struct, IS_STRUCT, { value: true });\n    Object.defineProperty(Struct, KIND, { value: kind });\n\n    Struct.kind = kind.name;\n    Struct.type = kind.type;\n    Struct.schema = schema;\n    Struct.defaults = defaults$$1;\n    Struct.options = options;\n\n    Struct.assert = value => {\n      const [error, result] = kind.validate(value);\n\n      if (error) {\n        throw new StructError(error);\n      }\n\n      return result;\n    };\n\n    Struct.test = value => {\n      const [error] = kind.validate(value);\n      return !error;\n    };\n\n    Struct.validate = value => {\n      const [error, result] = kind.validate(value);\n\n      if (error) {\n        return [new StructError(error)];\n      }\n\n      return [undefined, result];\n    };\n\n    return Struct;\n  }\n\n  /**\n   * Mix in a factory for each specific kind of struct.\n   */\n\n  Object.keys(Kinds).forEach(name => {\n    const kind = Kinds[name];\n\n    struct[name] = (schema, defaults$$1, options) => {\n      const type = kind(schema, defaults$$1, _extends({}, options, { types }));\n      const s = struct(type, defaults$$1, options);\n      return s;\n    };\n  });\n\n  /**\n   * Return the struct factory.\n   */\n\n  return struct;\n}\n\n/**\n * Create a convenience `struct` factory for the default types.\n *\n * @type {Function}\n */\n\nconst struct = superstruct();\n\nexport { struct, superstruct, isStruct, StructError };\n//# sourceMappingURL=index.es.js.map\n"],"sourceRoot":""}