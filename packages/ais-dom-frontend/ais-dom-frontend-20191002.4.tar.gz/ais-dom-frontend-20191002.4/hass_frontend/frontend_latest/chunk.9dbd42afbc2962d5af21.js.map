{"version":3,"sources":["webpack:///./src/components/dialog/ha-iron-focusables-helper.js","webpack:///./src/components/dialog/ha-paper-dialog.ts","webpack:///./src/panels/config/entity_registry/dialog-entity-registry-detail.ts"],"names":["HaIronFocusablesHelper","getTabbableNodes","node","result","this","_collectTabbableNodes","iron_focusables_helper","_sortByTabIndex","nodeType","Node","ELEMENT_NODE","_isVisible","children","element","tabIndex","_normalizedTabIndex","needsSort","push","localName","Object","polymer_dom","getDistributedNodes","shadowRoot","root","i","length","paperDialogClass","customElements","get","haTabFixBehaviorImpl","_focusableNodes","define","legacy_class","DialogEntityRegistryDetail","lit_element__WEBPACK_IMPORTED_MODULE_1__","[object Object]","params","_params","_error","undefined","_name","entry","name","_platform","platform","_origEntityId","entity_id","_entityId","_disabledBy","disabled_by","updateComplete","stateObj","hass","states","invalidDomainUpdate","_common_entity_compute_domain__WEBPACK_IMPORTED_MODULE_7__","trim","_openedChanged","_common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_8__","localize","_nameChanged","_submitting","_entityIdChanged","_disabledByChanged","_deleteEntry","_updateEntry","ev","detail","value","_data_entity_registry__WEBPACK_IMPORTED_MODULE_9__","new_entity_id","err","message","confirm","target","checked","styles","_resources_styles__WEBPACK_IMPORTED_MODULE_6__","tslib__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"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","file":"chunk.9dbd42afbc2962d5af21.js","sourcesContent":["/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/*\n  Fixes issue with not using shadow dom properly in iron-overlay-behavior/icon-focusables-helper.js\n*/\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\n\nimport { IronFocusablesHelper } from \"@polymer/iron-overlay-behavior/iron-focusables-helper.js\";\n\nexport const HaIronFocusablesHelper = {\n  /**\n   * Returns a sorted array of tabbable nodes, including the root node.\n   * It searches the tabbable nodes in the light and shadow dom of the chidren,\n   * sorting the result by tabindex.\n   * @param {!Node} node\n   * @return {!Array<!HTMLElement>}\n   */\n  getTabbableNodes: function(node) {\n    var result = [];\n    // If there is at least one element with tabindex > 0, we need to sort\n    // the final array by tabindex.\n    var needsSortByTabIndex = this._collectTabbableNodes(node, result);\n    if (needsSortByTabIndex) {\n      return IronFocusablesHelper._sortByTabIndex(result);\n    }\n    return result;\n  },\n\n  /**\n   * Searches for nodes that are tabbable and adds them to the `result` array.\n   * Returns if the `result` array needs to be sorted by tabindex.\n   * @param {!Node} node The starting point for the search; added to `result`\n   * if tabbable.\n   * @param {!Array<!HTMLElement>} result\n   * @return {boolean}\n   * @private\n   */\n  _collectTabbableNodes: function(node, result) {\n    // If not an element or not visible, no need to explore children.\n    if (\n      node.nodeType !== Node.ELEMENT_NODE ||\n      !IronFocusablesHelper._isVisible(node)\n    ) {\n      return false;\n    }\n    var element = /** @type {!HTMLElement} */ (node);\n    var tabIndex = IronFocusablesHelper._normalizedTabIndex(element);\n    var needsSort = tabIndex > 0;\n    if (tabIndex >= 0) {\n      result.push(element);\n    }\n\n    // In ShadowDOM v1, tab order is affected by the order of distrubution.\n    // E.g. getTabbableNodes(#root) in ShadowDOM v1 should return [#A, #B];\n    // in ShadowDOM v0 tab order is not affected by the distrubution order,\n    // in fact getTabbableNodes(#root) returns [#B, #A].\n    //  <div id=\"root\">\n    //   <!-- shadow -->\n    //     <slot name=\"a\">\n    //     <slot name=\"b\">\n    //   <!-- /shadow -->\n    //   <input id=\"A\" slot=\"a\">\n    //   <input id=\"B\" slot=\"b\" tabindex=\"1\">\n    //  </div>\n    // TODO(valdrin) support ShadowDOM v1 when upgrading to Polymer v2.0.\n    var children;\n    if (element.localName === \"content\" || element.localName === \"slot\") {\n      children = dom(element).getDistributedNodes();\n    } else {\n      // /////////////////////////\n      // Use shadow root if possible, will check for distributed nodes.\n      // THIS IS THE CHANGED LINE\n      children = dom(element.shadowRoot || element.root || element).children;\n      // /////////////////////////\n    }\n    for (var i = 0; i < children.length; i++) {\n      // Ensure method is always invoked to collect tabbable children.\n      needsSort = this._collectTabbableNodes(children[i], result) || needsSort;\n    }\n    return needsSort;\n  },\n};\n","import \"@polymer/paper-dialog/paper-dialog\";\nimport { mixinBehaviors } from \"@polymer/polymer/lib/legacy/class\";\nimport { HaIronFocusablesHelper } from \"./ha-iron-focusables-helper.js\";\n// tslint:disable-next-line\nimport { PaperDialogElement } from \"@polymer/paper-dialog/paper-dialog\";\n\nconst paperDialogClass = customElements.get(\"paper-dialog\");\n\n// behavior that will override existing iron-overlay-behavior and call the fixed implementation\nconst haTabFixBehaviorImpl = {\n  get _focusableNodes() {\n    return HaIronFocusablesHelper.getTabbableNodes(this);\n  },\n};\n\n// paper-dialog that uses the haTabFixBehaviorImpl behvaior\n// export class HaPaperDialog extends paperDialogClass {}\n// @ts-ignore\nexport class HaPaperDialog\n  extends mixinBehaviors([haTabFixBehaviorImpl], paperDialogClass)\n  implements PaperDialogElement {}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-paper-dialog\": HaPaperDialog;\n  }\n}\ncustomElements.define(\"ha-paper-dialog\", HaPaperDialog);\n","import {\n  LitElement,\n  html,\n  css,\n  CSSResult,\n  TemplateResult,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable\";\nimport \"@polymer/paper-input/paper-input\";\n\nimport \"../../../components/dialog/ha-paper-dialog\";\nimport \"../../../components/ha-switch\";\n\nimport { EntityRegistryDetailDialogParams } from \"./show-dialog-entity-registry-detail\";\nimport { PolymerChangedEvent } from \"../../../polymer-types\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\n// tslint:disable-next-line: no-duplicate-imports\nimport { HaSwitch } from \"../../../components/ha-switch\";\n\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport {\n  updateEntityRegistryEntry,\n  removeEntityRegistryEntry,\n} from \"../../../data/entity_registry\";\n\nclass DialogEntityRegistryDetail extends LitElement {\n  @property() public hass!: HomeAssistant;\n  @property() private _name!: string;\n  @property() private _platform!: string;\n  @property() private _entityId!: string;\n  @property() private _disabledBy!: string | null;\n  @property() private _error?: string;\n  @property() private _params?: EntityRegistryDetailDialogParams;\n  @property() private _submitting?: boolean;\n  private _origEntityId!: string;\n\n  public async showDialog(\n    params: EntityRegistryDetailDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    this._name = this._params.entry.name || \"\";\n    this._platform = this._params.entry.platform;\n    this._origEntityId = this._params.entry.entity_id;\n    this._entityId = this._params.entry.entity_id;\n    this._disabledBy = this._params.entry.disabled_by;\n    await this.updateComplete;\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this._params) {\n      return html``;\n    }\n    const entry = this._params.entry;\n    const stateObj: HassEntity | undefined = this.hass.states[entry.entity_id];\n    const invalidDomainUpdate =\n      computeDomain(this._entityId.trim()) !==\n      computeDomain(this._params.entry.entity_id);\n\n    return html`\n      <ha-paper-dialog\n        with-backdrop\n        opened\n        @opened-changed=\"${this._openedChanged}\"\n      >\n        <h2>\n          ${stateObj\n            ? computeStateName(stateObj)\n            : entry.name || entry.entity_id}\n        </h2>\n        <paper-dialog-scrollable>\n          ${!stateObj\n            ? html`\n                <div>\n                  ${this.hass!.localize(\n                    \"ui.panel.config.entity_registry.editor.unavailable\"\n                  )}\n                </div>\n              `\n            : \"\"}\n          ${this._error\n            ? html`\n                <div class=\"error\">${this._error}</div>\n              `\n            : \"\"}\n          <div class=\"form\">\n            <paper-input\n              .value=${this._name}\n              @value-changed=${this._nameChanged}\n              .label=${this.hass.localize(\"ui.dialogs.more_info_settings.name\")}\n              .placeholder=${stateObj ? computeStateName(stateObj) : \"\"}\n              .disabled=${this._submitting}\n            ></paper-input>\n            <paper-input\n              .value=${this._entityId}\n              @value-changed=${this._entityIdChanged}\n              .label=${this.hass.localize(\n                \"ui.dialogs.more_info_settings.entity_id\"\n              )}\n              error-message=\"Domain needs to stay the same\"\n              .invalid=${invalidDomainUpdate}\n              .disabled=${this._submitting}\n            ></paper-input>\n            <div class=\"row\">\n              <ha-switch\n                .checked=${!this._disabledBy}\n                @change=${this._disabledByChanged}\n              >\n                <div>\n                  <div>\n                    ${this.hass.localize(\n                      \"ui.panel.config.entity_registry.editor.enabled_label\"\n                    )}\n                  </div>\n                  <div class=\"secondary\">\n                    ${this._disabledBy && this._disabledBy !== \"user\"\n                      ? this.hass.localize(\n                          \"ui.panel.config.entity_registry.editor.enabled_cause\",\n                          \"cause\",\n                          this.hass.localize(\n                            `config_entry.disabled_by.${this._disabledBy}`\n                          )\n                        )\n                      : \"\"}\n                    ${this.hass.localize(\n                      \"ui.panel.config.entity_registry.editor.enabled_description\"\n                    )}\n                    <br />Note: this might not work yet with all integrations.\n                  </div>\n                </div>\n              </ha-switch>\n            </div>\n          </div>\n        </paper-dialog-scrollable>\n        <div class=\"paper-dialog-buttons\">\n          <mwc-button\n            class=\"warning\"\n            @click=\"${this._deleteEntry}\"\n            .disabled=${this._submitting}\n          >\n            ${this.hass.localize(\n              \"ui.panel.config.entity_registry.editor.delete\"\n            )}\n          </mwc-button>\n          <mwc-button\n            @click=\"${this._updateEntry}\"\n            .disabled=${invalidDomainUpdate || this._submitting}\n          >\n            ${this.hass.localize(\n              \"ui.panel.config.entity_registry.editor.update\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-paper-dialog>\n    `;\n  }\n\n  private _nameChanged(ev: PolymerChangedEvent<string>): void {\n    this._error = undefined;\n    this._name = ev.detail.value;\n  }\n\n  private _entityIdChanged(ev: PolymerChangedEvent<string>): void {\n    this._error = undefined;\n    this._entityId = ev.detail.value;\n  }\n\n  private async _updateEntry(): Promise<void> {\n    this._submitting = true;\n    try {\n      await updateEntityRegistryEntry(this.hass!, this._origEntityId, {\n        name: this._name.trim() || null,\n        disabled_by: this._disabledBy,\n        new_entity_id: this._entityId.trim(),\n      });\n      this._params = undefined;\n    } catch (err) {\n      this._error = err.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _deleteEntry(): Promise<void> {\n    if (\n      !confirm(\n        `${this.hass.localize(\n          \"ui.panel.config.entity_registry.editor.confirm_delete\"\n        )}\n\n${this.hass.localize(\n  \"ui.panel.config.entity_registry.editor.confirm_delete2\",\n  \"platform\",\n  this._platform\n)}`\n      )\n    ) {\n      return;\n    }\n\n    this._submitting = true;\n\n    try {\n      await removeEntityRegistryEntry(this.hass!, this._entityId);\n      this._params = undefined;\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>): void {\n    if (!(ev.detail as any).value) {\n      this._params = undefined;\n    }\n  }\n  private _disabledByChanged(ev: Event): void {\n    this._disabledBy = (ev.target as HaSwitch).checked ? null : \"user\";\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-paper-dialog {\n          min-width: 400px;\n          max-width: 450px;\n        }\n        .form {\n          padding-bottom: 24px;\n        }\n        mwc-button.warning {\n          margin-right: auto;\n        }\n        .error {\n          color: var(--google-red-500);\n        }\n        .row {\n          margin-top: 8px;\n          color: var(--primary-text-color);\n        }\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-entity-registry-detail\": DialogEntityRegistryDetail;\n  }\n}\n\ncustomElements.define(\n  \"dialog-entity-registry-detail\",\n  DialogEntityRegistryDetail\n);\n"],"sourceRoot":""}