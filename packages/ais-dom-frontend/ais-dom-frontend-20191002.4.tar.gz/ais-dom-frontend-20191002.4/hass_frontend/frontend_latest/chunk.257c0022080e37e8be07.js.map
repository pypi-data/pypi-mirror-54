{"version":3,"sources":["webpack:///./src/resources/ha-chart-scripts.js"],"names":["__webpack_require__","r","__webpack_exports__","chart_js__WEBPACK_IMPORTED_MODULE_0__","chart_js__WEBPACK_IMPORTED_MODULE_0___default","n","a","Interaction","modes","neareach","chart","e","options","getRange","x","b","Math","abs","y","xy","pow","position","native","helpers","getRelativePosition","elements","elementsRange","datasets","data","meta","axis","rangeFunc","rangeMaxFunc","i","ilen","length","isDatasetVisible","j","jlen","getDatasetMeta","element","_view","skip","vm","range","oldRange","radius","hitRadius","undefined","filter"],"mappings":"uFAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,KAAAI,EAAAJ,EAAAK,EAAAF,GAAAH,EAAA,KAKAI,EAAAE,EAAKC,YAAAC,MAAAC,SAAA,SAAAC,EAAAC,EAAAC,GACL,MAAAC,EAAA,CACAC,EAAA,CAAAR,EAAAS,IAAAC,KAAAC,IAAAX,EAAAQ,EAAAC,EAAAD,GACAI,EAAA,CAAAZ,EAAAS,IAAAC,KAAAC,IAAAX,EAAAY,EAAAH,EAAAG,GAEAC,GAAA,CAAAb,EAAAS,IAAAC,KAAAI,IAAAd,EAAAQ,EAAAC,EAAAD,EAAA,GAAAE,KAAAI,IAAAd,EAAAY,EAAAH,EAAAG,EAAA,IAOA,IAAAG,EAEAA,EADAV,EAAAW,OACA,CACAR,EAAAH,EAAAG,EACAI,EAAAP,EAAAO,GAGed,EAAAE,EAAKiB,QAAAC,oBAAAb,EAAAD,GAEpB,MAAAe,EAAA,GACAC,EAAA,GACAC,EAAAjB,EAAAkB,KAAAD,SACA,IAAAE,EACAjB,EAAAkB,KAAAlB,EAAAkB,MAAA,KACA,MAAAC,EAAAlB,EAAAD,EAAAkB,MACAE,EApBA,CACAlB,EAAAb,KACAiB,EAAAjB,KACAkB,GAAAlB,QAiBAW,EAAAkB,MAEA,QAAAG,EAAA,EAAAC,EAAAP,EAAAQ,OAAyCF,EAAAC,IAAUD,EACnD,GAAAvB,EAAA0B,iBAAAH,GAKA,QAAAI,EAAA,EAAAC,GADAT,EAAAnB,EAAA6B,eAAAN,IACAL,KAAAO,OAA4CE,EAAAC,IAAUD,EAAA,CACtD,MAAAG,EAAAX,EAAAD,KAAAS,GACA,IAAAG,EAAAC,MAAAC,KAAA,CACA,MAAAC,EAAAH,EAAAC,MACAG,EAAAb,EAAAY,EAAAtB,GACAwB,EAAAnB,EAAAO,GACAW,EAAAZ,EAAAW,EAAAG,OAAAH,EAAAI,kBACAC,IAAAH,KAAAD,KACAlB,EAAAO,GAAAW,EACAnB,EAAAQ,GAAAO,IAOA,OADAf,EAAAwB,OAAA5C,QAAA2C,IAAA3C,IAIeH,EAAA,QAAAE,EAAK","file":"chunk.257c0022080e37e8be07.js","sourcesContent":["import Chart from \"chart.js\";\nimport \"chartjs-chart-timeline\";\n\n// This function add a new interaction mode to Chart.js that\n// returns one point for every dataset.\nChart.Interaction.modes.neareach = function(chart, e, options) {\n  const getRange = {\n    x: (a, b) => Math.abs(a.x - b.x),\n    y: (a, b) => Math.abs(a.y - b.y),\n    // eslint-disable-next-line no-restricted-properties\n    xy: (a, b) => Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2),\n  };\n  const getRangeMax = {\n    x: (r) => r,\n    y: (r) => r,\n    xy: (r) => r * r,\n  };\n  let position;\n  if (e.native) {\n    position = {\n      x: e.x,\n      y: e.y,\n    };\n  } else {\n    position = Chart.helpers.getRelativePosition(e, chart);\n  }\n  const elements = [];\n  const elementsRange = [];\n  const datasets = chart.data.datasets;\n  let meta;\n  options.axis = options.axis || \"xy\";\n  const rangeFunc = getRange[options.axis];\n  const rangeMaxFunc = getRangeMax[options.axis];\n\n  for (let i = 0, ilen = datasets.length; i < ilen; ++i) {\n    if (!chart.isDatasetVisible(i)) {\n      continue;\n    }\n\n    meta = chart.getDatasetMeta(i);\n    for (let j = 0, jlen = meta.data.length; j < jlen; ++j) {\n      const element = meta.data[j];\n      if (!element._view.skip) {\n        const vm = element._view;\n        const range = rangeFunc(vm, position);\n        const oldRange = elementsRange[i];\n        if (range < rangeMaxFunc(vm.radius + vm.hitRadius)) {\n          if (oldRange === undefined || oldRange > range) {\n            elementsRange[i] = range;\n            elements[i] = element;\n          }\n        }\n      }\n    }\n  }\n  const ret = elements.filter((n) => n !== undefined);\n  return ret;\n};\n\nexport default Chart;\n"],"sourceRoot":""}