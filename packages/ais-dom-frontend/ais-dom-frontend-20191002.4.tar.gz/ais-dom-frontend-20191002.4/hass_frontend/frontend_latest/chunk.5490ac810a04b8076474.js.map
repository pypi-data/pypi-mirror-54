{"version":3,"sources":["webpack:///./src/components/ha-switch.ts","webpack:///./src/components/dialog/ha-iron-focusables-helper.js","webpack:///./src/components/dialog/ha-paper-dialog.ts","webpack:///./src/dialogs/config-entry-system-options/dialog-config-entry-system-options.ts"],"names":["MwcSwitch","customElements","get","HaSwitch","[object Object]","super","firstUpdated","this","style","setProperty","classList","toggle","Boolean","_slot","assignedNodes","length","styles","_material_mwc_switch_mwc_switch_css__WEBPACK_IMPORTED_MODULE_3__","lit_element__WEBPACK_IMPORTED_MODULE_1__","Object","tslib__WEBPACK_IMPORTED_MODULE_0__","HaIronFocusablesHelper","getTabbableNodes","node","result","_collectTabbableNodes","iron_focusables_helper","_sortByTabIndex","nodeType","Node","ELEMENT_NODE","_isVisible","children","element","tabIndex","_normalizedTabIndex","needsSort","push","localName","polymer_dom","getDistributedNodes","shadowRoot","root","i","paperDialogClass","haTabFixBehaviorImpl","_focusableNodes","define","legacy_class","DialogConfigEntrySystemOptions","params","_params","_error","undefined","_loading","systemOptions","_data_config_entries__WEBPACK_IMPORTED_MODULE_6__","hass","entry","entry_id","_disableNewEntities","disable_new_entities","updateComplete","_openedChanged","localize","_disableNewEntitiesChanged","_submitting","_updateEntry","ev","target","checked","err","message","detail","value","_resources_styles__WEBPACK_IMPORTED_MODULE_7__"],"mappings":";2HAMA,MAAMA,EAAYC,eAAeC,IAAI,cAGrC,IAAaC,EAAb,cAA8BH,EAGlBI,eACRC,MAAMC,eACNC,KAAKC,MAAMC,YAAY,wBAAyB,wBAChDF,KAAKG,UAAUC,OACb,UACAC,QAAQL,KAAKM,MAAMC,gBAAgBC,SAI7BC,oBACR,MAAO,CACLC,EAAA,EACAC,EAAA;;;;;;;;;;;;;;;;;WAdWC,OAAAC,EAAA,EAAAD,CAAA,CAAdA,OAAAD,EAAA,EAAAC,CAAM,qCADIhB,EAAQgB,OAAAC,EAAA,EAAAD,CAAA,CADpBA,OAAAD,EAAA,EAAAC,CAAc,cACFhB,wECQN,MAAAkB,EAAA,CAQPC,iBAAA,SAAAC,GACA,IAAAC,EAAA,GAIA,OADAjB,KAAAkB,sBAAAF,EAAAC,GAEaE,EAAA,EAAoBC,gBAAAH,GAEjCA,GAYAC,sBAAA,SAAAF,EAAAC,GAEA,GACAD,EAAAK,WAAAC,KAAAC,eACOJ,EAAA,EAAoBK,WAAAR,GAE3B,SAEA,IAoBAS,EApBAC,EAA0C,EAC1CC,EAAmBR,EAAA,EAAoBS,oBAAAF,GACvCG,EAAAF,EAAA,EACAA,GAAA,GACAV,EAAAa,KAAAJ,GAkBAD,EADA,YAAAC,EAAAK,WAAA,SAAAL,EAAAK,UACiBnB,OAAAoB,EAAA,EAAApB,CAAGc,GAAAO,sBAKHrB,OAAAoB,EAAA,EAAApB,CAAGc,EAAAQ,YAAAR,EAAAS,MAAAT,GAAAD,SAGpB,QAAAW,EAAA,EAAmBA,EAAAX,EAAAjB,OAAqB4B,IAExCP,EAAA7B,KAAAkB,sBAAAO,EAAAW,GAAAnB,IAAAY,EAEA,OAAAA,ICjFMQ,EAAmB3C,eAAeC,IAAI,gBAGtC2C,EAAuB,CAC3BC,sBACE,OAAOzB,EAAuBC,iBAAiBf,QAgBnDN,eAAe8C,OAAO,kBATf,cACG5B,OAAA6B,EAAA,EAAA7B,CAAe,CAAC0B,GAAuBD,gHCQjD,IAAMK,EAAN,cAA6C/B,EAAA,EAQpCd,iBACL8C,GAEA3C,KAAK4C,QAAUD,EACf3C,KAAK6C,YAASC,EACd9C,KAAK+C,UAAW,EAChB,MAAMC,QAAsBpC,OAAAqC,EAAA,EAAArC,CAC1BZ,KAAKkD,KACLP,EAAOQ,MAAMC,UAEfpD,KAAK+C,UAAW,EAChB/C,KAAKqD,oBAAsBL,EAAcM,2BACnCtD,KAAKuD,eAGH1D,SACR,OAAKG,KAAK4C,QAIHjC,EAAA;;;;2BAIgBX,KAAKwD;;;YAGpBxD,KAAKkD,KAAKO,SAAS;;;YAGnBzD,KAAK+C,SACHpC,EAAA;;;;gBAKAA,EAAA;kBACIX,KAAK6C,OACHlC,EAAA;2CACuBX,KAAK6C;sBAE5B;;;gCAGY7C,KAAKqD;8BACPrD,KAAK0D;gCACH1D,KAAK2D;;;wBAGb3D,KAAKkD,KAAKO,SACV;;;wBAIAzD,KAAKkD,KAAKO,SACV;;;;;;UAObzD,KAAK+C,SAaJ,GAZApC,EAAA;;;4BAGgBX,KAAK4D;8BACH5D,KAAK2D;;oBAEf3D,KAAKkD,KAAKO,SACV;;;;;MArDP9C,EAAA,IA+DHd,2BAA2BgE,GACjC7D,KAAK6C,YAASC,EACd9C,KAAKqD,qBAAwBQ,EAAGC,OAAoBC,QAG9ClE,qBACNG,KAAK2D,aAAc,EACnB,UACQ/C,OAAAqC,EAAA,EAAArC,CACJZ,KAAKkD,KACLlD,KAAK4C,QAASO,MAAMC,SACpB,CACEE,qBAAsBtD,KAAKqD,sBAG/BrD,KAAK4C,aAAUE,EACf,MAAOkB,GACPhE,KAAK6C,OAASmB,EAAIC,SAAW,wBAE7BjE,KAAK2D,aAAc,GAIf9D,eAAegE,GACfA,EAAGK,OAAeC,QACtBnE,KAAK4C,aAAUE,GAInBrC,oBACE,MAAO,CACL2D,EAAA,EACAzD,EAAA;;;;;;;;;;;;;;;;;;;;;;;WAvHQC,OAAAC,EAAA,EAAAD,CAAA,CAAXA,OAAAD,EAAA,EAAAC,+BACWA,OAAAC,EAAA,EAAAD,CAAA,CAAXA,OAAAD,EAAA,EAAAC,8CACWA,OAAAC,EAAA,EAAAD,CAAA,CAAXA,OAAAD,EAAA,EAAAC,iCACWA,OAAAC,EAAA,EAAAD,CAAA,CAAXA,OAAAD,EAAA,EAAAC,kCACWA,OAAAC,EAAA,EAAAD,CAAA,CAAXA,OAAAD,EAAA,EAAAC,mCACWA,OAAAC,EAAA,EAAAD,CAAA,CAAXA,OAAAD,EAAA,EAAAC,sCANG8B,EAA8B9B,OAAAC,EAAA,EAAAD,CAAA,CADnCA,OAAAD,EAAA,EAAAC,CAAc,uCACT8B","file":"chunk.5490ac810a04b8076474.js","sourcesContent":["import { Constructor, customElement, CSSResult, css, query } from \"lit-element\";\nimport \"@material/mwc-switch\";\nimport { style } from \"@material/mwc-switch/mwc-switch-css\";\n// tslint:disable-next-line\nimport { Switch } from \"@material/mwc-switch\";\n// tslint:disable-next-line\nconst MwcSwitch = customElements.get(\"mwc-switch\") as Constructor<Switch>;\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends MwcSwitch {\n  @query(\"slot\") private _slot!: HTMLSlotElement;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\"--mdc-theme-secondary\", \"var(--primary-color)\");\n    this.classList.toggle(\n      \"slotted\",\n      Boolean(this._slot.assignedNodes().length)\n    );\n  }\n\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        :host {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--paper-toggle-button-unchecked-button-color);\n          border-color: var(--paper-toggle-button-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--paper-toggle-button-unchecked-bar-color);\n          border-color: var(--paper-toggle-button-unchecked-bar-color);\n        }\n        :host(.slotted) .mdc-switch {\n          margin-right: 24px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/*\n  Fixes issue with not using shadow dom properly in iron-overlay-behavior/icon-focusables-helper.js\n*/\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\n\nimport { IronFocusablesHelper } from \"@polymer/iron-overlay-behavior/iron-focusables-helper.js\";\n\nexport const HaIronFocusablesHelper = {\n  /**\n   * Returns a sorted array of tabbable nodes, including the root node.\n   * It searches the tabbable nodes in the light and shadow dom of the chidren,\n   * sorting the result by tabindex.\n   * @param {!Node} node\n   * @return {!Array<!HTMLElement>}\n   */\n  getTabbableNodes: function(node) {\n    var result = [];\n    // If there is at least one element with tabindex > 0, we need to sort\n    // the final array by tabindex.\n    var needsSortByTabIndex = this._collectTabbableNodes(node, result);\n    if (needsSortByTabIndex) {\n      return IronFocusablesHelper._sortByTabIndex(result);\n    }\n    return result;\n  },\n\n  /**\n   * Searches for nodes that are tabbable and adds them to the `result` array.\n   * Returns if the `result` array needs to be sorted by tabindex.\n   * @param {!Node} node The starting point for the search; added to `result`\n   * if tabbable.\n   * @param {!Array<!HTMLElement>} result\n   * @return {boolean}\n   * @private\n   */\n  _collectTabbableNodes: function(node, result) {\n    // If not an element or not visible, no need to explore children.\n    if (\n      node.nodeType !== Node.ELEMENT_NODE ||\n      !IronFocusablesHelper._isVisible(node)\n    ) {\n      return false;\n    }\n    var element = /** @type {!HTMLElement} */ (node);\n    var tabIndex = IronFocusablesHelper._normalizedTabIndex(element);\n    var needsSort = tabIndex > 0;\n    if (tabIndex >= 0) {\n      result.push(element);\n    }\n\n    // In ShadowDOM v1, tab order is affected by the order of distrubution.\n    // E.g. getTabbableNodes(#root) in ShadowDOM v1 should return [#A, #B];\n    // in ShadowDOM v0 tab order is not affected by the distrubution order,\n    // in fact getTabbableNodes(#root) returns [#B, #A].\n    //  <div id=\"root\">\n    //   <!-- shadow -->\n    //     <slot name=\"a\">\n    //     <slot name=\"b\">\n    //   <!-- /shadow -->\n    //   <input id=\"A\" slot=\"a\">\n    //   <input id=\"B\" slot=\"b\" tabindex=\"1\">\n    //  </div>\n    // TODO(valdrin) support ShadowDOM v1 when upgrading to Polymer v2.0.\n    var children;\n    if (element.localName === \"content\" || element.localName === \"slot\") {\n      children = dom(element).getDistributedNodes();\n    } else {\n      // /////////////////////////\n      // Use shadow root if possible, will check for distributed nodes.\n      // THIS IS THE CHANGED LINE\n      children = dom(element.shadowRoot || element.root || element).children;\n      // /////////////////////////\n    }\n    for (var i = 0; i < children.length; i++) {\n      // Ensure method is always invoked to collect tabbable children.\n      needsSort = this._collectTabbableNodes(children[i], result) || needsSort;\n    }\n    return needsSort;\n  },\n};\n","import \"@polymer/paper-dialog/paper-dialog\";\nimport { mixinBehaviors } from \"@polymer/polymer/lib/legacy/class\";\nimport { HaIronFocusablesHelper } from \"./ha-iron-focusables-helper.js\";\n// tslint:disable-next-line\nimport { PaperDialogElement } from \"@polymer/paper-dialog/paper-dialog\";\n\nconst paperDialogClass = customElements.get(\"paper-dialog\");\n\n// behavior that will override existing iron-overlay-behavior and call the fixed implementation\nconst haTabFixBehaviorImpl = {\n  get _focusableNodes() {\n    return HaIronFocusablesHelper.getTabbableNodes(this);\n  },\n};\n\n// paper-dialog that uses the haTabFixBehaviorImpl behvaior\n// export class HaPaperDialog extends paperDialogClass {}\n// @ts-ignore\nexport class HaPaperDialog\n  extends mixinBehaviors([haTabFixBehaviorImpl], paperDialogClass)\n  implements PaperDialogElement {}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-paper-dialog\": HaPaperDialog;\n  }\n}\ncustomElements.define(\"ha-paper-dialog\", HaPaperDialog);\n","import {\n  LitElement,\n  html,\n  css,\n  CSSResult,\n  TemplateResult,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable\";\nimport \"@polymer/paper-input/paper-input\";\n\nimport \"../../components/dialog/ha-paper-dialog\";\nimport \"../../components/ha-switch\";\n\nimport { HomeAssistant } from \"../../types\";\nimport { ConfigEntrySystemOptionsDialogParams } from \"./show-dialog-config-entry-system-options\";\nimport {\n  getConfigEntrySystemOptions,\n  updateConfigEntrySystemOptions,\n} from \"../../data/config_entries\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { haStyleDialog } from \"../../resources/styles\";\n// tslint:disable-next-line: no-duplicate-imports\nimport { HaSwitch } from \"../../components/ha-switch\";\n\n@customElement(\"dialog-config-entry-system-options\")\nclass DialogConfigEntrySystemOptions extends LitElement {\n  @property() public hass!: HomeAssistant;\n  @property() private _disableNewEntities!: boolean;\n  @property() private _error?: string;\n  @property() private _params?: ConfigEntrySystemOptionsDialogParams;\n  @property() private _loading?: boolean;\n  @property() private _submitting?: boolean;\n\n  public async showDialog(\n    params: ConfigEntrySystemOptionsDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    this._loading = true;\n    const systemOptions = await getConfigEntrySystemOptions(\n      this.hass,\n      params.entry.entry_id\n    );\n    this._loading = false;\n    this._disableNewEntities = systemOptions.disable_new_entities;\n    await this.updateComplete;\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this._params) {\n      return html``;\n    }\n\n    return html`\n      <ha-paper-dialog\n        with-backdrop\n        opened\n        @opened-changed=\"${this._openedChanged}\"\n      >\n        <h2>\n          ${this.hass.localize(\"ui.dialogs.config_entry_system_options.title\")}\n        </h2>\n        <paper-dialog-scrollable>\n          ${this._loading\n            ? html`\n                <div class=\"init-spinner\">\n                  <paper-spinner-lite active></paper-spinner-lite>\n                </div>\n              `\n            : html`\n                ${this._error\n                  ? html`\n                      <div class=\"error\">${this._error}</div>\n                    `\n                  : \"\"}\n                <div class=\"form\">\n                  <ha-switch\n                    .checked=${!this._disableNewEntities}\n                    @change=${this._disableNewEntitiesChanged}\n                    .disabled=${this._submitting}\n                  >\n                    <div>\n                      ${this.hass.localize(\n                        \"ui.dialogs.config_entry_system_options.enable_new_entities_label\"\n                      )}\n                    </div>\n                    <div class=\"secondary\">\n                      ${this.hass.localize(\n                        \"ui.dialogs.config_entry_system_options.enable_new_entities_description\"\n                      )}\n                    </div>\n                  </ha-switch>\n                </div>\n              `}\n        </paper-dialog-scrollable>\n        ${!this._loading\n          ? html`\n              <div class=\"paper-dialog-buttons\">\n                <mwc-button\n                  @click=\"${this._updateEntry}\"\n                  .disabled=${this._submitting}\n                >\n                  ${this.hass.localize(\n                    \"ui.panel.config.entity_registry.editor.update\"\n                  )}\n                </mwc-button>\n              </div>\n            `\n          : \"\"}\n      </ha-paper-dialog>\n    `;\n  }\n\n  private _disableNewEntitiesChanged(ev: Event): void {\n    this._error = undefined;\n    this._disableNewEntities = !(ev.target as HaSwitch).checked;\n  }\n\n  private async _updateEntry(): Promise<void> {\n    this._submitting = true;\n    try {\n      await updateConfigEntrySystemOptions(\n        this.hass,\n        this._params!.entry.entry_id,\n        {\n          disable_new_entities: this._disableNewEntities,\n        }\n      );\n      this._params = undefined;\n    } catch (err) {\n      this._error = err.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>): void {\n    if (!(ev.detail as any).value) {\n      this._params = undefined;\n    }\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-paper-dialog {\n          min-width: 400px;\n          max-width: 500px;\n        }\n        .init-spinner {\n          padding: 50px 100px;\n          text-align: center;\n        }\n\n        .form {\n          padding-top: 6px;\n          padding-bottom: 24px;\n          color: var(--primary-text-color);\n        }\n\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n\n        .error {\n          color: var(--google-red-500);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-config-entry-system-options\": DialogConfigEntrySystemOptions;\n  }\n}\n"],"sourceRoot":""}