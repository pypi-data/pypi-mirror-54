{"version":3,"sources":["webpack:///./src/util/custom-panel/load-custom-panel.ts","webpack:///./src/util/custom-panel/create-custom-panel-element.ts","webpack:///./src/util/custom-panel/set-custom-panel-properties.ts","webpack:///./src/panels/custom/ha-panel-custom.ts","webpack:///./src/common/dom/load_resource.ts"],"names":["__webpack_require__","d","__webpack_exports__","loadCustomPanel","_common_dom_load_resource__WEBPACK_IMPORTED_MODULE_0__","JS_CACHE","panelConfig","html_url","toLoad","e","then","bind","embed_iframe","push","Promise","all","importHrefPromise","js_url","Object","module_url","reject","createCustomPanelElement","tagName","name","document","createElement","setCustomPanelProperties","root","properties","setProperties","keys","forEach","key","HaPanelCustom","lit_element__WEBPACK_IMPORTED_MODULE_1__","[object Object]","this","navigate","path","replace","_common_navigate__WEBPACK_IMPORTED_MODULE_5__","initialize","panel","hass","narrow","route","_setProperties","super","disconnectedCallback","_cleanupPanel","changedProps","has","get","_createPanel","props","window","customPanel","undefined","lastChild","removeChild","config","_panel_custom","tempA","href","trust_external","location","hostname","includes","confirm","_util_custom_panel_load_custom_panel__WEBPACK_IMPORTED_MODULE_2__","element","_util_custom_panel_create_custom_panel_element__WEBPACK_IMPORTED_MODULE_3__","_util_custom_panel_set_custom_panel_properties__WEBPACK_IMPORTED_MODULE_4__","appendChild","alert","innerHTML","trim","iframeDoc","querySelector","contentWindow","open","write","customPanelJS","close","tslib__WEBPACK_IMPORTED_MODULE_0__","customElements","define","loadCSS","loadJS","loadModule","_load","tag","url","type","resolve","attr","parent","onload","onerror","async","rel"],"mappings":"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","file":"chunk.3f4e0d93ad092ddedc87.js","sourcesContent":["import { loadJS, loadModule } from \"../../common/dom/load_resource\";\n\n// Make sure we only import every JS-based panel once (HTML import has this built-in)\nconst JS_CACHE = {};\n\nexport const loadCustomPanel = (panelConfig): Promise<unknown> => {\n  if (panelConfig.html_url) {\n    const toLoad = [\n      import(/* webpackChunkName: \"import-href-polyfill\" */ \"../../resources/html-import/import-href\"),\n    ];\n\n    if (!panelConfig.embed_iframe) {\n      toLoad.push(\n        import(/* webpackChunkName: \"legacy-support\" */ \"../legacy-support\")\n      );\n    }\n\n    return Promise.all(toLoad).then(([{ importHrefPromise }]) =>\n      importHrefPromise(panelConfig.html_url)\n    );\n  }\n  if (panelConfig.js_url) {\n    if (!(panelConfig.js_url in JS_CACHE)) {\n      JS_CACHE[panelConfig.js_url] = loadJS(panelConfig.js_url);\n    }\n    return JS_CACHE[panelConfig.js_url];\n  }\n  if (panelConfig.module_url) {\n    return loadModule(panelConfig.module_url);\n  }\n  return Promise.reject(\"No valid url found in panel config.\");\n};\n","export const createCustomPanelElement = (panelConfig) => {\n  // Legacy support. Custom panels used to have to define element ha-panel-{name}\n  const tagName =\n    \"html_url\" in panelConfig\n      ? `ha-panel-${panelConfig.name}`\n      : panelConfig.name;\n  return document.createElement(tagName);\n};\n","export const setCustomPanelProperties = (root, properties) => {\n  if (\"setProperties\" in root) {\n    root.setProperties(properties);\n  } else {\n    Object.keys(properties).forEach((key) => {\n      root[key] = properties[key];\n    });\n  }\n};\n","import { property, PropertyValues, UpdatingElement } from \"lit-element\";\nimport { loadCustomPanel } from \"../../util/custom-panel/load-custom-panel\";\nimport { createCustomPanelElement } from \"../../util/custom-panel/create-custom-panel-element\";\nimport { setCustomPanelProperties } from \"../../util/custom-panel/set-custom-panel-properties\";\nimport { HomeAssistant, Route } from \"../../types\";\nimport { CustomPanelInfo } from \"../../data/panel_custom\";\nimport { navigate } from \"../../common/navigate\";\n\ndeclare global {\n  interface Window {\n    customPanel: HaPanelCustom | undefined;\n  }\n}\n\nexport class HaPanelCustom extends UpdatingElement {\n  @property() public hass!: HomeAssistant;\n  @property() public narrow!: boolean;\n  @property() public route!: Route;\n  @property() public panel!: CustomPanelInfo;\n  private _setProperties?: (props: {}) => void | undefined;\n\n  // Since navigate fires events on `window`, we need to expose this as a function\n  // to allow custom panels to forward their location changes to the main window\n  // instead of their iframe window.\n  public navigate = (path: string, replace?: boolean) =>\n    navigate(this, path, replace);\n\n  public registerIframe(initialize, setProperties) {\n    initialize(this.panel, {\n      hass: this.hass,\n      narrow: this.narrow,\n      route: this.route,\n    });\n    this._setProperties = setProperties;\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    this._cleanupPanel();\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (changedProps.has(\"panel\")) {\n      // Clean up old things if we had a panel\n      if (changedProps.get(\"panel\")) {\n        this._cleanupPanel();\n      }\n      this._createPanel(this.panel);\n      return;\n    }\n    if (!this._setProperties) {\n      return;\n    }\n    const props = {};\n    // @ts-ignore\n    for (const key of changedProps.keys()) {\n      props[key] = this[key];\n    }\n    this._setProperties(props);\n  }\n\n  private _cleanupPanel() {\n    delete window.customPanel;\n    this._setProperties = undefined;\n    while (this.lastChild) {\n      this.removeChild(this.lastChild);\n    }\n  }\n\n  private _createPanel(panel: CustomPanelInfo) {\n    const config = panel.config!._panel_custom;\n\n    const tempA = document.createElement(\"a\");\n    tempA.href = config.html_url || config.js_url || config.module_url || \"\";\n\n    if (\n      !config.trust_external &&\n      ![\"localhost\", \"127.0.0.1\", location.hostname].includes(tempA.hostname)\n    ) {\n      if (\n        !confirm(`Do you trust the external panel \"${config.name}\" at \"${\n          tempA.href\n        }\"?\n\nIt will have access to all data in Home Assistant.\n\n(Check docs for the panel_custom component to hide this message)`)\n      ) {\n        return;\n      }\n    }\n\n    if (!config.embed_iframe) {\n      loadCustomPanel(config).then(\n        () => {\n          const element = createCustomPanelElement(config);\n          this._setProperties = (props) =>\n            setCustomPanelProperties(element, props);\n          setCustomPanelProperties(element, {\n            panel,\n            hass: this.hass,\n            narrow: this.narrow,\n            route: this.route,\n          });\n          this.appendChild(element);\n        },\n        () => {\n          alert(`Unable to load custom panel from ${tempA.href}`);\n        }\n      );\n      return;\n    }\n\n    window.customPanel = this;\n    this.innerHTML = `\n    <style>\n      iframe {\n        border: 0;\n        width: 100%;\n        height: 100%;\n        display: block;\n      }\n    </style>\n    <iframe></iframe>\n    `.trim();\n    const iframeDoc = this.querySelector(\"iframe\")!.contentWindow!.document;\n    iframeDoc.open();\n    iframeDoc.write(\n      `<!doctype html><script src='${window.customPanelJS}'></script>`\n    );\n    iframeDoc.close();\n  }\n}\n\ncustomElements.define(\"ha-panel-custom\", HaPanelCustom);\n","// Load a resource and get a promise when loading done.\n// From: https://davidwalsh.name/javascript-loader\n\nconst _load = (\n  tag: \"link\" | \"script\" | \"img\",\n  url: string,\n  type?: \"module\"\n) => {\n  // This promise will be used by Promise.all to determine success or failure\n  return new Promise((resolve, reject) => {\n    const element = document.createElement(tag);\n    let attr = \"src\";\n    let parent = \"body\";\n\n    // Important success and error for the promise\n    element.onload = () => resolve(url);\n    element.onerror = () => reject(url);\n\n    // Need to set different attributes depending on tag type\n    switch (tag) {\n      case \"script\":\n        (element as HTMLScriptElement).async = true;\n        if (type) {\n          (element as HTMLScriptElement).type = type;\n        }\n        break;\n      case \"link\":\n        (element as HTMLLinkElement).type = \"text/css\";\n        (element as HTMLLinkElement).rel = \"stylesheet\";\n        attr = \"href\";\n        parent = \"head\";\n    }\n\n    // Inject into document to kick off loading\n    element[attr] = url;\n    document[parent].appendChild(element);\n  });\n};\n\nexport const loadCSS = (url: string) => _load(\"link\", url);\nexport const loadJS = (url: string) => _load(\"script\", url);\nexport const loadImg = (url: string) => _load(\"img\", url);\nexport const loadModule = (url: string) => _load(\"script\", url, \"module\");\n"],"sourceRoot":""}