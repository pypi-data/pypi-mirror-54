{"version":3,"sources":["webpack:///./src/panels/config/cloud/alexa/cloud-alexa.ts"],"names":["IGNORE_INTERFACES","configIsExposed","config","undefined","should_expose","_super","CloudAlexa","_this","apply","this","arguments","_entityConfigs","_popstateSyncAttached","_popstateReloadStatusAttached","_getEntityFilterFunc","Object","memoize_one__WEBPACK_IMPORTED_MODULE_3__","filter","_common_entity_entity_filter__WEBPACK_IMPORTED_MODULE_10__","include_domains","include_entities","exclude_domains","exclude_entities","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","render","_entities","lit_element__WEBPACK_IMPORTED_MODULE_1__","templateObject_1","emptyFilter","cloudStatus","alexa_entities","filterFunc","showInExposed","_isInitialExposed","Set","trackExposed","selected","exposedCards","notExposedCards","forEach","entity","stateObj","hass","states","entity_id","isExposed","add","has","push","templateObject_2","_showMoreInfo","interfaces","ifc","includes","map","replace","join","_exposeChanged","templateObject_8","narrow","templateObject_3","templateObject_4","_openDomainToggler","templateObject_5","length","templateObject_6","templateObject_7","firstUpdated","changedProps","call","_fetchData","updated","prefs","alexa_entity_configs","_data_alexa__WEBPACK_IMPORTED_MODULE_14__","entities","_a","sent","sort","a","b","stateA","stateB","_common_string_compare__WEBPACK_IMPORTED_MODULE_11__","_common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_15__","ev","entityId","currentTarget","_common_dom_fire_event__WEBPACK_IMPORTED_MODULE_12__","newExposed","target","checked","_updateExposed","curExposed","_updateConfig","_ensureEntitySync","values","_data_cloud__WEBPACK_IMPORTED_MODULE_9__","updatedConfig","_b","_ensureStatusReload","_dialogs_domain_toggler_show_dialog_domain_toggler__WEBPACK_IMPORTED_MODULE_13__","domains","_common_entity_compute_domain__WEBPACK_IMPORTED_MODULE_16__","value","idx","self","indexOf","toggleDomain","domain","turnOn","parent","parentElement","window","addEventListener","once","defineProperty","templateObject_9","type","Boolean"],"mappings":"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","file":"chunk.ba980fe82274ba25cdcc.js","sourcesContent":["import {\n  LitElement,\n  TemplateResult,\n  html,\n  CSSResult,\n  css,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-icon-button\";\nimport memoizeOne from \"memoize-one\";\n\nimport \"../../../../layouts/hass-subpage\";\nimport \"../../../../layouts/hass-loading-screen\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-switch\";\nimport \"../../../../components/entity/state-info\";\n\nimport { HomeAssistant } from \"../../../../types\";\nimport {\n  CloudStatusLoggedIn,\n  CloudPreferences,\n  updateCloudAlexaEntityConfig,\n  AlexaEntityConfig,\n} from \"../../../../data/cloud\";\nimport {\n  generateFilter,\n  isEmptyFilter,\n  EntityFilter,\n} from \"../../../../common/entity/entity_filter\";\nimport { compare } from \"../../../../common/string/compare\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { showDomainTogglerDialog } from \"../../../../dialogs/domain-toggler/show-dialog-domain-toggler\";\nimport { AlexaEntity, fetchCloudAlexaEntities } from \"../../../../data/alexa\";\n// tslint:disable-next-line: no-duplicate-imports\nimport { HaSwitch } from \"../../../../components/ha-switch\";\n\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\n\nconst DEFAULT_CONFIG_EXPOSE = true;\nconst IGNORE_INTERFACES = [\"Alexa.EndpointHealth\"];\n\nconst configIsExposed = (config: AlexaEntityConfig) =>\n  config.should_expose === undefined\n    ? DEFAULT_CONFIG_EXPOSE\n    : config.should_expose;\n\n@customElement(\"cloud-alexa\")\nclass CloudAlexa extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property()\n  public cloudStatus!: CloudStatusLoggedIn;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property() private _entities?: AlexaEntity[];\n\n  @property()\n  private _entityConfigs: CloudPreferences[\"alexa_entity_configs\"] = {};\n  private _popstateSyncAttached = false;\n  private _popstateReloadStatusAttached = false;\n  private _isInitialExposed?: Set<string>;\n\n  private _getEntityFilterFunc = memoizeOne((filter: EntityFilter) =>\n    generateFilter(\n      filter.include_domains,\n      filter.include_entities,\n      filter.exclude_domains,\n      filter.exclude_entities\n    )\n  );\n\n  protected render(): TemplateResult | void {\n    if (this._entities === undefined) {\n      return html`\n        <hass-loading-screen></hass-loading-screen>\n      `;\n    }\n    const emptyFilter = isEmptyFilter(this.cloudStatus.alexa_entities);\n    const filterFunc = this._getEntityFilterFunc(\n      this.cloudStatus.alexa_entities\n    );\n\n    // We will only generate `isInitialExposed` during first render.\n    // On each subsequent render we will use the same set so that cards\n    // will not jump around when we change the exposed setting.\n    const showInExposed = this._isInitialExposed || new Set();\n    const trackExposed = this._isInitialExposed === undefined;\n\n    let selected = 0;\n\n    // On first render we decide which cards show in which category.\n    // That way cards won't jump around when changing values.\n    const exposedCards: TemplateResult[] = [];\n    const notExposedCards: TemplateResult[] = [];\n\n    this._entities.forEach((entity) => {\n      const stateObj = this.hass.states[entity.entity_id];\n      const config = this._entityConfigs[entity.entity_id] || {};\n      const isExposed = emptyFilter\n        ? configIsExposed(config)\n        : filterFunc(entity.entity_id);\n      if (isExposed) {\n        selected++;\n\n        if (trackExposed) {\n          showInExposed.add(entity.entity_id);\n        }\n      }\n\n      const target = showInExposed.has(entity.entity_id)\n        ? exposedCards\n        : notExposedCards;\n\n      target.push(html`\n        <ha-card>\n          <div class=\"card-content\">\n            <state-info\n              .hass=${this.hass}\n              .stateObj=${stateObj}\n              secondary-line\n              @click=${this._showMoreInfo}\n            >\n              ${entity.interfaces\n                .filter((ifc) => !IGNORE_INTERFACES.includes(ifc))\n                .map((ifc) =>\n                  ifc.replace(\"Alexa.\", \"\").replace(\"Controller\", \"\")\n                )\n                .join(\", \")}\n            </state-info>\n            <ha-switch\n              .entityId=${entity.entity_id}\n              .disabled=${!emptyFilter}\n              .checked=${isExposed}\n              @change=${this._exposeChanged}\n            >\n              Expose to Alexa\n            </ha-switch>\n          </div>\n        </ha-card>\n      `);\n    });\n\n    if (trackExposed) {\n      this._isInitialExposed = showInExposed;\n    }\n\n    return html`\n      <hass-subpage header=\"Alexa\">\n        <span slot=\"toolbar-icon\">\n          ${selected}${\n      !this.narrow\n        ? html`\n            selected\n          `\n        : \"\"\n    }\n        </span>\n        ${\n          emptyFilter\n            ? html`\n                <paper-icon-button\n                  slot=\"toolbar-icon\"\n                  icon=\"hass:tune\"\n                  @click=${this._openDomainToggler}\n                ></paper-icon-button>\n              `\n            : \"\"\n        }\n        ${\n          !emptyFilter\n            ? html`\n                <div class=\"banner\">\n                  Editing which entities are exposed via this UI is disabled\n                  because you have configured entity filters in\n                  configuration.yaml.\n                </div>\n              `\n            : \"\"\n        }\n          ${\n            exposedCards.length > 0\n              ? html`\n                  <h1>Exposed entities</h1>\n                  <div class=\"content\">${exposedCards}</div>\n                `\n              : \"\"\n          }\n          ${\n            notExposedCards.length > 0\n              ? html`\n                  <h1>Not Exposed entities</h1>\n                  <div class=\"content\">${notExposedCards}</div>\n                `\n              : \"\"\n          }\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._fetchData();\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"cloudStatus\")) {\n      this._entityConfigs = this.cloudStatus.prefs.alexa_entity_configs;\n    }\n  }\n\n  private async _fetchData() {\n    const entities = await fetchCloudAlexaEntities(this.hass);\n    entities.sort((a, b) => {\n      const stateA = this.hass.states[a.entity_id];\n      const stateB = this.hass.states[b.entity_id];\n      return compare(\n        stateA ? computeStateName(stateA) : a.entity_id,\n        stateB ? computeStateName(stateB) : b.entity_id\n      );\n    });\n    this._entities = entities;\n  }\n\n  private _showMoreInfo(ev) {\n    const entityId = ev.currentTarget.stateObj.entity_id;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  private async _exposeChanged(ev: Event) {\n    const entityId = (ev.currentTarget as any).entityId;\n    const newExposed = (ev.target as HaSwitch).checked;\n    await this._updateExposed(entityId, newExposed);\n  }\n\n  private async _updateExposed(entityId: string, newExposed: boolean) {\n    const curExposed = configIsExposed(this._entityConfigs[entityId] || {});\n    if (newExposed === curExposed) {\n      return;\n    }\n    await this._updateConfig(entityId, {\n      should_expose: newExposed,\n    });\n    this._ensureEntitySync();\n  }\n\n  private async _updateConfig(entityId: string, values: AlexaEntityConfig) {\n    const updatedConfig = await updateCloudAlexaEntityConfig(\n      this.hass,\n      entityId,\n      values\n    );\n    this._entityConfigs = {\n      ...this._entityConfigs,\n      [entityId]: updatedConfig,\n    };\n    this._ensureStatusReload();\n  }\n\n  private _openDomainToggler() {\n    showDomainTogglerDialog(this, {\n      domains: this._entities!.map((entity) =>\n        computeDomain(entity.entity_id)\n      ).filter((value, idx, self) => self.indexOf(value) === idx),\n      toggleDomain: (domain, turnOn) => {\n        this._entities!.forEach((entity) => {\n          if (computeDomain(entity.entity_id) === domain) {\n            this._updateExposed(entity.entity_id, turnOn);\n          }\n        });\n      },\n    });\n  }\n\n  private _ensureStatusReload() {\n    if (this._popstateReloadStatusAttached) {\n      return;\n    }\n    this._popstateReloadStatusAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => fireEvent(parent, \"ha-refresh-cloud-status\"),\n      { once: true }\n    );\n  }\n\n  private _ensureEntitySync() {\n    if (this._popstateSyncAttached) {\n      return;\n    }\n    this._popstateSyncAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    // const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => {\n        // We don't have anything yet.\n        // showToast(parent, { message: \"Synchronizing changes to Google.\" });\n        // cloudSyncGoogleAssistant(this.hass);\n      },\n      { once: true }\n    );\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .banner {\n        color: var(--primary-text-color);\n        background-color: var(\n          --ha-card-background,\n          var(--paper-card-background-color, white)\n        );\n        padding: 16px 8px;\n        text-align: center;\n      }\n      h1 {\n        color: var(--primary-text-color);\n        font-size: 24px;\n        letter-spacing: -0.012em;\n        margin-bottom: 0;\n        padding: 0 8px;\n      }\n      .content {\n        display: flex;\n        flex-wrap: wrap;\n        padding: 4px;\n      }\n      ha-switch {\n        clear: both;\n      }\n      ha-card {\n        margin: 4px;\n        width: 100%;\n        max-width: 300px;\n      }\n      .card-content {\n        padding-bottom: 12px;\n      }\n      state-info {\n        cursor: pointer;\n      }\n      ha-switch {\n        padding: 8px 0;\n      }\n\n      @media all and (max-width: 450px) {\n        ha-card {\n          max-width: 100%;\n        }\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"cloud-alexa\": CloudAlexa;\n  }\n}\n"],"sourceRoot":""}