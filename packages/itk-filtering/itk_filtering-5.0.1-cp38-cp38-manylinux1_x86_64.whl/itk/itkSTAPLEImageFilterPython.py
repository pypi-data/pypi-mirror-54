# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkSTAPLEImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkSTAPLEImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkSTAPLEImageFilterPython
            return _itkSTAPLEImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkSTAPLEImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkSTAPLEImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkSTAPLEImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import ITKCommonBasePython
import pyBasePython
import itkImagePython
import itkRGBAPixelPython
import itkFixedArrayPython
import itkOffsetPython
import itkSizePython
import itkIndexPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import itkPointPython
import vnl_vector_refPython
import itkVectorPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkRGBPixelPython
import itkImageRegionPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython

def itkSTAPLEImageFilterIF3IF3_New():
  return itkSTAPLEImageFilterIF3IF3.New()


def itkSTAPLEImageFilterIF2IF2_New():
  return itkSTAPLEImageFilterIF2IF2.New()

class itkSTAPLEImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """


    The STAPLE filter implements the Simultaneous Truth and Performance
    Level Estimation algorithm for generating ground truth volumes from a
    set of binary expert segmentations.

    The STAPLE algorithm treats segmentation as a pixelwise
    classification, which leads to an averaging scheme that accounts for
    systematic biases in the behavior of experts in order to generate a
    fuzzy ground truth volume and simultaneous accuracy assessment of each
    expert. The ground truth volumes produced by this filter are floating
    point volumes of values between zero and one that indicate probability
    of each pixel being in the object targeted by the segmentation.

    The STAPLE algorithm is described in

    S. Warfield, K. Zou, W. Wells, "Validation of image segmentation and
    expert quality with an expectation-maximization algorithm" in MICCAI
    2002: Fifth International Conference on Medical Image Computing and
    Computer-Assisted Intervention, Springer-Verlag, Heidelberg, Germany,
    2002, pp. 298-306

    INPUTS Input volumes to the STAPLE filter must be binary segmentations
    of an image, that is, there must be a single foreground value that
    represents positively classified pixels (pixels that are considered to
    belong inside the segmentation). Any number of background pixel values
    may be present in the labels as long as the structure you are
    interested in creating ground truth for is consistently labeled among
    all input volumes. Pixel type of the input volumes does not matter.
    Specify the label value for positively classified pixels using
    SetForegroundValue. All other labels will be considered to be
    negatively classified pixels (background).  Input volumes must all
    contain the same size RequestedRegions.

    OUTPUTS The STAPLE filter produces a single output volume with a range
    of floating point values from zero to one. IT IS VERY IMPORTANT TO
    INSTANTIATE THIS FILTER WITH A FLOATING POINT OUTPUT TYPE (floats or
    doubles). You may threshold the output above some probability
    threshold if you wish to produce a binary ground truth. PARAMETERS The
    STAPLE algorithm requires a number of inputs. You may specify any
    number of input volumes using the SetInput(i, p_i) method, where i
    ranges from zero to N-1, N is the total number of input segmentations,
    and p_i is the SmartPointer to the i-th segmentation.  The
    SetConfidenceWeight parameter is a modifier for the prior probability
    that any pixel would be classified as inside the target object. This
    implementation of the STAPLE algorithm automatically calculates prior
    positive classification probability as the average fraction of the
    image volume filled by the target object in each input segmentation.
    The ConfidenceWeight parameter allows for scaling the of this default
    prior probability: if g_t is the prior probability that a pixel would
    be classified inside the target object, then g_t is set to g_t *
    ConfidenceWeight before iterating on the solution. In general
    ConfidenceWeight should be left to the default of 1.0.

    You must provide a foreground value using SetForegroundValue that the
    STAPLE algorithm will use to identify positively classified pixels in
    the the input images. All other values in the image will be treated as
    background values. the segmented region, then use
    SetForegroundValue(1).

    The STAPLE algorithm is an iterative E-M algorithm and will converge
    on a solution after some number of iterations that cannot be known a
    priori. After updating the filter, the total elapsed iterations taken
    to converge on the solution can be queried through
    GetElapsedIterations(). You may also specify a
    MaximumNumberOfIterations, after which the algorithm will stop
    iterating regardless of whether or not it has converged. This
    implementation of the STAPLE algorithm will find the solution to
    within seven digits of precision unless it is stopped early.

    Once updated, the Sensitivity (true positive fraction, q) and
    Specificity (true negative fraction, q) for each expert input volume
    can be queried using GetSensitivity(i) and GetSpecificity(i), where i
    is the i-th input volume.

    REQUIRED PARAMETERS The only required parameters for this filter are
    the ForegroundValue and the input volumes. All other parameters may be
    safely left to their default values. Please see the paper cited above
    for more information on the STAPLE algorithm and its parameters. A
    proper understanding of the algorithm is important for interpreting
    the results that it produces. EVENTS This filter invokes
    IterationEvent() at each iteration of the E-M algorithm. Setting the
    AbortGenerateData() flag will cause the algorithm to halt after the
    current iteration and produce results just as if it had converged. The
    algorithm makes no attempt to report its progress since the number of
    iterations needed cannot be known in advance.

    C++ includes: itkSTAPLEImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSTAPLEImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkSTAPLEImageFilterIF2IF2_Pointer"""
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSTAPLEImageFilterIF2IF2_Pointer":
        """Clone(itkSTAPLEImageFilterIF2IF2 self) -> itkSTAPLEImageFilterIF2IF2_Pointer"""
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_Clone(self)


    def SetForegroundValue(self, _arg: 'float const') -> "void":
        """
        SetForegroundValue(itkSTAPLEImageFilterIF2IF2 self, float const _arg)

        Set get the
        binary ON value of the input image. 
        """
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_SetForegroundValue(self, _arg)


    def GetForegroundValue(self) -> "float":
        """GetForegroundValue(itkSTAPLEImageFilterIF2IF2 self) -> float"""
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_GetForegroundValue(self)


    def GetSensitivity(self, *args) -> "double":
        """
        GetSensitivity(itkSTAPLEImageFilterIF2IF2 self) -> vectorD
        GetSensitivity(itkSTAPLEImageFilterIF2IF2 self, unsigned int i) -> double

        After the filter is
        updated, this method returns the Sensitivity (true positive fraction,
        p) value for the i-th expert input volume. 
        """
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_GetSensitivity(self, *args)


    def GetSpecificity(self, *args) -> "double":
        """
        GetSpecificity(itkSTAPLEImageFilterIF2IF2 self) -> vectorD
        GetSpecificity(itkSTAPLEImageFilterIF2IF2 self, unsigned int i) -> double

        After the filter is
        updated, this method returns the Specificity (true negative fraction,
        q) value for the i-th expert input volume. 
        """
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_GetSpecificity(self, *args)


    def SetMaximumIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetMaximumIterations(itkSTAPLEImageFilterIF2IF2 self, unsigned int const _arg)

        Set/Get the
        maximum number of iterations after which the STAPLE algorithm will be
        considered to have converged. In general this SHOULD NOT be set and
        the algorithm should be allowed to converge on its own. 
        """
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_SetMaximumIterations(self, _arg)


    def GetMaximumIterations(self) -> "unsigned int":
        """GetMaximumIterations(itkSTAPLEImageFilterIF2IF2 self) -> unsigned int"""
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_GetMaximumIterations(self)


    def SetConfidenceWeight(self, _arg: 'double const') -> "void":
        """
        SetConfidenceWeight(itkSTAPLEImageFilterIF2IF2 self, double const _arg)

        Scales the
        estimated prior probability that a pixel will be inside the targeted
        object of segmentation. The default prior probability g_t is
        calculated automatically as the average fraction of positively
        classified pixels to the total size of the volume (across all input
        volumes). ConfidenceWeight will scale this default value as g_t = g_t
        * ConfidenceWeight. In general, ConfidenceWeight should be left to the
        default of 1.0. 
        """
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_SetConfidenceWeight(self, _arg)


    def GetConfidenceWeight(self) -> "double":
        """GetConfidenceWeight(itkSTAPLEImageFilterIF2IF2 self) -> double"""
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_GetConfidenceWeight(self)


    def GetElapsedIterations(self) -> "unsigned int":
        """
        GetElapsedIterations(itkSTAPLEImageFilterIF2IF2 self) -> unsigned int

        Get the number
        of elapsed iterations of the iterative E-M algorithm. 
        """
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_GetElapsedIterations(self)

    InputHasNumericTraitsCheck = _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkSTAPLEImageFilterPython.delete_itkSTAPLEImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkSTAPLEImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkSTAPLEImageFilterIF2IF2"""
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSTAPLEImageFilterIF2IF2

        Create a new object of the class itkSTAPLEImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSTAPLEImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSTAPLEImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSTAPLEImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSTAPLEImageFilterIF2IF2.Clone = new_instancemethod(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_Clone, None, itkSTAPLEImageFilterIF2IF2)
itkSTAPLEImageFilterIF2IF2.SetForegroundValue = new_instancemethod(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_SetForegroundValue, None, itkSTAPLEImageFilterIF2IF2)
itkSTAPLEImageFilterIF2IF2.GetForegroundValue = new_instancemethod(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_GetForegroundValue, None, itkSTAPLEImageFilterIF2IF2)
itkSTAPLEImageFilterIF2IF2.GetSensitivity = new_instancemethod(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_GetSensitivity, None, itkSTAPLEImageFilterIF2IF2)
itkSTAPLEImageFilterIF2IF2.GetSpecificity = new_instancemethod(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_GetSpecificity, None, itkSTAPLEImageFilterIF2IF2)
itkSTAPLEImageFilterIF2IF2.SetMaximumIterations = new_instancemethod(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_SetMaximumIterations, None, itkSTAPLEImageFilterIF2IF2)
itkSTAPLEImageFilterIF2IF2.GetMaximumIterations = new_instancemethod(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_GetMaximumIterations, None, itkSTAPLEImageFilterIF2IF2)
itkSTAPLEImageFilterIF2IF2.SetConfidenceWeight = new_instancemethod(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_SetConfidenceWeight, None, itkSTAPLEImageFilterIF2IF2)
itkSTAPLEImageFilterIF2IF2.GetConfidenceWeight = new_instancemethod(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_GetConfidenceWeight, None, itkSTAPLEImageFilterIF2IF2)
itkSTAPLEImageFilterIF2IF2.GetElapsedIterations = new_instancemethod(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_GetElapsedIterations, None, itkSTAPLEImageFilterIF2IF2)
itkSTAPLEImageFilterIF2IF2_swigregister = _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_swigregister
itkSTAPLEImageFilterIF2IF2_swigregister(itkSTAPLEImageFilterIF2IF2)

def itkSTAPLEImageFilterIF2IF2___New_orig__() -> "itkSTAPLEImageFilterIF2IF2_Pointer":
    """itkSTAPLEImageFilterIF2IF2___New_orig__() -> itkSTAPLEImageFilterIF2IF2_Pointer"""
    return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2___New_orig__()

def itkSTAPLEImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkSTAPLEImageFilterIF2IF2 *":
    """itkSTAPLEImageFilterIF2IF2_cast(itkLightObject obj) -> itkSTAPLEImageFilterIF2IF2"""
    return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_cast(obj)

class itkSTAPLEImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """


    The STAPLE filter implements the Simultaneous Truth and Performance
    Level Estimation algorithm for generating ground truth volumes from a
    set of binary expert segmentations.

    The STAPLE algorithm treats segmentation as a pixelwise
    classification, which leads to an averaging scheme that accounts for
    systematic biases in the behavior of experts in order to generate a
    fuzzy ground truth volume and simultaneous accuracy assessment of each
    expert. The ground truth volumes produced by this filter are floating
    point volumes of values between zero and one that indicate probability
    of each pixel being in the object targeted by the segmentation.

    The STAPLE algorithm is described in

    S. Warfield, K. Zou, W. Wells, "Validation of image segmentation and
    expert quality with an expectation-maximization algorithm" in MICCAI
    2002: Fifth International Conference on Medical Image Computing and
    Computer-Assisted Intervention, Springer-Verlag, Heidelberg, Germany,
    2002, pp. 298-306

    INPUTS Input volumes to the STAPLE filter must be binary segmentations
    of an image, that is, there must be a single foreground value that
    represents positively classified pixels (pixels that are considered to
    belong inside the segmentation). Any number of background pixel values
    may be present in the labels as long as the structure you are
    interested in creating ground truth for is consistently labeled among
    all input volumes. Pixel type of the input volumes does not matter.
    Specify the label value for positively classified pixels using
    SetForegroundValue. All other labels will be considered to be
    negatively classified pixels (background).  Input volumes must all
    contain the same size RequestedRegions.

    OUTPUTS The STAPLE filter produces a single output volume with a range
    of floating point values from zero to one. IT IS VERY IMPORTANT TO
    INSTANTIATE THIS FILTER WITH A FLOATING POINT OUTPUT TYPE (floats or
    doubles). You may threshold the output above some probability
    threshold if you wish to produce a binary ground truth. PARAMETERS The
    STAPLE algorithm requires a number of inputs. You may specify any
    number of input volumes using the SetInput(i, p_i) method, where i
    ranges from zero to N-1, N is the total number of input segmentations,
    and p_i is the SmartPointer to the i-th segmentation.  The
    SetConfidenceWeight parameter is a modifier for the prior probability
    that any pixel would be classified as inside the target object. This
    implementation of the STAPLE algorithm automatically calculates prior
    positive classification probability as the average fraction of the
    image volume filled by the target object in each input segmentation.
    The ConfidenceWeight parameter allows for scaling the of this default
    prior probability: if g_t is the prior probability that a pixel would
    be classified inside the target object, then g_t is set to g_t *
    ConfidenceWeight before iterating on the solution. In general
    ConfidenceWeight should be left to the default of 1.0.

    You must provide a foreground value using SetForegroundValue that the
    STAPLE algorithm will use to identify positively classified pixels in
    the the input images. All other values in the image will be treated as
    background values. the segmented region, then use
    SetForegroundValue(1).

    The STAPLE algorithm is an iterative E-M algorithm and will converge
    on a solution after some number of iterations that cannot be known a
    priori. After updating the filter, the total elapsed iterations taken
    to converge on the solution can be queried through
    GetElapsedIterations(). You may also specify a
    MaximumNumberOfIterations, after which the algorithm will stop
    iterating regardless of whether or not it has converged. This
    implementation of the STAPLE algorithm will find the solution to
    within seven digits of precision unless it is stopped early.

    Once updated, the Sensitivity (true positive fraction, q) and
    Specificity (true negative fraction, q) for each expert input volume
    can be queried using GetSensitivity(i) and GetSpecificity(i), where i
    is the i-th input volume.

    REQUIRED PARAMETERS The only required parameters for this filter are
    the ForegroundValue and the input volumes. All other parameters may be
    safely left to their default values. Please see the paper cited above
    for more information on the STAPLE algorithm and its parameters. A
    proper understanding of the algorithm is important for interpreting
    the results that it produces. EVENTS This filter invokes
    IterationEvent() at each iteration of the E-M algorithm. Setting the
    AbortGenerateData() flag will cause the algorithm to halt after the
    current iteration and produce results just as if it had converged. The
    algorithm makes no attempt to report its progress since the number of
    iterations needed cannot be known in advance.

    C++ includes: itkSTAPLEImageFilter.h 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkSTAPLEImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkSTAPLEImageFilterIF3IF3_Pointer"""
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkSTAPLEImageFilterIF3IF3_Pointer":
        """Clone(itkSTAPLEImageFilterIF3IF3 self) -> itkSTAPLEImageFilterIF3IF3_Pointer"""
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_Clone(self)


    def SetForegroundValue(self, _arg: 'float const') -> "void":
        """
        SetForegroundValue(itkSTAPLEImageFilterIF3IF3 self, float const _arg)

        Set get the
        binary ON value of the input image. 
        """
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_SetForegroundValue(self, _arg)


    def GetForegroundValue(self) -> "float":
        """GetForegroundValue(itkSTAPLEImageFilterIF3IF3 self) -> float"""
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_GetForegroundValue(self)


    def GetSensitivity(self, *args) -> "double":
        """
        GetSensitivity(itkSTAPLEImageFilterIF3IF3 self) -> vectorD
        GetSensitivity(itkSTAPLEImageFilterIF3IF3 self, unsigned int i) -> double

        After the filter is
        updated, this method returns the Sensitivity (true positive fraction,
        p) value for the i-th expert input volume. 
        """
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_GetSensitivity(self, *args)


    def GetSpecificity(self, *args) -> "double":
        """
        GetSpecificity(itkSTAPLEImageFilterIF3IF3 self) -> vectorD
        GetSpecificity(itkSTAPLEImageFilterIF3IF3 self, unsigned int i) -> double

        After the filter is
        updated, this method returns the Specificity (true negative fraction,
        q) value for the i-th expert input volume. 
        """
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_GetSpecificity(self, *args)


    def SetMaximumIterations(self, _arg: 'unsigned int const') -> "void":
        """
        SetMaximumIterations(itkSTAPLEImageFilterIF3IF3 self, unsigned int const _arg)

        Set/Get the
        maximum number of iterations after which the STAPLE algorithm will be
        considered to have converged. In general this SHOULD NOT be set and
        the algorithm should be allowed to converge on its own. 
        """
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_SetMaximumIterations(self, _arg)


    def GetMaximumIterations(self) -> "unsigned int":
        """GetMaximumIterations(itkSTAPLEImageFilterIF3IF3 self) -> unsigned int"""
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_GetMaximumIterations(self)


    def SetConfidenceWeight(self, _arg: 'double const') -> "void":
        """
        SetConfidenceWeight(itkSTAPLEImageFilterIF3IF3 self, double const _arg)

        Scales the
        estimated prior probability that a pixel will be inside the targeted
        object of segmentation. The default prior probability g_t is
        calculated automatically as the average fraction of positively
        classified pixels to the total size of the volume (across all input
        volumes). ConfidenceWeight will scale this default value as g_t = g_t
        * ConfidenceWeight. In general, ConfidenceWeight should be left to the
        default of 1.0. 
        """
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_SetConfidenceWeight(self, _arg)


    def GetConfidenceWeight(self) -> "double":
        """GetConfidenceWeight(itkSTAPLEImageFilterIF3IF3 self) -> double"""
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_GetConfidenceWeight(self)


    def GetElapsedIterations(self) -> "unsigned int":
        """
        GetElapsedIterations(itkSTAPLEImageFilterIF3IF3 self) -> unsigned int

        Get the number
        of elapsed iterations of the iterative E-M algorithm. 
        """
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_GetElapsedIterations(self)

    InputHasNumericTraitsCheck = _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_InputHasNumericTraitsCheck
    __swig_destroy__ = _itkSTAPLEImageFilterPython.delete_itkSTAPLEImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkSTAPLEImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkSTAPLEImageFilterIF3IF3"""
        return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSTAPLEImageFilterIF3IF3

        Create a new object of the class itkSTAPLEImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSTAPLEImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSTAPLEImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSTAPLEImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSTAPLEImageFilterIF3IF3.Clone = new_instancemethod(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_Clone, None, itkSTAPLEImageFilterIF3IF3)
itkSTAPLEImageFilterIF3IF3.SetForegroundValue = new_instancemethod(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_SetForegroundValue, None, itkSTAPLEImageFilterIF3IF3)
itkSTAPLEImageFilterIF3IF3.GetForegroundValue = new_instancemethod(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_GetForegroundValue, None, itkSTAPLEImageFilterIF3IF3)
itkSTAPLEImageFilterIF3IF3.GetSensitivity = new_instancemethod(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_GetSensitivity, None, itkSTAPLEImageFilterIF3IF3)
itkSTAPLEImageFilterIF3IF3.GetSpecificity = new_instancemethod(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_GetSpecificity, None, itkSTAPLEImageFilterIF3IF3)
itkSTAPLEImageFilterIF3IF3.SetMaximumIterations = new_instancemethod(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_SetMaximumIterations, None, itkSTAPLEImageFilterIF3IF3)
itkSTAPLEImageFilterIF3IF3.GetMaximumIterations = new_instancemethod(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_GetMaximumIterations, None, itkSTAPLEImageFilterIF3IF3)
itkSTAPLEImageFilterIF3IF3.SetConfidenceWeight = new_instancemethod(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_SetConfidenceWeight, None, itkSTAPLEImageFilterIF3IF3)
itkSTAPLEImageFilterIF3IF3.GetConfidenceWeight = new_instancemethod(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_GetConfidenceWeight, None, itkSTAPLEImageFilterIF3IF3)
itkSTAPLEImageFilterIF3IF3.GetElapsedIterations = new_instancemethod(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_GetElapsedIterations, None, itkSTAPLEImageFilterIF3IF3)
itkSTAPLEImageFilterIF3IF3_swigregister = _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_swigregister
itkSTAPLEImageFilterIF3IF3_swigregister(itkSTAPLEImageFilterIF3IF3)

def itkSTAPLEImageFilterIF3IF3___New_orig__() -> "itkSTAPLEImageFilterIF3IF3_Pointer":
    """itkSTAPLEImageFilterIF3IF3___New_orig__() -> itkSTAPLEImageFilterIF3IF3_Pointer"""
    return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3___New_orig__()

def itkSTAPLEImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkSTAPLEImageFilterIF3IF3 *":
    """itkSTAPLEImageFilterIF3IF3_cast(itkLightObject obj) -> itkSTAPLEImageFilterIF3IF3"""
    return _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_cast(obj)


def staple_image_filter(*args, **kwargs):
    """Procedural interface for STAPLEImageFilter"""
    import itk
    instance = itk.STAPLEImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def staple_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.STAPLEImageFilter, itkTemplate.itkTemplate):
        staple_image_filter.__doc__ = itk.STAPLEImageFilter.values()[0].__doc__
    else:
        staple_image_filter.__doc__ = itk.STAPLEImageFilter.__doc__




