# Stubs for pyjapc (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
#
# NOTE: This was manually edited after stubgen generation.

from typing import Any, Optional, Dict, List, Union, Type, Callable
import logging
import datetime
import numpy as np

DataFilter = Dict[str, Any]
Selector = str

class PyJapc:
    log: logging.Logger = ...
    def __init__(self, selector: Selector = ..., incaAcceleratorName: Optional[str] = ..., noSet: bool = ..., timeZone: Optional[Union[str, datetime.tzinfo]] = ..., logLevel: Optional[int] = ...) -> None: ...
    def __del__(self) -> None: ...
    @staticmethod
    def enableInThisThread() -> None: ...
    def setSelector(self, timingSelector: Selector, dataFilter: Optional[DataFilter] = ...) -> None: ...
    def getSelector(self) -> Optional[Selector]: ...
    def setDataFilter(self, dataFilter: DataFilter) -> None: ...
    def getDataFilter(self) -> DataFilter: ...
    def getUsers(self, machine: str) -> List[str]: ...
    def rbacLogin(self, username: Optional[str] = ..., password: Optional[str] = ..., loginDialog: bool = ..., readEnv: bool = ...) -> None: ...
    def rbacLogout(self) -> None: ...
    def rbacGetToken(self) -> str: ...
    def rbacGetSerializedToken(self) -> str: ...
    def getParam(self, parameterName: Union[str, List[str]], getHeader: bool = ..., noPyConversion: bool = ..., unixtime: bool = ..., onValueReceived: Optional[Callable[[Any], None]] = ..., onException: Optional[Callable[[str, str, Any], None]] = ..., timingSelectorOverride: Optional[Selector] = ..., dataFilterOverride: Optional[DataFilter] = ...) -> Any: ...
    def setParam(self, parameterName: str, parameterValue: Union[bool, int, float, str, np.ndarray], checkDims: bool = ..., dtype: Optional[Union[str, Type]] = ..., timingSelectorOverride: Optional[Selector] = ..., dataFilterOverride: Optional[DataFilter] = ...) -> None: ...
    def getParamInfo(self, parameterName: str, noPyConversion: bool = ...): ...
    def subscribeParam(self, parameterName: str, onValueReceived: Optional[Callable[[str, Any, Optional[Dict[str, Any]]], None]] = ..., onException: Optional[Callable[[str, str, Any], None]] = ..., getHeader: bool = ..., noPyConversion: bool = ..., unixtime: bool = ..., timingSelectorOverride: Optional[Selector] = ..., dataFilterOverride: Optional[DataFilter] = ...): ...
    def stopSubscriptions(self, parameterName: Optional[str] = ..., selector: Optional[Selector] = ...) -> None: ...
    def clearSubscriptions(self) -> None: ...
    def startSubscriptions(self, parameterName: Optional[str] = ..., selector: Optional[Selector] = ...) -> None: ...
