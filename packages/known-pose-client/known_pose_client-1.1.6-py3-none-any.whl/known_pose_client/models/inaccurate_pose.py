# coding: utf-8

"""
    Known Pose API

    Define and retrieve (accurate) semantic poses in a 2D environment. This version is a workaround for some not yet available features of the OpenAPI Specification v3.0 (e.g. `anyOf` as a response type and adding a  `discriminator` for supporting polymorphism/composition). Therefore, ATM the sub-components BasicPose and InaccuratePose are reference objects inside their respective parent model.    # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Contact: Kai.Waelti@dfki.de
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InaccuratePose(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'dns': 'str',
        'basic_pose': 'BasicPose',
        'is_accurate': 'bool',
        'taken_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'dns': 'dns',
        'basic_pose': 'basic_pose',
        'is_accurate': 'is_accurate',
        'taken_at': 'taken_at'
    }

    def __init__(self, id=None, dns=None, basic_pose=None, is_accurate=None, taken_at=None):  # noqa: E501
        """InaccuratePose - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._dns = None
        self._basic_pose = None
        self._is_accurate = None
        self._taken_at = None
        self.discriminator = None

        self.id = id
        self.dns = dns
        self.basic_pose = basic_pose
        self.is_accurate = is_accurate
        self.taken_at = taken_at

    @property
    def id(self):
        """Gets the id of this InaccuratePose.  # noqa: E501


        :return: The id of this InaccuratePose.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InaccuratePose.


        :param id: The id of this InaccuratePose.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def dns(self):
        """Gets the dns of this InaccuratePose.  # noqa: E501

        Unique name used to generate the uuid.  # noqa: E501

        :return: The dns of this InaccuratePose.  # noqa: E501
        :rtype: str
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this InaccuratePose.

        Unique name used to generate the uuid.  # noqa: E501

        :param dns: The dns of this InaccuratePose.  # noqa: E501
        :type: str
        """
        if dns is None:
            raise ValueError("Invalid value for `dns`, must not be `None`")  # noqa: E501

        self._dns = dns

    @property
    def basic_pose(self):
        """Gets the basic_pose of this InaccuratePose.  # noqa: E501


        :return: The basic_pose of this InaccuratePose.  # noqa: E501
        :rtype: BasicPose
        """
        return self._basic_pose

    @basic_pose.setter
    def basic_pose(self, basic_pose):
        """Sets the basic_pose of this InaccuratePose.


        :param basic_pose: The basic_pose of this InaccuratePose.  # noqa: E501
        :type: BasicPose
        """
        if basic_pose is None:
            raise ValueError("Invalid value for `basic_pose`, must not be `None`")  # noqa: E501

        self._basic_pose = basic_pose

    @property
    def is_accurate(self):
        """Gets the is_accurate of this InaccuratePose.  # noqa: E501


        :return: The is_accurate of this InaccuratePose.  # noqa: E501
        :rtype: bool
        """
        return self._is_accurate

    @is_accurate.setter
    def is_accurate(self, is_accurate):
        """Sets the is_accurate of this InaccuratePose.


        :param is_accurate: The is_accurate of this InaccuratePose.  # noqa: E501
        :type: bool
        """
        if is_accurate is None:
            raise ValueError("Invalid value for `is_accurate`, must not be `None`")  # noqa: E501

        self._is_accurate = is_accurate

    @property
    def taken_at(self):
        """Gets the taken_at of this InaccuratePose.  # noqa: E501


        :return: The taken_at of this InaccuratePose.  # noqa: E501
        :rtype: datetime
        """
        return self._taken_at

    @taken_at.setter
    def taken_at(self, taken_at):
        """Sets the taken_at of this InaccuratePose.


        :param taken_at: The taken_at of this InaccuratePose.  # noqa: E501
        :type: datetime
        """
        if taken_at is None:
            raise ValueError("Invalid value for `taken_at`, must not be `None`")  # noqa: E501

        self._taken_at = taken_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InaccuratePose):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
