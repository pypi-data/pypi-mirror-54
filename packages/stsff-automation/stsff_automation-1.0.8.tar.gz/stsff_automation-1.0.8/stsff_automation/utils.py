#!/usr/bin/env python

# ----------------------------------------------------------------------------------#
# //////////////////////////////////////////////////////////////////////////////////#
# ----------------------------------------------------------------------------------#
#
#  Copyright (C) 2018, StepToSky
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#  1.Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#  2.Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and / or other materials provided with the distribution.
#  3.Neither the name of StepToSky nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED.IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
#  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#  Contacts: www.steptosky.com
#
# ----------------------------------------------------------------------------------#
# //////////////////////////////////////////////////////////////////////////////////#
# ----------------------------------------------------------------------------------#
#
# This class is helper.
# It contains utility functions for stsff automation business logic.
#
# ----------------------------------------------------------------------------------#
# //////////////////////////////////////////////////////////////////////////////////#
# ----------------------------------------------------------------------------------#

import os
import re
import imp
import sys

from semantic_version import Version

__author__ = 'StepToSky'


class Utils:
    def __init__(self):
        pass

    # ---------------------------------------------------------------------------#
    # Version management

    @staticmethod
    def versionToString(version):
        major = int(version[:2])
        minor = int(version[2:4])
        patch = int(version[4:8])
        return str(major) + '.' + str(minor) + '.' + str(patch)

    @staticmethod
    def stringToVersion(string):
        array = string.split(".")
        version = ''
        for elem in array:
            version += "%02d" % int(elem)
        return version

    # ---------------------------------------------------------------------------#
    #

    @staticmethod
    def loadProjectDescription(descriptionFile):
        print("[INFO] Loading project description from file: %s" % descriptionFile)
        if not os.path.isabs(descriptionFile):
            descriptionFile = os.path.join(os.getcwd(), descriptionFile)
        originCwd = os.getcwd()
        sys.path.append(originCwd)
        os.chdir(os.path.dirname(descriptionFile))
        loadedModule = imp.load_source(os.path.splitext(os.path.basename(descriptionFile))[0],
                                       os.path.basename(descriptionFile))
        description = loadedModule.Description()
        os.chdir(originCwd)
        return description

    # ---------------------------------------------------------------------------#
    # Generating suffixes, prefixes and some other autogenerated stuff

    @staticmethod
    def generateUploadConanChannel(branchName):
        # if we in a stable branch
        if re.search(r'(release|master)', branchName):
            channel = 'stable'
        # we are in a Unstable branch
        else:
            channel = branchName
            channel = channel.replace("origin/", "")
            channel = channel.replace('/', '-')
        return channel

    @staticmethod
    def generateUploadConanTmpChannel(branchName):
        return Utils.generateUploadConanChannel(branchName) + "-temp"

    @staticmethod
    def generateUploadVersion(branchName, originVersion):
        # if we in a stable branch
        if re.search(r'(release|master)', branchName):
            version = originVersion
        # we are in a Unstable branch
        else:
            semVer = Version(originVersion)
            version = str(semVer.major) + ".0.0-snapshot"
        return version

    # This method is ONLY for consumer side!
    @staticmethod
    def autoRef(name, version, vcs_info, channel='', owner='stsff'):
        # if we in a stable branch
        if re.search(r'(release|master)', vcs_info.vcs_branch):
            if re.search(r'(snapshot)', version):
                raise Exception('We are in stable branch, so you should set specific version number.')
            if channel and channel != 'auto':
                raise Exception('We are in stable branch, so you should NOT set channel manually.')
            channel = 'stable'
        # we are in a Unstable branch
        else:
            if not channel or channel == 'auto':
                if re.search(r'(snapshot)', version):
                    channel = Utils.generateUploadConanChannel(vcs_info.vcs_branch)
                else:
                    channel = 'stable'

        reference = '%s/%s@%s/%s' % (name, version, owner, channel)
        print('[INFO] Generated conan reference: %s' % reference)
        return reference


# ----------------------------------------------------------------------------------#
# //////////////////////////////////////////////////////////////////////////////////#
# ----------------------------------------------------------------------------------#

# ---------------------------------------------------------------------------#
# # launch
if __name__ == '__main__':
    # print ('result: ' + Utils.getVersionStringFromFile('757.ini'))
    # print(Utils().generateUploadVersion("release/fff", "ss"))
    # print(Utils().generateUploadVersion("dddd", "2.3.6-ddd+sc"))
    # class Tmp:
    #     vcs_branch = "ee"
    # print(Utils().autoRef("name", "3.2.6", Tmp()))
    # print(Utils().autoRef("name", "3.2.6-snapshot", Tmp()))
    exit()
