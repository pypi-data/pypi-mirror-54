#!/usr/bin/env python

# ----------------------------------------------------------------------------------#
# //////////////////////////////////////////////////////////////////////////////////#
# ----------------------------------------------------------------------------------#
#
#  Copyright (C) 2018, StepToSky
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#  1.Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#  2.Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and / or other materials provided with the distribution.
#  3.Neither the name of StepToSky nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED.IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
#  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#  Contacts: www.steptosky.com
#
# ----------------------------------------------------------------------------------#
# //////////////////////////////////////////////////////////////////////////////////#
# ----------------------------------------------------------------------------------#
#
# This class is helper.
# It generates cmake description file from origin, conan description file.
#
# ----------------------------------------------------------------------------------#
# //////////////////////////////////////////////////////////////////////////////////#
# ----------------------------------------------------------------------------------#

import os
import sys
import inspect
import re

from semantic_version import Version

from stsff_automation.utils import Utils

__author__ = 'StepToSky'


class GenerateCmakeDescription:
    isPython3InUse = (sys.version_info[0] >= 3)

    word_regex_pattern = re.compile("[^A-Za-z]+")

    def __init__(self):
        pass

    @staticmethod
    def write_to_file(out_file, originDescFile, attributes, camel_case):
        out_file.write("#----------------------------------------------------------------------------------#\n"
                       "#//////////////////////////////////////////////////////////////////////////////////#\n"
                       "#----------------------------------------------------------------------------------#\n\n")
        out_file.write("# This file is autogenerated from origin description: \n"
                       "# " + originDescFile + "\n"
                       "# Please do NOT edit it manually!\n\n"
                       "#----------------------------------------------------------------------------------#\n\n")
        for attr, value in attributes:
            # print attr, value
            out_file.write("set(%s \"%s\")\n" % (GenerateCmakeDescription.make_key(attr, camel_case), (value)))
            # parse version additionally
            if attr == "version":
                semVer = Version(value)
                out_file.write("set(%s %s)\n" % (
                    GenerateCmakeDescription.make_key("VERSION_MAJOR", camel_case), str(semVer.major)))

                out_file.write("set(%s %s)\n" % (
                    GenerateCmakeDescription.make_key("VERSION_MINOR", camel_case), str(semVer.minor)))

                out_file.write("set(%s %s)\n" % (
                    GenerateCmakeDescription.make_key("VERSION_PATCH", camel_case), str(semVer.patch)))

        project_id = GenerateCmakeDescription.make_key("id", camel_case)
        out_file.write("\n\n#----------------------------------------------------------------------------------#\n"
                       "# Checking\n\n"
                       "if(NOT " + project_id + ")\n"
                       "    message(FATAL_ERROR \"" + project_id + " is not specified\")\n"
                       "endif()\n\n"
                       "#----------------------------------------------------------------------------------#\n"
                       "#//////////////////////////////////////////////////////////////////////////////////#\n"
                       "#----------------------------------------------------------------------------------#\n")

    @staticmethod
    def generate(originDescFile, outputCmakeFile, camel_case=True):
        if not os.path.isabs(originDescFile):
            originDescFile = os.path.join(os.getcwd(), originDescFile)
        if not os.path.isabs(outputCmakeFile):
            outputCmakeFile = os.path.join(os.getcwd(), outputCmakeFile)

        description = Utils.loadProjectDescription(originDescFile)

        attributes = inspect.getmembers(description, lambda var: not (inspect.isroutine(var)))
        attributes = [a for a in attributes if not (a[0].startswith('__') and a[0].endswith('__'))]
        print("[GEN CMAKE DESC] Writing to file: %s" % outputCmakeFile)
        if GenerateCmakeDescription.isPython3InUse:
            with open(outputCmakeFile, 'w', encoding='utf-8') as out_file:
                GenerateCmakeDescription.write_to_file(out_file, originDescFile, attributes, camel_case)
        else:
            with open(outputCmakeFile, 'w') as out_file:
                GenerateCmakeDescription.write_to_file(out_file, originDescFile, attributes, camel_case)

        print("[GEN CMAKE DESC] Output cmake file is written: %s" % outputCmakeFile)

    @staticmethod
    def make_key(key, camel_case):
        if camel_case:
            words = GenerateCmakeDescription.word_regex_pattern.split("Project_" + key)
            return "".join(w.lower().title() if i is 0 else w.title() for i, w in enumerate(words))
        else:
            return "PROJECT_" + key.upper()

# ----------------------------------------------------------------------------------#
# //////////////////////////////////////////////////////////////////////////////////#
# ----------------------------------------------------------------------------------#


def main():
    if len(sys.argv) < 3:
        raise Exception("Two arguments are required.")
    camel_case = False
    if len(sys.argv) > 3:
        camel_case = True if sys.argv[3] == "True" else False
    GenerateCmakeDescription.generate(sys.argv[1], sys.argv[2], camel_case)

# ----------------------------------------------------------------------------------#
# //////////////////////////////////////////////////////////////////////////////////#
# ----------------------------------------------------------------------------------#


if __name__ == "__main__":
    main()
