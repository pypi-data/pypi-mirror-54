{"version":3,"sources":["reducers.js","App.js","serviceWorker.js","index.js"],"names":["updateCallables","callables","type","initialState","runCallableApp","state","action","Object","assign","Header","Layout","Content","Footer","Callables","props","setCallables","this","axios","get","then","response","data","itemLayout","dataSource","renderItem","item","Item","Meta","title","to","callable_name","description","Component","mapDispatchToProps","dispatch","bindActionCreators","ReduxCallables","connect","CallableForm","handleSubmit","e","preventDefault","form","validateFields","err","values","post","match","params","name","status","showSuccessModal","result","showErrorModal","setCallable","callableInfo","callableName","callable","buildFormItem","parameter","index","array","inputWidget","getFieldDecorator","parameterName","annotation","allowClear","parser","value","Math","floor","Group","buttonStyle","Button","showTime","enum_values","map","label","key","initialValue","default","rules","required","message","visible","Modal","success","content","error","style","border","onBack","history","push","layout","onSubmit","doc","parameters","length","htmlType","wrapperCol","span","offset","block","React","WrappedCallableForm","Form","create","ReduxWrappedCallableForm","App","document","className","minHeight","color","margin","width","exact","path","component","textAlign","Boolean","window","location","hostname","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","trace","traceLimit","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.19e8b2da.chunk.js","sourcesContent":["export function updateCallables(callables) {\n  return {\n    type: 'updateCallables',\n    callables\n  }\n}\n\n\nconst initialState = {\n  callables: []\n}\n\n\nfunction runCallableApp(state=initialState, action) {\n  switch (action.type) {\n    case 'updateCallables':\n      return Object.assign({}, state, {\n        callables: action.callables\n      })\n    default:\n      return state\n  }\n}\n\n\nexport default runCallableApp\n","import React, { Component } from 'react';\nimport { HashRouter, Route, Link, Switch } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { List, Form, Input, Button, DatePicker, Modal, Layout, Radio, Divider, PageHeader, InputNumber } from 'antd';\nimport axios from 'axios';\nimport './App.css';\n\nimport { updateCallables } from './reducers'\n\n\nconst { Header, Content, Footer } = Layout;\n\nclass Callables extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const { setCallables } = this.props\n\n    axios.get('callable')\n      .then(response => {\n        setCallables(response.data)\n      });\n\n  }\n\n  render() {\n    return (\n      <List\n        itemLayout=\"horizontal\"\n        dataSource={this.props.callables}\n        renderItem={item => (\n          <List.Item>\n            <List.Item.Meta\n              title={<Link to={`/callable/${item.callable_name}`}>{item.callable_name}</Link>}\n              description={item.title}\n            />\n          </List.Item>\n        )}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    callables: state.callables\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    setCallables: updateCallables\n  }, dispatch)\n}\n\nconst ReduxCallables = connect(mapStateToProps, mapDispatchToProps)(Callables)\n\nclass CallableForm extends React.Component {\n\n  constructor(props) {\n    super(props)\n    const { callables } = this.props\n\n    this.state = {\n      visible: false,\n      response: null,\n      callables: callables,\n    };\n  }\n\n  componentDidMount() {\n    const { setCallables } = this.props\n\n    axios.get('callable')\n      .then(response => {\n        setCallables(response.data)\n      });\n\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        axios.post(`callable/${this.props.match.params.name}`, values)\n          .then((response) => {\n            if (response.data.status === 'success') {\n              this.showSuccessModal(response.data.result)\n            } else {\n              this.showErrorModal(response.data.result)\n            }\n          });\n      }\n\n    });\n  };\n\n  showSuccessModal(result) {\n    Modal.success({\n      title: '执行成功',\n      content: result,\n    });\n  }\n\n  showErrorModal(result) {\n    Modal.error({\n      title: '执行失败',\n      content: result,\n    });\n  }\n\n  setCallable = () => {\n    let callableName = this.props.match.params.name;\n    var callableInfo\n    for (callableInfo of this.props.callables) {\n      if (callableInfo.callable_name === callableName) {\n        this.callable = callableInfo\n        break\n      }\n    }\n  };\n\n  buildFormItem = (parameter, index, array) => {\n    const { getFieldDecorator } = this.props.form;\n\n    let parameterName = parameter.name\n    let inputWidget\n    switch (parameter.annotation) {\n      case 'str':\n        inputWidget = <Input allowClear />;\n        break\n      case 'float':\n        inputWidget = <InputNumber allowClear />;\n        break\n      case 'int':\n        inputWidget = <InputNumber parser={value => Math.floor(value)} allowClear />;\n        break\n      case 'bool':\n        inputWidget = <Radio.Group buttonStyle=\"solid\">\n          <Radio.Button value={true}>True</Radio.Button>\n          <Radio.Button value={false}>False</Radio.Button>\n        </Radio.Group>;\n        break\n      case 'datetime':\n        inputWidget = <DatePicker showTime allowClear />;\n        break\n      case 'Enum':\n        inputWidget = <Radio.Group buttonStyle=\"solid\">\n          {\n            parameter.enum_values.map((value, index, array) =>\n              <Radio.Button value={value}>{value}</Radio.Button>\n            )\n          }\n        </Radio.Group>;\n        break\n      default:\n        inputWidget = <Input />;\n    }\n\n    return <Form.Item label={parameterName} key={index}>\n      {getFieldDecorator(parameterName, {\n        initialValue: parameter.default,\n        rules: [{ required: parameter['required'], message: `请输入${parameterName}!` }],\n      })(inputWidget)}\n    </Form.Item>\n  }\n\n  render() {\n    this.setCallable()\n\n    return (\n      <PageHeader\n        style={{\n          border: '1px solid rgb(235, 237, 240)',\n        }}\n        onBack={() => this.props.history.push('/')}\n        title=\"功能列表\"\n      >\n        <Form layout=\"vertical\" onSubmit={this.handleSubmit}>\n          <Divider>{this.callable ? this.callable.callable_name : ''}</Divider>\n          <pre>{this.callable && this.callable.doc ? this.callable.doc : '没有文档'}</pre>\n          {\n            this.callable && this.callable.parameters.length ? <Divider>参数填写</Divider> : []\n          }\n\n          {\n            this.callable ? this.callable.parameters.map(this.buildFormItem) : []\n          }\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" wrapperCol={{ span: 12, offset: 6 }} block>\n              运行\n            </Button>\n          </Form.Item>\n        </Form>\n      </PageHeader>\n    );\n  }\n}\n\nconst WrappedCallableForm = Form.create({ name: 'callablForm' })(CallableForm);\n\nconst mapStateToFormProps = state => {\n  return {\n    callables: state.callables\n  }\n}\n\nconst ReduxWrappedCallableForm = connect(mapStateToFormProps, mapDispatchToProps)(WrappedCallableForm)\n\n\nclass App extends Component {\n\n  componentDidMount() {\n    document.title = \"Touch-Callable\"\n  }\n\n  render() {\n    return (\n      <Layout className=\"layout\" style={{ minHeight: '10000px' }}>\n        <Header>\n          <p style={{ color: 'white' }}>Touch Callable</p>\n        </Header>\n        <Content style={{ margin: '0 auto', width: '700px' }}>\n          <HashRouter>\n            <Switch>\n              <Route exact path='/' component={ReduxCallables} />\n              <Route path='/callable/:name' component={ReduxWrappedCallableForm} />\n            </Switch>\n          </HashRouter>\n        </Content>\n        <Footer style={{ textAlign: 'center' }}>Touch Callable</Footer>\n      </Layout>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport runCallableApp from './reducers'\n\n\nlet store = createStore(\n  runCallableApp,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({ trace: true, traceLimit: 25 }));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}