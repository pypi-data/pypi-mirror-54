# coding: utf-8

"""
    

        # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Lego(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'all_parts': 'int',
        'lost_set_parts': 'int',
        'total_loose_parts': 'int',
        'total_set_parts': 'int',
        'total_sets': 'int'
    }

    attribute_map = {
        'all_parts': 'all_parts',
        'lost_set_parts': 'lost_set_parts',
        'total_loose_parts': 'total_loose_parts',
        'total_set_parts': 'total_set_parts',
        'total_sets': 'total_sets'
    }

    def __init__(self, all_parts=None, lost_set_parts=None, total_loose_parts=None, total_set_parts=None, total_sets=None):  # noqa: E501
        """Lego - a model defined in OpenAPI"""  # noqa: E501

        self._all_parts = None
        self._lost_set_parts = None
        self._total_loose_parts = None
        self._total_set_parts = None
        self._total_sets = None
        self.discriminator = None

        if all_parts is not None:
            self.all_parts = all_parts
        if lost_set_parts is not None:
            self.lost_set_parts = lost_set_parts
        if total_loose_parts is not None:
            self.total_loose_parts = total_loose_parts
        if total_set_parts is not None:
            self.total_set_parts = total_set_parts
        if total_sets is not None:
            self.total_sets = total_sets

    @property
    def all_parts(self):
        """Gets the all_parts of this Lego.  # noqa: E501


        :return: The all_parts of this Lego.  # noqa: E501
        :rtype: int
        """
        return self._all_parts

    @all_parts.setter
    def all_parts(self, all_parts):
        """Sets the all_parts of this Lego.


        :param all_parts: The all_parts of this Lego.  # noqa: E501
        :type: int
        """

        self._all_parts = all_parts

    @property
    def lost_set_parts(self):
        """Gets the lost_set_parts of this Lego.  # noqa: E501


        :return: The lost_set_parts of this Lego.  # noqa: E501
        :rtype: int
        """
        return self._lost_set_parts

    @lost_set_parts.setter
    def lost_set_parts(self, lost_set_parts):
        """Sets the lost_set_parts of this Lego.


        :param lost_set_parts: The lost_set_parts of this Lego.  # noqa: E501
        :type: int
        """

        self._lost_set_parts = lost_set_parts

    @property
    def total_loose_parts(self):
        """Gets the total_loose_parts of this Lego.  # noqa: E501


        :return: The total_loose_parts of this Lego.  # noqa: E501
        :rtype: int
        """
        return self._total_loose_parts

    @total_loose_parts.setter
    def total_loose_parts(self, total_loose_parts):
        """Sets the total_loose_parts of this Lego.


        :param total_loose_parts: The total_loose_parts of this Lego.  # noqa: E501
        :type: int
        """

        self._total_loose_parts = total_loose_parts

    @property
    def total_set_parts(self):
        """Gets the total_set_parts of this Lego.  # noqa: E501


        :return: The total_set_parts of this Lego.  # noqa: E501
        :rtype: int
        """
        return self._total_set_parts

    @total_set_parts.setter
    def total_set_parts(self, total_set_parts):
        """Sets the total_set_parts of this Lego.


        :param total_set_parts: The total_set_parts of this Lego.  # noqa: E501
        :type: int
        """

        self._total_set_parts = total_set_parts

    @property
    def total_sets(self):
        """Gets the total_sets of this Lego.  # noqa: E501


        :return: The total_sets of this Lego.  # noqa: E501
        :rtype: int
        """
        return self._total_sets

    @total_sets.setter
    def total_sets(self, total_sets):
        """Sets the total_sets of this Lego.


        :param total_sets: The total_sets of this Lego.  # noqa: E501
        :type: int
        """

        self._total_sets = total_sets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Lego):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
