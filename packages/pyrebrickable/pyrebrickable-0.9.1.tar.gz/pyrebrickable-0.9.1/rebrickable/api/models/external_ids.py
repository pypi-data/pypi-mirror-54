# coding: utf-8

"""
    

        # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ExternalIds(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'brick_link': 'list[str]',
        'brick_owl': 'list[str]',
        'l_draw': 'list[str]',
        'lego': 'list[str]'
    }

    attribute_map = {
        'brick_link': 'BrickLink',
        'brick_owl': 'BrickOwl',
        'l_draw': 'LDraw',
        'lego': 'LEGO'
    }

    def __init__(self, brick_link=None, brick_owl=None, l_draw=None, lego=None):  # noqa: E501
        """ExternalIds - a model defined in OpenAPI"""  # noqa: E501

        self._brick_link = None
        self._brick_owl = None
        self._l_draw = None
        self._lego = None
        self.discriminator = None

        if brick_link is not None:
            self.brick_link = brick_link
        if brick_owl is not None:
            self.brick_owl = brick_owl
        if l_draw is not None:
            self.l_draw = l_draw
        if lego is not None:
            self.lego = lego

    @property
    def brick_link(self):
        """Gets the brick_link of this ExternalIds.  # noqa: E501


        :return: The brick_link of this ExternalIds.  # noqa: E501
        :rtype: list[str]
        """
        return self._brick_link

    @brick_link.setter
    def brick_link(self, brick_link):
        """Sets the brick_link of this ExternalIds.


        :param brick_link: The brick_link of this ExternalIds.  # noqa: E501
        :type: list[str]
        """

        self._brick_link = brick_link

    @property
    def brick_owl(self):
        """Gets the brick_owl of this ExternalIds.  # noqa: E501


        :return: The brick_owl of this ExternalIds.  # noqa: E501
        :rtype: list[str]
        """
        return self._brick_owl

    @brick_owl.setter
    def brick_owl(self, brick_owl):
        """Sets the brick_owl of this ExternalIds.


        :param brick_owl: The brick_owl of this ExternalIds.  # noqa: E501
        :type: list[str]
        """

        self._brick_owl = brick_owl

    @property
    def l_draw(self):
        """Gets the l_draw of this ExternalIds.  # noqa: E501


        :return: The l_draw of this ExternalIds.  # noqa: E501
        :rtype: list[str]
        """
        return self._l_draw

    @l_draw.setter
    def l_draw(self, l_draw):
        """Sets the l_draw of this ExternalIds.


        :param l_draw: The l_draw of this ExternalIds.  # noqa: E501
        :type: list[str]
        """

        self._l_draw = l_draw

    @property
    def lego(self):
        """Gets the lego of this ExternalIds.  # noqa: E501


        :return: The lego of this ExternalIds.  # noqa: E501
        :rtype: list[str]
        """
        return self._lego

    @lego.setter
    def lego(self, lego):
        """Sets the lego of this ExternalIds.


        :param lego: The lego of this ExternalIds.  # noqa: E501
        :type: list[str]
        """

        self._lego = lego

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalIds):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
