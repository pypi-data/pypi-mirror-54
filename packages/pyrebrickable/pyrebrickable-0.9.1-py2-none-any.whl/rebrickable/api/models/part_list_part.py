# coding: utf-8

"""
    

        # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PartListPart(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'color': 'Color',
        'list_id': 'int',
        'part': 'Part',
        'quantity': 'int'
    }

    attribute_map = {
        'color': 'color',
        'list_id': 'list_id',
        'part': 'part',
        'quantity': 'quantity'
    }

    def __init__(self, color=None, list_id=None, part=None, quantity=None):  # noqa: E501
        """PartListPart - a model defined in OpenAPI"""  # noqa: E501

        self._color = None
        self._list_id = None
        self._part = None
        self._quantity = None
        self.discriminator = None

        if color is not None:
            self.color = color
        if list_id is not None:
            self.list_id = list_id
        if part is not None:
            self.part = part
        if quantity is not None:
            self.quantity = quantity

    @property
    def color(self):
        """Gets the color of this PartListPart.  # noqa: E501


        :return: The color of this PartListPart.  # noqa: E501
        :rtype: Color
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this PartListPart.


        :param color: The color of this PartListPart.  # noqa: E501
        :type: Color
        """

        self._color = color

    @property
    def list_id(self):
        """Gets the list_id of this PartListPart.  # noqa: E501


        :return: The list_id of this PartListPart.  # noqa: E501
        :rtype: int
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this PartListPart.


        :param list_id: The list_id of this PartListPart.  # noqa: E501
        :type: int
        """

        self._list_id = list_id

    @property
    def part(self):
        """Gets the part of this PartListPart.  # noqa: E501


        :return: The part of this PartListPart.  # noqa: E501
        :rtype: Part
        """
        return self._part

    @part.setter
    def part(self, part):
        """Sets the part of this PartListPart.


        :param part: The part of this PartListPart.  # noqa: E501
        :type: Part
        """

        self._part = part

    @property
    def quantity(self):
        """Gets the quantity of this PartListPart.  # noqa: E501


        :return: The quantity of this PartListPart.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this PartListPart.


        :param quantity: The quantity of this PartListPart.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartListPart):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
