# coding: utf-8

"""
    

        # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Set(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'last_modified_dt': 'datetime',
        'name': 'str',
        'num_parts': 'int',
        'set_img_url': 'str',
        'set_num': 'str',
        'set_url': 'str',
        'theme_id': 'int',
        'year': 'int'
    }

    attribute_map = {
        'last_modified_dt': 'last_modified_dt',
        'name': 'name',
        'num_parts': 'num_parts',
        'set_img_url': 'set_img_url',
        'set_num': 'set_num',
        'set_url': 'set_url',
        'theme_id': 'theme_id',
        'year': 'year'
    }

    def __init__(self, last_modified_dt=None, name=None, num_parts=None, set_img_url=None, set_num=None, set_url=None, theme_id=None, year=None):  # noqa: E501
        """Set - a model defined in OpenAPI"""  # noqa: E501

        self._last_modified_dt = None
        self._name = None
        self._num_parts = None
        self._set_img_url = None
        self._set_num = None
        self._set_url = None
        self._theme_id = None
        self._year = None
        self.discriminator = None

        if last_modified_dt is not None:
            self.last_modified_dt = last_modified_dt
        if name is not None:
            self.name = name
        if num_parts is not None:
            self.num_parts = num_parts
        if set_img_url is not None:
            self.set_img_url = set_img_url
        if set_num is not None:
            self.set_num = set_num
        if set_url is not None:
            self.set_url = set_url
        if theme_id is not None:
            self.theme_id = theme_id
        if year is not None:
            self.year = year

    @property
    def last_modified_dt(self):
        """Gets the last_modified_dt of this Set.  # noqa: E501


        :return: The last_modified_dt of this Set.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_dt

    @last_modified_dt.setter
    def last_modified_dt(self, last_modified_dt):
        """Sets the last_modified_dt of this Set.


        :param last_modified_dt: The last_modified_dt of this Set.  # noqa: E501
        :type: datetime
        """

        self._last_modified_dt = last_modified_dt

    @property
    def name(self):
        """Gets the name of this Set.  # noqa: E501


        :return: The name of this Set.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Set.


        :param name: The name of this Set.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def num_parts(self):
        """Gets the num_parts of this Set.  # noqa: E501


        :return: The num_parts of this Set.  # noqa: E501
        :rtype: int
        """
        return self._num_parts

    @num_parts.setter
    def num_parts(self, num_parts):
        """Sets the num_parts of this Set.


        :param num_parts: The num_parts of this Set.  # noqa: E501
        :type: int
        """

        self._num_parts = num_parts

    @property
    def set_img_url(self):
        """Gets the set_img_url of this Set.  # noqa: E501


        :return: The set_img_url of this Set.  # noqa: E501
        :rtype: str
        """
        return self._set_img_url

    @set_img_url.setter
    def set_img_url(self, set_img_url):
        """Sets the set_img_url of this Set.


        :param set_img_url: The set_img_url of this Set.  # noqa: E501
        :type: str
        """

        self._set_img_url = set_img_url

    @property
    def set_num(self):
        """Gets the set_num of this Set.  # noqa: E501


        :return: The set_num of this Set.  # noqa: E501
        :rtype: str
        """
        return self._set_num

    @set_num.setter
    def set_num(self, set_num):
        """Sets the set_num of this Set.


        :param set_num: The set_num of this Set.  # noqa: E501
        :type: str
        """

        self._set_num = set_num

    @property
    def set_url(self):
        """Gets the set_url of this Set.  # noqa: E501


        :return: The set_url of this Set.  # noqa: E501
        :rtype: str
        """
        return self._set_url

    @set_url.setter
    def set_url(self, set_url):
        """Sets the set_url of this Set.


        :param set_url: The set_url of this Set.  # noqa: E501
        :type: str
        """

        self._set_url = set_url

    @property
    def theme_id(self):
        """Gets the theme_id of this Set.  # noqa: E501


        :return: The theme_id of this Set.  # noqa: E501
        :rtype: int
        """
        return self._theme_id

    @theme_id.setter
    def theme_id(self, theme_id):
        """Sets the theme_id of this Set.


        :param theme_id: The theme_id of this Set.  # noqa: E501
        :type: int
        """

        self._theme_id = theme_id

    @property
    def year(self):
        """Gets the year of this Set.  # noqa: E501


        :return: The year of this Set.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Set.


        :param year: The year of this Set.  # noqa: E501
        :type: int
        """

        self._year = year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Set):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
