# coding: utf-8

"""
    

        # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Profile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'avatar_img': 'str',
        'email': 'str',
        'last_activity': 'datetime',
        'last_ip': 'str',
        'lego': 'Lego',
        'location': 'str',
        'real_name': 'str',
        'rewards': 'Rewards',
        'user_id': 'int',
        'username': 'str'
    }

    attribute_map = {
        'avatar_img': 'avatar_img',
        'email': 'email',
        'last_activity': 'last_activity',
        'last_ip': 'last_ip',
        'lego': 'lego',
        'location': 'location',
        'real_name': 'real_name',
        'rewards': 'rewards',
        'user_id': 'user_id',
        'username': 'username'
    }

    def __init__(self, avatar_img=None, email=None, last_activity=None, last_ip=None, lego=None, location=None, real_name=None, rewards=None, user_id=None, username=None):  # noqa: E501
        """Profile - a model defined in OpenAPI"""  # noqa: E501

        self._avatar_img = None
        self._email = None
        self._last_activity = None
        self._last_ip = None
        self._lego = None
        self._location = None
        self._real_name = None
        self._rewards = None
        self._user_id = None
        self._username = None
        self.discriminator = None

        if avatar_img is not None:
            self.avatar_img = avatar_img
        if email is not None:
            self.email = email
        if last_activity is not None:
            self.last_activity = last_activity
        if last_ip is not None:
            self.last_ip = last_ip
        if lego is not None:
            self.lego = lego
        if location is not None:
            self.location = location
        if real_name is not None:
            self.real_name = real_name
        if rewards is not None:
            self.rewards = rewards
        if user_id is not None:
            self.user_id = user_id
        if username is not None:
            self.username = username

    @property
    def avatar_img(self):
        """Gets the avatar_img of this Profile.  # noqa: E501


        :return: The avatar_img of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._avatar_img

    @avatar_img.setter
    def avatar_img(self, avatar_img):
        """Sets the avatar_img of this Profile.


        :param avatar_img: The avatar_img of this Profile.  # noqa: E501
        :type: str
        """

        self._avatar_img = avatar_img

    @property
    def email(self):
        """Gets the email of this Profile.  # noqa: E501


        :return: The email of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Profile.


        :param email: The email of this Profile.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def last_activity(self):
        """Gets the last_activity of this Profile.  # noqa: E501


        :return: The last_activity of this Profile.  # noqa: E501
        :rtype: datetime
        """
        return self._last_activity

    @last_activity.setter
    def last_activity(self, last_activity):
        """Sets the last_activity of this Profile.


        :param last_activity: The last_activity of this Profile.  # noqa: E501
        :type: datetime
        """

        self._last_activity = last_activity

    @property
    def last_ip(self):
        """Gets the last_ip of this Profile.  # noqa: E501


        :return: The last_ip of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._last_ip

    @last_ip.setter
    def last_ip(self, last_ip):
        """Sets the last_ip of this Profile.


        :param last_ip: The last_ip of this Profile.  # noqa: E501
        :type: str
        """

        self._last_ip = last_ip

    @property
    def lego(self):
        """Gets the lego of this Profile.  # noqa: E501


        :return: The lego of this Profile.  # noqa: E501
        :rtype: Lego
        """
        return self._lego

    @lego.setter
    def lego(self, lego):
        """Sets the lego of this Profile.


        :param lego: The lego of this Profile.  # noqa: E501
        :type: Lego
        """

        self._lego = lego

    @property
    def location(self):
        """Gets the location of this Profile.  # noqa: E501


        :return: The location of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Profile.


        :param location: The location of this Profile.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def real_name(self):
        """Gets the real_name of this Profile.  # noqa: E501


        :return: The real_name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._real_name

    @real_name.setter
    def real_name(self, real_name):
        """Sets the real_name of this Profile.


        :param real_name: The real_name of this Profile.  # noqa: E501
        :type: str
        """

        self._real_name = real_name

    @property
    def rewards(self):
        """Gets the rewards of this Profile.  # noqa: E501


        :return: The rewards of this Profile.  # noqa: E501
        :rtype: Rewards
        """
        return self._rewards

    @rewards.setter
    def rewards(self, rewards):
        """Sets the rewards of this Profile.


        :param rewards: The rewards of this Profile.  # noqa: E501
        :type: Rewards
        """

        self._rewards = rewards

    @property
    def user_id(self):
        """Gets the user_id of this Profile.  # noqa: E501


        :return: The user_id of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Profile.


        :param user_id: The user_id of this Profile.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this Profile.  # noqa: E501


        :return: The username of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Profile.


        :param username: The username of this Profile.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Profile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
