# coding: utf-8

"""
    

        # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Element(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'color': 'Color',
        'design_id': 'str',
        'element_id': 'str',
        'element_img_url': 'str',
        'part': 'Part',
        'part_img_url': 'str'
    }

    attribute_map = {
        'color': 'color',
        'design_id': 'design_id',
        'element_id': 'element_id',
        'element_img_url': 'element_img_url',
        'part': 'part',
        'part_img_url': 'part_img_url'
    }

    def __init__(self, color=None, design_id=None, element_id=None, element_img_url=None, part=None, part_img_url=None):  # noqa: E501
        """Element - a model defined in OpenAPI"""  # noqa: E501

        self._color = None
        self._design_id = None
        self._element_id = None
        self._element_img_url = None
        self._part = None
        self._part_img_url = None
        self.discriminator = None

        if color is not None:
            self.color = color
        if design_id is not None:
            self.design_id = design_id
        if element_id is not None:
            self.element_id = element_id
        if element_img_url is not None:
            self.element_img_url = element_img_url
        if part is not None:
            self.part = part
        if part_img_url is not None:
            self.part_img_url = part_img_url

    @property
    def color(self):
        """Gets the color of this Element.  # noqa: E501


        :return: The color of this Element.  # noqa: E501
        :rtype: Color
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Element.


        :param color: The color of this Element.  # noqa: E501
        :type: Color
        """

        self._color = color

    @property
    def design_id(self):
        """Gets the design_id of this Element.  # noqa: E501


        :return: The design_id of this Element.  # noqa: E501
        :rtype: str
        """
        return self._design_id

    @design_id.setter
    def design_id(self, design_id):
        """Sets the design_id of this Element.


        :param design_id: The design_id of this Element.  # noqa: E501
        :type: str
        """

        self._design_id = design_id

    @property
    def element_id(self):
        """Gets the element_id of this Element.  # noqa: E501


        :return: The element_id of this Element.  # noqa: E501
        :rtype: str
        """
        return self._element_id

    @element_id.setter
    def element_id(self, element_id):
        """Sets the element_id of this Element.


        :param element_id: The element_id of this Element.  # noqa: E501
        :type: str
        """

        self._element_id = element_id

    @property
    def element_img_url(self):
        """Gets the element_img_url of this Element.  # noqa: E501


        :return: The element_img_url of this Element.  # noqa: E501
        :rtype: str
        """
        return self._element_img_url

    @element_img_url.setter
    def element_img_url(self, element_img_url):
        """Sets the element_img_url of this Element.


        :param element_img_url: The element_img_url of this Element.  # noqa: E501
        :type: str
        """

        self._element_img_url = element_img_url

    @property
    def part(self):
        """Gets the part of this Element.  # noqa: E501


        :return: The part of this Element.  # noqa: E501
        :rtype: Part
        """
        return self._part

    @part.setter
    def part(self, part):
        """Sets the part of this Element.


        :param part: The part of this Element.  # noqa: E501
        :type: Part
        """

        self._part = part

    @property
    def part_img_url(self):
        """Gets the part_img_url of this Element.  # noqa: E501


        :return: The part_img_url of this Element.  # noqa: E501
        :rtype: str
        """
        return self._part_img_url

    @part_img_url.setter
    def part_img_url(self, part_img_url):
        """Sets the part_img_url of this Element.


        :param part_img_url: The part_img_url of this Element.  # noqa: E501
        :type: str
        """

        self._part_img_url = part_img_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Element):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
