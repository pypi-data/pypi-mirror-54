# coding: utf-8

"""
    

        # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class LostPart(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'inv_part': 'InventoryPart',
        'lost_part_id': 'int',
        'lost_quantity': 'int'
    }

    attribute_map = {
        'inv_part': 'inv_part',
        'lost_part_id': 'lost_part_id',
        'lost_quantity': 'lost_quantity'
    }

    def __init__(self, inv_part=None, lost_part_id=None, lost_quantity=None):  # noqa: E501
        """LostPart - a model defined in OpenAPI"""  # noqa: E501

        self._inv_part = None
        self._lost_part_id = None
        self._lost_quantity = None
        self.discriminator = None

        if inv_part is not None:
            self.inv_part = inv_part
        if lost_part_id is not None:
            self.lost_part_id = lost_part_id
        if lost_quantity is not None:
            self.lost_quantity = lost_quantity

    @property
    def inv_part(self):
        """Gets the inv_part of this LostPart.  # noqa: E501


        :return: The inv_part of this LostPart.  # noqa: E501
        :rtype: InventoryPart
        """
        return self._inv_part

    @inv_part.setter
    def inv_part(self, inv_part):
        """Sets the inv_part of this LostPart.


        :param inv_part: The inv_part of this LostPart.  # noqa: E501
        :type: InventoryPart
        """

        self._inv_part = inv_part

    @property
    def lost_part_id(self):
        """Gets the lost_part_id of this LostPart.  # noqa: E501


        :return: The lost_part_id of this LostPart.  # noqa: E501
        :rtype: int
        """
        return self._lost_part_id

    @lost_part_id.setter
    def lost_part_id(self, lost_part_id):
        """Sets the lost_part_id of this LostPart.


        :param lost_part_id: The lost_part_id of this LostPart.  # noqa: E501
        :type: int
        """

        self._lost_part_id = lost_part_id

    @property
    def lost_quantity(self):
        """Gets the lost_quantity of this LostPart.  # noqa: E501


        :return: The lost_quantity of this LostPart.  # noqa: E501
        :rtype: int
        """
        return self._lost_quantity

    @lost_quantity.setter
    def lost_quantity(self, lost_quantity):
        """Sets the lost_quantity of this LostPart.


        :param lost_quantity: The lost_quantity of this LostPart.  # noqa: E501
        :type: int
        """

        self._lost_quantity = lost_quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LostPart):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
