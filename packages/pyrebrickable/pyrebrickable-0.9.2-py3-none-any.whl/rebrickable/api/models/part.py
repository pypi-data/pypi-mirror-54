# coding: utf-8

"""
    

        # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Part(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'alternates': 'list[str]',
        'external_ids': 'ExternalIds',
        'molds': 'list[str]',
        'name': 'str',
        'part_cat_id': 'int',
        'part_img_url': 'str',
        'part_num': 'str',
        'part_url': 'str',
        'prints': 'list[str]',
        'year_from': 'int',
        'year_to': 'int'
    }

    attribute_map = {
        'alternates': 'alternates',
        'external_ids': 'external_ids',
        'molds': 'molds',
        'name': 'name',
        'part_cat_id': 'part_cat_id',
        'part_img_url': 'part_img_url',
        'part_num': 'part_num',
        'part_url': 'part_url',
        'prints': 'prints',
        'year_from': 'year_from',
        'year_to': 'year_to'
    }

    def __init__(self, alternates=None, external_ids=None, molds=None, name=None, part_cat_id=None, part_img_url=None, part_num=None, part_url=None, prints=None, year_from=None, year_to=None):  # noqa: E501
        """Part - a model defined in OpenAPI"""  # noqa: E501

        self._alternates = None
        self._external_ids = None
        self._molds = None
        self._name = None
        self._part_cat_id = None
        self._part_img_url = None
        self._part_num = None
        self._part_url = None
        self._prints = None
        self._year_from = None
        self._year_to = None
        self.discriminator = None

        if alternates is not None:
            self.alternates = alternates
        if external_ids is not None:
            self.external_ids = external_ids
        if molds is not None:
            self.molds = molds
        if name is not None:
            self.name = name
        if part_cat_id is not None:
            self.part_cat_id = part_cat_id
        if part_img_url is not None:
            self.part_img_url = part_img_url
        if part_num is not None:
            self.part_num = part_num
        if part_url is not None:
            self.part_url = part_url
        if prints is not None:
            self.prints = prints
        if year_from is not None:
            self.year_from = year_from
        if year_to is not None:
            self.year_to = year_to

    @property
    def alternates(self):
        """Gets the alternates of this Part.  # noqa: E501


        :return: The alternates of this Part.  # noqa: E501
        :rtype: list[str]
        """
        return self._alternates

    @alternates.setter
    def alternates(self, alternates):
        """Sets the alternates of this Part.


        :param alternates: The alternates of this Part.  # noqa: E501
        :type: list[str]
        """

        self._alternates = alternates

    @property
    def external_ids(self):
        """Gets the external_ids of this Part.  # noqa: E501


        :return: The external_ids of this Part.  # noqa: E501
        :rtype: ExternalIds
        """
        return self._external_ids

    @external_ids.setter
    def external_ids(self, external_ids):
        """Sets the external_ids of this Part.


        :param external_ids: The external_ids of this Part.  # noqa: E501
        :type: ExternalIds
        """

        self._external_ids = external_ids

    @property
    def molds(self):
        """Gets the molds of this Part.  # noqa: E501


        :return: The molds of this Part.  # noqa: E501
        :rtype: list[str]
        """
        return self._molds

    @molds.setter
    def molds(self, molds):
        """Sets the molds of this Part.


        :param molds: The molds of this Part.  # noqa: E501
        :type: list[str]
        """

        self._molds = molds

    @property
    def name(self):
        """Gets the name of this Part.  # noqa: E501


        :return: The name of this Part.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Part.


        :param name: The name of this Part.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def part_cat_id(self):
        """Gets the part_cat_id of this Part.  # noqa: E501


        :return: The part_cat_id of this Part.  # noqa: E501
        :rtype: int
        """
        return self._part_cat_id

    @part_cat_id.setter
    def part_cat_id(self, part_cat_id):
        """Sets the part_cat_id of this Part.


        :param part_cat_id: The part_cat_id of this Part.  # noqa: E501
        :type: int
        """

        self._part_cat_id = part_cat_id

    @property
    def part_img_url(self):
        """Gets the part_img_url of this Part.  # noqa: E501


        :return: The part_img_url of this Part.  # noqa: E501
        :rtype: str
        """
        return self._part_img_url

    @part_img_url.setter
    def part_img_url(self, part_img_url):
        """Sets the part_img_url of this Part.


        :param part_img_url: The part_img_url of this Part.  # noqa: E501
        :type: str
        """

        self._part_img_url = part_img_url

    @property
    def part_num(self):
        """Gets the part_num of this Part.  # noqa: E501


        :return: The part_num of this Part.  # noqa: E501
        :rtype: str
        """
        return self._part_num

    @part_num.setter
    def part_num(self, part_num):
        """Sets the part_num of this Part.


        :param part_num: The part_num of this Part.  # noqa: E501
        :type: str
        """

        self._part_num = part_num

    @property
    def part_url(self):
        """Gets the part_url of this Part.  # noqa: E501


        :return: The part_url of this Part.  # noqa: E501
        :rtype: str
        """
        return self._part_url

    @part_url.setter
    def part_url(self, part_url):
        """Sets the part_url of this Part.


        :param part_url: The part_url of this Part.  # noqa: E501
        :type: str
        """

        self._part_url = part_url

    @property
    def prints(self):
        """Gets the prints of this Part.  # noqa: E501


        :return: The prints of this Part.  # noqa: E501
        :rtype: list[str]
        """
        return self._prints

    @prints.setter
    def prints(self, prints):
        """Sets the prints of this Part.


        :param prints: The prints of this Part.  # noqa: E501
        :type: list[str]
        """

        self._prints = prints

    @property
    def year_from(self):
        """Gets the year_from of this Part.  # noqa: E501


        :return: The year_from of this Part.  # noqa: E501
        :rtype: int
        """
        return self._year_from

    @year_from.setter
    def year_from(self, year_from):
        """Sets the year_from of this Part.


        :param year_from: The year_from of this Part.  # noqa: E501
        :type: int
        """

        self._year_from = year_from

    @property
    def year_to(self):
        """Gets the year_to of this Part.  # noqa: E501


        :return: The year_to of this Part.  # noqa: E501
        :rtype: int
        """
        return self._year_to

    @year_to.setter
    def year_to(self, year_to):
        """Sets the year_to of this Part.


        :param year_to: The year_to of this Part.  # noqa: E501
        :type: int
        """

        self._year_to = year_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Part):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
