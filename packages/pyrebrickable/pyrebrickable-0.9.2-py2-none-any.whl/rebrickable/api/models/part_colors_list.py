# coding: utf-8

"""
    

        # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PartColorsList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'color_id': 'int',
        'color_name': 'str',
        'elements': 'list[int]',
        'num_set_parts': 'int',
        'num_sets': 'int',
        'part_img_url': 'str'
    }

    attribute_map = {
        'color_id': 'color_id',
        'color_name': 'color_name',
        'elements': 'elements',
        'num_set_parts': 'num_set_parts',
        'num_sets': 'num_sets',
        'part_img_url': 'part_img_url'
    }

    def __init__(self, color_id=None, color_name=None, elements=None, num_set_parts=None, num_sets=None, part_img_url=None):  # noqa: E501
        """PartColorsList - a model defined in OpenAPI"""  # noqa: E501

        self._color_id = None
        self._color_name = None
        self._elements = None
        self._num_set_parts = None
        self._num_sets = None
        self._part_img_url = None
        self.discriminator = None

        if color_id is not None:
            self.color_id = color_id
        if color_name is not None:
            self.color_name = color_name
        if elements is not None:
            self.elements = elements
        if num_set_parts is not None:
            self.num_set_parts = num_set_parts
        if num_sets is not None:
            self.num_sets = num_sets
        if part_img_url is not None:
            self.part_img_url = part_img_url

    @property
    def color_id(self):
        """Gets the color_id of this PartColorsList.  # noqa: E501


        :return: The color_id of this PartColorsList.  # noqa: E501
        :rtype: int
        """
        return self._color_id

    @color_id.setter
    def color_id(self, color_id):
        """Sets the color_id of this PartColorsList.


        :param color_id: The color_id of this PartColorsList.  # noqa: E501
        :type: int
        """

        self._color_id = color_id

    @property
    def color_name(self):
        """Gets the color_name of this PartColorsList.  # noqa: E501


        :return: The color_name of this PartColorsList.  # noqa: E501
        :rtype: str
        """
        return self._color_name

    @color_name.setter
    def color_name(self, color_name):
        """Sets the color_name of this PartColorsList.


        :param color_name: The color_name of this PartColorsList.  # noqa: E501
        :type: str
        """

        self._color_name = color_name

    @property
    def elements(self):
        """Gets the elements of this PartColorsList.  # noqa: E501


        :return: The elements of this PartColorsList.  # noqa: E501
        :rtype: list[int]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this PartColorsList.


        :param elements: The elements of this PartColorsList.  # noqa: E501
        :type: list[int]
        """

        self._elements = elements

    @property
    def num_set_parts(self):
        """Gets the num_set_parts of this PartColorsList.  # noqa: E501


        :return: The num_set_parts of this PartColorsList.  # noqa: E501
        :rtype: int
        """
        return self._num_set_parts

    @num_set_parts.setter
    def num_set_parts(self, num_set_parts):
        """Sets the num_set_parts of this PartColorsList.


        :param num_set_parts: The num_set_parts of this PartColorsList.  # noqa: E501
        :type: int
        """

        self._num_set_parts = num_set_parts

    @property
    def num_sets(self):
        """Gets the num_sets of this PartColorsList.  # noqa: E501


        :return: The num_sets of this PartColorsList.  # noqa: E501
        :rtype: int
        """
        return self._num_sets

    @num_sets.setter
    def num_sets(self, num_sets):
        """Sets the num_sets of this PartColorsList.


        :param num_sets: The num_sets of this PartColorsList.  # noqa: E501
        :type: int
        """

        self._num_sets = num_sets

    @property
    def part_img_url(self):
        """Gets the part_img_url of this PartColorsList.  # noqa: E501


        :return: The part_img_url of this PartColorsList.  # noqa: E501
        :rtype: str
        """
        return self._part_img_url

    @part_img_url.setter
    def part_img_url(self, part_img_url):
        """Sets the part_img_url of this PartColorsList.


        :param part_img_url: The part_img_url of this PartColorsList.  # noqa: E501
        :type: str
        """

        self._part_img_url = part_img_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartColorsList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
