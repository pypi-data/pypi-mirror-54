# coding: utf-8

"""
    Quetzal API

    Quetzal: an API to manage data files and their associated metadata.  # noqa: E501

    OpenAPI spec version: 0.5.0
    Contact: support@quetz.al
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from quetzal.openapi_client.api_client import ApiClient


class DataApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def public_file_details(self, uuid, **kwargs):  # noqa: E501
        """Fetch public file.  # noqa: E501

        This endpoint can be used to fetch the file contents or its metadata. The type of response, data or metadata, depends on the `Accept` request header. In the case of metadata, this endpoint returns the most recent metadata that has been committed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_file_details(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: File identifier (required)
        :return: MetadataByFamily
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_file_details_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.public_file_details_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def public_file_details_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Fetch public file.  # noqa: E501

        This endpoint can be used to fetch the file contents or its metadata. The type of response, data or metadata, depends on the `Accept` request header. In the case of metadata, this endpoint returns the most recent metadata that has been committed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_file_details_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: File identifier (required)
        :return: MetadataByFamily
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_file_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in local_var_params or
                local_var_params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `public_file_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in local_var_params:
            path_params['uuid'] = local_var_params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/octet-stream', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/files/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetadataByFamily',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_file_fetch(self, **kwargs):  # noqa: E501
        """List public files.  # noqa: E501

        Fetches all the files that have been committed.  The file details included in the response only show their base metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_file_fetch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :param str filters: Filters on the workspace files, separated by commas. These filters are applied only the base metadata family. This can be used to get a file by name, path, size or checksum.
        :return: PaginatedFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_file_fetch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.public_file_fetch_with_http_info(**kwargs)  # noqa: E501
            return data

    def public_file_fetch_with_http_info(self, **kwargs):  # noqa: E501
        """List public files.  # noqa: E501

        Fetches all the files that have been committed.  The file details included in the response only show their base metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_file_fetch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :param str filters: Filters on the workspace files, separated by commas. These filters are applied only the base metadata family. This can be used to get a file by name, path, size or checksum.
        :return: PaginatedFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page', 'per_page', 'filters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_file_fetch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'page' in local_var_params and local_var_params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `public_file_fetch`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] > 100000:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `public_file_fetch`, must be a value less than or equal to `100000`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `public_file_fetch`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'per_page' in local_var_params:
            query_params.append(('per_page', local_var_params['per_page']))  # noqa: E501
        if 'filters' in local_var_params:
            query_params.append(('filters', local_var_params['filters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/files/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedFiles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_query_create(self, query, **kwargs):  # noqa: E501
        """Prepare a query.  # noqa: E501

        Queries in Quetzal are saved as a resource, in this case, associated with the global workspace. This endpoint creates one and responds with a *see other* status referencing the query details endpoint.  Since the query details contains the query results as a paginated list, this endpoint also accepts the normal pagination parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_query_create(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Query query: (required)
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :return: Query
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_query_create_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.public_query_create_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def public_query_create_with_http_info(self, query, **kwargs):  # noqa: E501
        """Prepare a query.  # noqa: E501

        Queries in Quetzal are saved as a resource, in this case, associated with the global workspace. This endpoint creates one and responds with a *see other* status referencing the query details endpoint.  Since the query details contains the query results as a paginated list, this endpoint also accepts the normal pagination parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_query_create_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Query query: (required)
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :return: Query
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['query', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_query_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in local_var_params or
                local_var_params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `public_query_create`")  # noqa: E501

        if 'page' in local_var_params and local_var_params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `public_query_create`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] > 100000:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `public_query_create`, must be a value less than or equal to `100000`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `public_query_create`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'per_page' in local_var_params:
            query_params.append(('per_page', local_var_params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'query' in local_var_params:
            body_params = local_var_params['query']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/queries/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Query',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_query_details(self, qid, **kwargs):  # noqa: E501
        """Query details.  # noqa: E501

        The details of a query, which contains the query itself and a paginated list of its results.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_query_details(qid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int qid: Query identifier (required)
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :return: Query
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_query_details_with_http_info(qid, **kwargs)  # noqa: E501
        else:
            (data) = self.public_query_details_with_http_info(qid, **kwargs)  # noqa: E501
            return data

    def public_query_details_with_http_info(self, qid, **kwargs):  # noqa: E501
        """Query details.  # noqa: E501

        The details of a query, which contains the query itself and a paginated list of its results.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_query_details_with_http_info(qid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int qid: Query identifier (required)
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :return: Query
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['qid', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_query_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'qid' is set
        if ('qid' not in local_var_params or
                local_var_params['qid'] is None):
            raise ValueError("Missing the required parameter `qid` when calling `public_query_details`")  # noqa: E501

        if 'page' in local_var_params and local_var_params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `public_query_details`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] > 100000:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `public_query_details`, must be a value less than or equal to `100000`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `public_query_details`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'qid' in local_var_params:
            path_params['qid'] = local_var_params['qid']  # noqa: E501

        query_params = []
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'per_page' in local_var_params:
            query_params.append(('per_page', local_var_params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/queries/{qid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Query',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_query_fetch(self, **kwargs):  # noqa: E501
        """List public queries.  # noqa: E501

        List all the queries that are associated with the global workspace. Note that each query listed here is shown _without_ its results, for brevity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_query_fetch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :return: PaginatedQueries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_query_fetch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.public_query_fetch_with_http_info(**kwargs)  # noqa: E501
            return data

    def public_query_fetch_with_http_info(self, **kwargs):  # noqa: E501
        """List public queries.  # noqa: E501

        List all the queries that are associated with the global workspace. Note that each query listed here is shown _without_ its results, for brevity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_query_fetch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :return: PaginatedQueries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_query_fetch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'page' in local_var_params and local_var_params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `public_query_fetch`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] > 100000:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `public_query_fetch`, must be a value less than or equal to `100000`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `public_query_fetch`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'per_page' in local_var_params:
            query_params.append(('per_page', local_var_params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/queries/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedQueries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_commit(self, wid, **kwargs):  # noqa: E501
        """Commit workspace.  # noqa: E501

        Requests a workspace commit. That is, all metadata added or modified in this workspace will be moved to the global, public workspace, becoming available to all users. Metadata versions will be incremented.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_commit(wid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_commit_with_http_info(wid, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_commit_with_http_info(wid, **kwargs)  # noqa: E501
            return data

    def workspace_commit_with_http_info(self, wid, **kwargs):  # noqa: E501
        """Commit workspace.  # noqa: E501

        Requests a workspace commit. That is, all metadata added or modified in this workspace will be moved to the global, public workspace, becoming available to all users. Metadata versions will be incremented.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_commit_with_http_info(wid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['wid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_commit" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wid' is set
        if ('wid' not in local_var_params or
                local_var_params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `workspace_commit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wid' in local_var_params:
            path_params['wid'] = local_var_params['wid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/workspaces/{wid}/commit', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Workspace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_create(self, workspace, **kwargs):  # noqa: E501
        """Create workspace.  # noqa: E501

        Create a workspace, which initializes the basic resources and information associated with it, and then schedules some background tasks to initialize Cloud resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_create(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Workspace workspace: (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_create_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_create_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def workspace_create_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """Create workspace.  # noqa: E501

        Create a workspace, which initializes the basic resources and information associated with it, and then schedules some background tasks to initialize Cloud resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_create_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Workspace workspace: (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'workspace' is set
        if ('workspace' not in local_var_params or
                local_var_params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `workspace_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'workspace' in local_var_params:
            body_params = local_var_params['workspace']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/workspaces/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Workspace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_delete(self, wid, **kwargs):  # noqa: E501
        """Delete workspace.  # noqa: E501

        Marks a workspace for deletion. Workspaces cannot be immediately deleted, due to complex resource management. Moreover, workspaces are not completely deleted in order to keep a history of workspaces and possibly to add some resurrect functionality. Instead, all of their resources are freed and its status is marked as DELETED.  The current status of the workspace can be requested on this same path, using a GET instead of a DELETE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_delete(wid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_delete_with_http_info(wid, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_delete_with_http_info(wid, **kwargs)  # noqa: E501
            return data

    def workspace_delete_with_http_info(self, wid, **kwargs):  # noqa: E501
        """Delete workspace.  # noqa: E501

        Marks a workspace for deletion. Workspaces cannot be immediately deleted, due to complex resource management. Moreover, workspaces are not completely deleted in order to keep a history of workspaces and possibly to add some resurrect functionality. Instead, all of their resources are freed and its status is marked as DELETED.  The current status of the workspace can be requested on this same path, using a GET instead of a DELETE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_delete_with_http_info(wid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['wid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wid' is set
        if ('wid' not in local_var_params or
                local_var_params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `workspace_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wid' in local_var_params:
            path_params['wid'] = local_var_params['wid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/workspaces/{wid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_details(self, wid, **kwargs):  # noqa: E501
        """Workspace details.  # noqa: E501

        Obtain all information of a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_details(wid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_details_with_http_info(wid, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_details_with_http_info(wid, **kwargs)  # noqa: E501
            return data

    def workspace_details_with_http_info(self, wid, **kwargs):  # noqa: E501
        """Workspace details.  # noqa: E501

        Obtain all information of a workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_details_with_http_info(wid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['wid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wid' is set
        if ('wid' not in local_var_params or
                local_var_params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `workspace_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wid' in local_var_params:
            path_params['wid'] = local_var_params['wid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/workspaces/{wid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Workspace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_fetch(self, **kwargs):  # noqa: E501
        """List workspaces.  # noqa: E501

        List workspace details. Optionally, filter workspaces according to their name, owner or whether they have been deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_fetch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :param str name: Filter workspaces by name
        :param str owner: Filter workspaces by owner
        :param bool deleted: Include deleted workspaces
        :return: PaginatedWorkspaces
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_fetch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.workspace_fetch_with_http_info(**kwargs)  # noqa: E501
            return data

    def workspace_fetch_with_http_info(self, **kwargs):  # noqa: E501
        """List workspaces.  # noqa: E501

        List workspace details. Optionally, filter workspaces according to their name, owner or whether they have been deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_fetch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :param str name: Filter workspaces by name
        :param str owner: Filter workspaces by owner
        :param bool deleted: Include deleted workspaces
        :return: PaginatedWorkspaces
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page', 'per_page', 'name', 'owner', 'deleted']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_fetch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'page' in local_var_params and local_var_params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `workspace_fetch`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] > 100000:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `workspace_fetch`, must be a value less than or equal to `100000`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `workspace_fetch`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'per_page' in local_var_params:
            query_params.append(('per_page', local_var_params['per_page']))  # noqa: E501
        if 'name' in local_var_params:
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'owner' in local_var_params:
            query_params.append(('owner', local_var_params['owner']))  # noqa: E501
        if 'deleted' in local_var_params:
            query_params.append(('deleted', local_var_params['deleted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/workspaces/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedWorkspaces',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_file_create(self, wid, **kwargs):  # noqa: E501
        """Upload file.  # noqa: E501

        Upload a new file to a workspace by sending its contents. The file will not have any additional metadata associated to it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_file_create(wid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :param str path: Path for the filename that will be set on the base metadata. This parameter is provided as a workaround to the fact that files are usually uploaded without their complete path on the filename field of the form-data request.
        :param bool temporary: True when the uploaded file is a temporary file.
        :param file content: File contents in binary.
        :return: BaseMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_file_create_with_http_info(wid, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_file_create_with_http_info(wid, **kwargs)  # noqa: E501
            return data

    def workspace_file_create_with_http_info(self, wid, **kwargs):  # noqa: E501
        """Upload file.  # noqa: E501

        Upload a new file to a workspace by sending its contents. The file will not have any additional metadata associated to it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_file_create_with_http_info(wid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :param str path: Path for the filename that will be set on the base metadata. This parameter is provided as a workaround to the fact that files are usually uploaded without their complete path on the filename field of the form-data request.
        :param bool temporary: True when the uploaded file is a temporary file.
        :param file content: File contents in binary.
        :return: BaseMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['wid', 'path', 'temporary', 'content']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_file_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wid' is set
        if ('wid' not in local_var_params or
                local_var_params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `workspace_file_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wid' in local_var_params:
            path_params['wid'] = local_var_params['wid']  # noqa: E501

        query_params = []
        if 'path' in local_var_params:
            query_params.append(('path', local_var_params['path']))  # noqa: E501
        if 'temporary' in local_var_params:
            query_params.append(('temporary', local_var_params['temporary']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'content' in local_var_params:
            local_var_files['content'] = local_var_params['content']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/workspaces/{wid}/files/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BaseMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_file_delete(self, wid, uuid, **kwargs):  # noqa: E501
        """Delete a file.  # noqa: E501

        Marks a file for deletion. File deletion will only occur when the workspace is committed. This operation will set the base metadata \"state\" to \"deleted\". Note that, in order to delete a file, the workspace must have access to all the families related to the file. In other words, if a file has metadata on families `base`, `foo` and `bar`, then the workspace of this operation must have these three families. Otherwise, this operation returns an error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_file_delete(wid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :param str uuid: File identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_file_delete_with_http_info(wid, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_file_delete_with_http_info(wid, uuid, **kwargs)  # noqa: E501
            return data

    def workspace_file_delete_with_http_info(self, wid, uuid, **kwargs):  # noqa: E501
        """Delete a file.  # noqa: E501

        Marks a file for deletion. File deletion will only occur when the workspace is committed. This operation will set the base metadata \"state\" to \"deleted\". Note that, in order to delete a file, the workspace must have access to all the families related to the file. In other words, if a file has metadata on families `base`, `foo` and `bar`, then the workspace of this operation must have these three families. Otherwise, this operation returns an error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_file_delete_with_http_info(wid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :param str uuid: File identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['wid', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_file_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wid' is set
        if ('wid' not in local_var_params or
                local_var_params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `workspace_file_delete`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in local_var_params or
                local_var_params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `workspace_file_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wid' in local_var_params:
            path_params['wid'] = local_var_params['wid']  # noqa: E501
        if 'uuid' in local_var_params:
            path_params['uuid'] = local_var_params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/workspaces/{wid}/files/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_file_details(self, wid, uuid, **kwargs):  # noqa: E501
        """Fetch file.  # noqa: E501

        Serves the file contents or its metadata, according to the accepted content response header. When the metadata is requested, this returns the updated version with the modifications that may have been introduced in this workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_file_details(wid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :param str uuid: File identifier (required)
        :return: MetadataByFamily
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_file_details_with_http_info(wid, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_file_details_with_http_info(wid, uuid, **kwargs)  # noqa: E501
            return data

    def workspace_file_details_with_http_info(self, wid, uuid, **kwargs):  # noqa: E501
        """Fetch file.  # noqa: E501

        Serves the file contents or its metadata, according to the accepted content response header. When the metadata is requested, this returns the updated version with the modifications that may have been introduced in this workspace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_file_details_with_http_info(wid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :param str uuid: File identifier (required)
        :return: MetadataByFamily
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['wid', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_file_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wid' is set
        if ('wid' not in local_var_params or
                local_var_params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `workspace_file_details`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in local_var_params or
                local_var_params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `workspace_file_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wid' in local_var_params:
            path_params['wid'] = local_var_params['wid']  # noqa: E501
        if 'uuid' in local_var_params:
            path_params['uuid'] = local_var_params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/octet-stream', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/workspaces/{wid}/files/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetadataByFamily',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_file_fetch(self, wid, **kwargs):  # noqa: E501
        """List files.  # noqa: E501

        Fetches all the files that have been added in this workspace. Files whose metadata has been modified in this workspace will also be included.  The file details included in the response only show their base metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_file_fetch(wid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :param str filters: Filters on the workspace files, separated by commas. These filters are applied only the base metadata family. This can be used to get a file by name, path, size or checksum.
        :return: PaginatedFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_file_fetch_with_http_info(wid, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_file_fetch_with_http_info(wid, **kwargs)  # noqa: E501
            return data

    def workspace_file_fetch_with_http_info(self, wid, **kwargs):  # noqa: E501
        """List files.  # noqa: E501

        Fetches all the files that have been added in this workspace. Files whose metadata has been modified in this workspace will also be included.  The file details included in the response only show their base metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_file_fetch_with_http_info(wid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :param str filters: Filters on the workspace files, separated by commas. These filters are applied only the base metadata family. This can be used to get a file by name, path, size or checksum.
        :return: PaginatedFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['wid', 'page', 'per_page', 'filters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_file_fetch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wid' is set
        if ('wid' not in local_var_params or
                local_var_params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `workspace_file_fetch`")  # noqa: E501

        if 'page' in local_var_params and local_var_params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `workspace_file_fetch`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] > 100000:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `workspace_file_fetch`, must be a value less than or equal to `100000`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `workspace_file_fetch`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'wid' in local_var_params:
            path_params['wid'] = local_var_params['wid']  # noqa: E501

        query_params = []
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'per_page' in local_var_params:
            query_params.append(('per_page', local_var_params['per_page']))  # noqa: E501
        if 'filters' in local_var_params:
            query_params.append(('filters', local_var_params['filters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/workspaces/{wid}/files/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedFiles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_file_set_metadata(self, wid, uuid, **kwargs):  # noqa: E501
        """Rewrite metadata.  # noqa: E501

        Change the file metadata entirely. In contrast to the PATCH method to on this endpoint, this method sets the new metadata and discards any previous metadata that was defined before.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_file_set_metadata(wid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :param str uuid: File identifier (required)
        :param MetadataByFamily metadata_by_family:
        :return: MetadataByFamily
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_file_set_metadata_with_http_info(wid, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_file_set_metadata_with_http_info(wid, uuid, **kwargs)  # noqa: E501
            return data

    def workspace_file_set_metadata_with_http_info(self, wid, uuid, **kwargs):  # noqa: E501
        """Rewrite metadata.  # noqa: E501

        Change the file metadata entirely. In contrast to the PATCH method to on this endpoint, this method sets the new metadata and discards any previous metadata that was defined before.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_file_set_metadata_with_http_info(wid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :param str uuid: File identifier (required)
        :param MetadataByFamily metadata_by_family:
        :return: MetadataByFamily
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['wid', 'uuid', 'metadata_by_family']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_file_set_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wid' is set
        if ('wid' not in local_var_params or
                local_var_params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `workspace_file_set_metadata`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in local_var_params or
                local_var_params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `workspace_file_set_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wid' in local_var_params:
            path_params['wid'] = local_var_params['wid']  # noqa: E501
        if 'uuid' in local_var_params:
            path_params['uuid'] = local_var_params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'metadata_by_family' in local_var_params:
            body_params = local_var_params['metadata_by_family']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/workspaces/{wid}/files/{uuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetadataByFamily',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_file_update_metadata(self, wid, uuid, **kwargs):  # noqa: E501
        """Modify metadata.  # noqa: E501

        Change the file metadata by updating it. Updating metadata changes key/value pairs, adding a new key/value pair if does not exist and changing the value if the key already exists. However, it cannot delete a key/value that already exists. To delete metadata, refer to the PUT method on this endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_file_update_metadata(wid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :param str uuid: File identifier (required)
        :param MetadataByFamily metadata_by_family:
        :return: MetadataByFamily
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_file_update_metadata_with_http_info(wid, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_file_update_metadata_with_http_info(wid, uuid, **kwargs)  # noqa: E501
            return data

    def workspace_file_update_metadata_with_http_info(self, wid, uuid, **kwargs):  # noqa: E501
        """Modify metadata.  # noqa: E501

        Change the file metadata by updating it. Updating metadata changes key/value pairs, adding a new key/value pair if does not exist and changing the value if the key already exists. However, it cannot delete a key/value that already exists. To delete metadata, refer to the PUT method on this endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_file_update_metadata_with_http_info(wid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :param str uuid: File identifier (required)
        :param MetadataByFamily metadata_by_family:
        :return: MetadataByFamily
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['wid', 'uuid', 'metadata_by_family']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_file_update_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wid' is set
        if ('wid' not in local_var_params or
                local_var_params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `workspace_file_update_metadata`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in local_var_params or
                local_var_params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `workspace_file_update_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wid' in local_var_params:
            path_params['wid'] = local_var_params['wid']  # noqa: E501
        if 'uuid' in local_var_params:
            path_params['uuid'] = local_var_params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'metadata_by_family' in local_var_params:
            body_params = local_var_params['metadata_by_family']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/workspaces/{wid}/files/{uuid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetadataByFamily',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_query_create(self, wid, query, **kwargs):  # noqa: E501
        """Prepare a query.  # noqa: E501

        Queries in Quetzal are saved as a resource associated to a workspace. This endpoint creates one and responds with a *see other* status referencing the query details endpoint.  Since the query details contains the query results as a paginated list, this endpoint also accepts the normal pagination parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_query_create(wid, query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :param Query query: (required)
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :return: Query
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_query_create_with_http_info(wid, query, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_query_create_with_http_info(wid, query, **kwargs)  # noqa: E501
            return data

    def workspace_query_create_with_http_info(self, wid, query, **kwargs):  # noqa: E501
        """Prepare a query.  # noqa: E501

        Queries in Quetzal are saved as a resource associated to a workspace. This endpoint creates one and responds with a *see other* status referencing the query details endpoint.  Since the query details contains the query results as a paginated list, this endpoint also accepts the normal pagination parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_query_create_with_http_info(wid, query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :param Query query: (required)
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :return: Query
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['wid', 'query', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_query_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wid' is set
        if ('wid' not in local_var_params or
                local_var_params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `workspace_query_create`")  # noqa: E501
        # verify the required parameter 'query' is set
        if ('query' not in local_var_params or
                local_var_params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `workspace_query_create`")  # noqa: E501

        if 'page' in local_var_params and local_var_params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `workspace_query_create`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] > 100000:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `workspace_query_create`, must be a value less than or equal to `100000`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `workspace_query_create`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'wid' in local_var_params:
            path_params['wid'] = local_var_params['wid']  # noqa: E501

        query_params = []
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'per_page' in local_var_params:
            query_params.append(('per_page', local_var_params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'query' in local_var_params:
            body_params = local_var_params['query']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/workspaces/{wid}/queries/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Query',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_query_details(self, wid, qid, **kwargs):  # noqa: E501
        """Query details.  # noqa: E501

        The details of a query, which contains the query itself and a paginated list of its results.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_query_details(wid, qid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :param int qid: Query identifier (required)
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :return: Query
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_query_details_with_http_info(wid, qid, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_query_details_with_http_info(wid, qid, **kwargs)  # noqa: E501
            return data

    def workspace_query_details_with_http_info(self, wid, qid, **kwargs):  # noqa: E501
        """Query details.  # noqa: E501

        The details of a query, which contains the query itself and a paginated list of its results.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_query_details_with_http_info(wid, qid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :param int qid: Query identifier (required)
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :return: Query
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['wid', 'qid', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_query_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wid' is set
        if ('wid' not in local_var_params or
                local_var_params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `workspace_query_details`")  # noqa: E501
        # verify the required parameter 'qid' is set
        if ('qid' not in local_var_params or
                local_var_params['qid'] is None):
            raise ValueError("Missing the required parameter `qid` when calling `workspace_query_details`")  # noqa: E501

        if 'page' in local_var_params and local_var_params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `workspace_query_details`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] > 100000:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `workspace_query_details`, must be a value less than or equal to `100000`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `workspace_query_details`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'wid' in local_var_params:
            path_params['wid'] = local_var_params['wid']  # noqa: E501
        if 'qid' in local_var_params:
            path_params['qid'] = local_var_params['qid']  # noqa: E501

        query_params = []
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'per_page' in local_var_params:
            query_params.append(('per_page', local_var_params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/workspaces/{wid}/queries/{qid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Query',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_query_fetch(self, wid, **kwargs):  # noqa: E501
        """List queries.  # noqa: E501

        List all the queries that are associated with a workspace. Note that each query listed here is shown _without_ its results, for brevity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_query_fetch(wid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :return: PaginatedQueries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_query_fetch_with_http_info(wid, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_query_fetch_with_http_info(wid, **kwargs)  # noqa: E501
            return data

    def workspace_query_fetch_with_http_info(self, wid, **kwargs):  # noqa: E501
        """List queries.  # noqa: E501

        List all the queries that are associated with a workspace. Note that each query listed here is shown _without_ its results, for brevity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_query_fetch_with_http_info(wid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :return: PaginatedQueries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['wid', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_query_fetch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wid' is set
        if ('wid' not in local_var_params or
                local_var_params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `workspace_query_fetch`")  # noqa: E501

        if 'page' in local_var_params and local_var_params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `workspace_query_fetch`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] > 100000:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `workspace_query_fetch`, must be a value less than or equal to `100000`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `workspace_query_fetch`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'wid' in local_var_params:
            path_params['wid'] = local_var_params['wid']  # noqa: E501

        query_params = []
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'per_page' in local_var_params:
            query_params.append(('per_page', local_var_params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/workspaces/{wid}/queries/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedQueries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_scan(self, wid, **kwargs):  # noqa: E501
        """Update views.  # noqa: E501

        Requests the update of the views of a workspace. All the internal databases used for the query operation will be updated to contain the latest modifications of the metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_scan(wid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_scan_with_http_info(wid, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_scan_with_http_info(wid, **kwargs)  # noqa: E501
            return data

    def workspace_scan_with_http_info(self, wid, **kwargs):  # noqa: E501
        """Update views.  # noqa: E501

        Requests the update of the views of a workspace. All the internal databases used for the query operation will be updated to contain the latest modifications of the metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_scan_with_http_info(wid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int wid: Workspace identifier. (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['wid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_scan" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'wid' is set
        if ('wid' not in local_var_params or
                local_var_params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `workspace_scan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wid' in local_var_params:
            path_params['wid'] = local_var_params['wid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/workspaces/{wid}/scan', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Workspace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
