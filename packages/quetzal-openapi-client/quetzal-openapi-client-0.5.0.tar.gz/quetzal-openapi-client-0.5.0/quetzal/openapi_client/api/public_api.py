# coding: utf-8

"""
    Quetzal API

    Quetzal: an API to manage data files and their associated metadata.  # noqa: E501

    OpenAPI spec version: 0.5.0
    Contact: support@quetz.al
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from quetzal.openapi_client.api_client import ApiClient


class PublicApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def public_file_details(self, uuid, **kwargs):  # noqa: E501
        """Fetch public file.  # noqa: E501

        This endpoint can be used to fetch the file contents or its metadata. The type of response, data or metadata, depends on the `Accept` request header. In the case of metadata, this endpoint returns the most recent metadata that has been committed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_file_details(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: File identifier (required)
        :return: MetadataByFamily
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_file_details_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.public_file_details_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def public_file_details_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Fetch public file.  # noqa: E501

        This endpoint can be used to fetch the file contents or its metadata. The type of response, data or metadata, depends on the `Accept` request header. In the case of metadata, this endpoint returns the most recent metadata that has been committed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_file_details_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: File identifier (required)
        :return: MetadataByFamily
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_file_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in local_var_params or
                local_var_params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `public_file_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in local_var_params:
            path_params['uuid'] = local_var_params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/octet-stream', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/files/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetadataByFamily',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_file_fetch(self, **kwargs):  # noqa: E501
        """List public files.  # noqa: E501

        Fetches all the files that have been committed.  The file details included in the response only show their base metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_file_fetch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :param str filters: Filters on the workspace files, separated by commas. These filters are applied only the base metadata family. This can be used to get a file by name, path, size or checksum.
        :return: PaginatedFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_file_fetch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.public_file_fetch_with_http_info(**kwargs)  # noqa: E501
            return data

    def public_file_fetch_with_http_info(self, **kwargs):  # noqa: E501
        """List public files.  # noqa: E501

        Fetches all the files that have been committed.  The file details included in the response only show their base metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_file_fetch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :param str filters: Filters on the workspace files, separated by commas. These filters are applied only the base metadata family. This can be used to get a file by name, path, size or checksum.
        :return: PaginatedFiles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page', 'per_page', 'filters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_file_fetch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'page' in local_var_params and local_var_params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `public_file_fetch`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] > 100000:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `public_file_fetch`, must be a value less than or equal to `100000`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `public_file_fetch`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'per_page' in local_var_params:
            query_params.append(('per_page', local_var_params['per_page']))  # noqa: E501
        if 'filters' in local_var_params:
            query_params.append(('filters', local_var_params['filters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/files/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedFiles',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_query_create(self, query, **kwargs):  # noqa: E501
        """Prepare a query.  # noqa: E501

        Queries in Quetzal are saved as a resource, in this case, associated with the global workspace. This endpoint creates one and responds with a *see other* status referencing the query details endpoint.  Since the query details contains the query results as a paginated list, this endpoint also accepts the normal pagination parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_query_create(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Query query: (required)
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :return: Query
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_query_create_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.public_query_create_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def public_query_create_with_http_info(self, query, **kwargs):  # noqa: E501
        """Prepare a query.  # noqa: E501

        Queries in Quetzal are saved as a resource, in this case, associated with the global workspace. This endpoint creates one and responds with a *see other* status referencing the query details endpoint.  Since the query details contains the query results as a paginated list, this endpoint also accepts the normal pagination parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_query_create_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Query query: (required)
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :return: Query
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['query', 'page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_query_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in local_var_params or
                local_var_params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `public_query_create`")  # noqa: E501

        if 'page' in local_var_params and local_var_params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `public_query_create`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] > 100000:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `public_query_create`, must be a value less than or equal to `100000`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `public_query_create`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'per_page' in local_var_params:
            query_params.append(('per_page', local_var_params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'query' in local_var_params:
            body_params = local_var_params['query']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/queries/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Query',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def public_query_fetch(self, **kwargs):  # noqa: E501
        """List public queries.  # noqa: E501

        List all the queries that are associated with the global workspace. Note that each query listed here is shown _without_ its results, for brevity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_query_fetch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :return: PaginatedQueries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.public_query_fetch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.public_query_fetch_with_http_info(**kwargs)  # noqa: E501
            return data

    def public_query_fetch_with_http_info(self, **kwargs):  # noqa: E501
        """List public queries.  # noqa: E501

        List all the queries that are associated with the global workspace. Note that each query listed here is shown _without_ its results, for brevity.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.public_query_fetch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :return: PaginatedQueries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page', 'per_page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method public_query_fetch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'page' in local_var_params and local_var_params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `public_query_fetch`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] > 100000:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `public_query_fetch`, must be a value less than or equal to `100000`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `public_query_fetch`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'per_page' in local_var_params:
            query_params.append(('per_page', local_var_params['per_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/queries/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedQueries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_create(self, workspace, **kwargs):  # noqa: E501
        """Create workspace.  # noqa: E501

        Create a workspace, which initializes the basic resources and information associated with it, and then schedules some background tasks to initialize Cloud resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_create(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Workspace workspace: (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_create_with_http_info(workspace, **kwargs)  # noqa: E501
        else:
            (data) = self.workspace_create_with_http_info(workspace, **kwargs)  # noqa: E501
            return data

    def workspace_create_with_http_info(self, workspace, **kwargs):  # noqa: E501
        """Create workspace.  # noqa: E501

        Create a workspace, which initializes the basic resources and information associated with it, and then schedules some background tasks to initialize Cloud resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_create_with_http_info(workspace, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Workspace workspace: (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['workspace']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'workspace' is set
        if ('workspace' not in local_var_params or
                local_var_params['workspace'] is None):
            raise ValueError("Missing the required parameter `workspace` when calling `workspace_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'workspace' in local_var_params:
            body_params = local_var_params['workspace']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/workspaces/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Workspace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def workspace_fetch(self, **kwargs):  # noqa: E501
        """List workspaces.  # noqa: E501

        List workspace details. Optionally, filter workspaces according to their name, owner or whether they have been deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_fetch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :param str name: Filter workspaces by name
        :param str owner: Filter workspaces by owner
        :param bool deleted: Include deleted workspaces
        :return: PaginatedWorkspaces
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.workspace_fetch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.workspace_fetch_with_http_info(**kwargs)  # noqa: E501
            return data

    def workspace_fetch_with_http_info(self, **kwargs):  # noqa: E501
        """List workspaces.  # noqa: E501

        List workspace details. Optionally, filter workspaces according to their name, owner or whether they have been deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.workspace_fetch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The page of a collection to return.
        :param int per_page: Number of items to return per page.
        :param str name: Filter workspaces by name
        :param str owner: Filter workspaces by owner
        :param bool deleted: Include deleted workspaces
        :return: PaginatedWorkspaces
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page', 'per_page', 'name', 'owner', 'deleted']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method workspace_fetch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if 'page' in local_var_params and local_var_params['page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `page` when calling `workspace_fetch`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] > 100000:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `workspace_fetch`, must be a value less than or equal to `100000`")  # noqa: E501
        if 'per_page' in local_var_params and local_var_params['per_page'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `per_page` when calling `workspace_fetch`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'per_page' in local_var_params:
            query_params.append(('per_page', local_var_params['per_page']))  # noqa: E501
        if 'name' in local_var_params:
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'owner' in local_var_params:
            query_params.append(('owner', local_var_params['owner']))  # noqa: E501
        if 'deleted' in local_var_params:
            query_params.append(('deleted', local_var_params['deleted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey', 'bearer']  # noqa: E501

        return self.api_client.call_api(
            '/data/workspaces/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedWorkspaces',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
