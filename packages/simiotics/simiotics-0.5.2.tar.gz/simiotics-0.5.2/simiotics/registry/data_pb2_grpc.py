# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import data_pb2 as registry_dot_data__pb2


class DataRegistryStub(object):
  """A DataRegistry is intended to be a source of truth regarding data and associated metadata.
  TODO(neeraj): Figure out how to do health checks
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RegisterSource = channel.unary_unary(
        '/registry.DataRegistry/RegisterSource',
        request_serializer=registry_dot_data__pb2.RegisterSourceRequest.SerializeToString,
        response_deserializer=registry_dot_data__pb2.RegisterSourceResponse.FromString,
        )
    self.UpdateSource = channel.unary_unary(
        '/registry.DataRegistry/UpdateSource',
        request_serializer=registry_dot_data__pb2.UpdateSourceRequest.SerializeToString,
        response_deserializer=registry_dot_data__pb2.UpdateSourceResponse.FromString,
        )
    self.ListSources = channel.unary_unary(
        '/registry.DataRegistry/ListSources',
        request_serializer=registry_dot_data__pb2.ListSourcesRequest.SerializeToString,
        response_deserializer=registry_dot_data__pb2.ListSourcesResponse.FromString,
        )
    self.GetSource = channel.unary_unary(
        '/registry.DataRegistry/GetSource',
        request_serializer=registry_dot_data__pb2.GetSourceRequest.SerializeToString,
        response_deserializer=registry_dot_data__pb2.GetSourceResponse.FromString,
        )
    self.RegisterData = channel.stream_stream(
        '/registry.DataRegistry/RegisterData',
        request_serializer=registry_dot_data__pb2.RegisterDataRequest.SerializeToString,
        response_deserializer=registry_dot_data__pb2.RegisterDataResponse.FromString,
        )
    self.GetData = channel.unary_stream(
        '/registry.DataRegistry/GetData',
        request_serializer=registry_dot_data__pb2.GetDataRequest.SerializeToString,
        response_deserializer=registry_dot_data__pb2.GetDataResponse.FromString,
        )


class DataRegistryServicer(object):
  """A DataRegistry is intended to be a source of truth regarding data and associated metadata.
  TODO(neeraj): Figure out how to do health checks
  """

  def RegisterSource(self, request, context):
    """Register a new data source
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdateSource(self, request, context):
    """Signal that a registered source has been updated
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListSources(self, request, context):
    """List all registered data sources
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSource(self, request, context):
    """Get a specific source of data
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RegisterData(self, request_iterator, context):
    """Register new samples against a given source of data
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetData(self, request, context):
    """Get registered samples from a source of data
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DataRegistryServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RegisterSource': grpc.unary_unary_rpc_method_handler(
          servicer.RegisterSource,
          request_deserializer=registry_dot_data__pb2.RegisterSourceRequest.FromString,
          response_serializer=registry_dot_data__pb2.RegisterSourceResponse.SerializeToString,
      ),
      'UpdateSource': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateSource,
          request_deserializer=registry_dot_data__pb2.UpdateSourceRequest.FromString,
          response_serializer=registry_dot_data__pb2.UpdateSourceResponse.SerializeToString,
      ),
      'ListSources': grpc.unary_unary_rpc_method_handler(
          servicer.ListSources,
          request_deserializer=registry_dot_data__pb2.ListSourcesRequest.FromString,
          response_serializer=registry_dot_data__pb2.ListSourcesResponse.SerializeToString,
      ),
      'GetSource': grpc.unary_unary_rpc_method_handler(
          servicer.GetSource,
          request_deserializer=registry_dot_data__pb2.GetSourceRequest.FromString,
          response_serializer=registry_dot_data__pb2.GetSourceResponse.SerializeToString,
      ),
      'RegisterData': grpc.stream_stream_rpc_method_handler(
          servicer.RegisterData,
          request_deserializer=registry_dot_data__pb2.RegisterDataRequest.FromString,
          response_serializer=registry_dot_data__pb2.RegisterDataResponse.SerializeToString,
      ),
      'GetData': grpc.unary_stream_rpc_method_handler(
          servicer.GetData,
          request_deserializer=registry_dot_data__pb2.GetDataRequest.FromString,
          response_serializer=registry_dot_data__pb2.GetDataResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'registry.DataRegistry', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
