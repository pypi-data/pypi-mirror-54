# -*- coding: utf-8 -*-
from distutils.core import setup

packages = \
['nightcore']

package_data = \
{'': ['*']}

install_requires = \
['click>=7.0,<8.0', 'pydub>=0.23.1,<0.24.0']

entry_points = \
{'console_scripts': ['nightcore = nightcore.cli:cli']}

setup_kwargs = {
    'name': 'nightcore',
    'version': '1.1.0',
    'description': 'Intuitive CLI and API for modifying the speed/pitch of audio',
    'long_description': '<div align="center">\n\n<h1>Nightcore - Easily modify speed/pitch</h1>\n\n<p>\nA focused CLI and API for changing the pitch and speed of audio. <b>Requires FFmpeg.</b>\n</p>\n\n[![Latest release](https://img.shields.io/pypi/v/nightcore?color=blue)](https://pypi.org/project/nightcore)\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/nightcore?color=364ed6)](https://python.org)\n[![Requires FFmpeg](https://img.shields.io/badge/requires-FFmpeg-721d78)](https://ffmpeg.org)\n[![MIT License](https://img.shields.io/pypi/l/nightcore?color=460611)](https://github.com/SeparateRecords/nightcore/blob/master/LICENSE)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000.svg)](https://github.com/psf/black)\n\n<p>\n  <code>\n    <a href="#install">Installation</a> | <a href="#cli">CLI Usage</a> | <a href="#api">API Usage</a>\n  </code>\n</p>\n\n</div>\n\n> I had the idea for this a long time ago, and wanted to make it to prove a point. This program is not intended for, nor should it be used for, copyright infringement and piracy. [**Nightcore is not, and has never been, fair use**](https://www.avvo.com/legal-answers/does-making-a--nightcore--version-of-a-song--speed-2438914.html).\n\n<a name="install"></a>\n\n## Installation\n\n**FFmpeg is a required dependency** - [see here](https://github.com/jiaaro/pydub#getting-ffmpeg-set-up) for instructions on how to set it up!\n\nWith FFmpeg installed, you can use `pip` to install `nightcore` (although [pipx](https://pipxproject.github.io/pipx/) is recommended when only installing the CLI)\n\n```sh\npip install nightcore\n```\n\n### Building from source\n\n`nightcore` is built using [Poetry](https://poetry.eustace.io).\n\n```sh\n$ git clone https://github.com/SeparateRecords/nightcore\n$ poetry install\n$ poetry build\n```\n\n<a name="cli"></a>\n\n## CLI Usage\n\n`nightcore` is predictable and ensures there is no unexpected behaviour. As nightcore relies on FFmpeg under the hood, any format supported by FFmpeg is supported by the CLI.\n\n### Speed/pitch\n\nSpeeding up a track is super easy. By default, it will increase the pitch by 1 tone.\n\n```console\n$ nightcore music.mp3 > out.mp3\n```\n\nYou can manually set the speed increase by passing a number after the file. Without specifying a type, the increase will be in semitones.\n\n```console\n$ nightcore music.mp3 +3 > out.mp3\n```\n\n### Types\n\nYou can change the type of speed increase by providing it after the number. At the moment, nightcore can take any of `semitones`, `tones`, `octaves` or `percent`.\n\n```console\n$ nightcore music.mp3 +3 tones > out.mp3\n```\n\nWhen using percentages, `100 percent` means no change, `150 percent` is 1.5x speed, `80 percent` is 0.8x speed, etc.\n\n```console\n$ nightcore music.mp3 150 percent > out.mp3\n```\n\n### Format & Codec\n\nIf file\'s format cannot be inferred from its extension, you can specify it manually with `--format` (`-f`).\n\n```console\n$ nightcore --format ogg badly_named_file > out.mp3\n```\n\nThe codec can be manually set using `--codec` (`-c`).\n\n### Output\n\nIf the output cannot be redirected, you can specify an output file with `--output` (`-o`). The format will be guessed from the extension.\n\n```console\n$ nightcore music.mp3 --output out.mp3\n```\n\nTo manually set the output format (useful if redirecting), use `--output-format` (`-x`).\n\n```console\n$ nightcore music.mp3 --output-format ogg > music_nc.ogg\n```\n\nIf this option is not provided, the output format will be guessed in this order, defaulting to MP3 if all fail:\n\n1. Output option file extension (`--output example.wav`)\n2. Explicit input file type (`--format ogg`)\n3. Input file extension (`music.ogg`)\n\n### EQ\n\nTo compensate for a pitch increase, the output track will have a default +2db bass boost and -1db treble reduction applied. **To disable this**, pass in `--no-eq`. Note that if the speed is decreased, there will be no automatic EQ.\n\n```console\n$ nightcore music.mp3 --no-eq > out.mp3\n```\n\n<a name="api"></a>\n\n## API Usage\n\nThe nightcore API is built using [pydub](http://pydub.com), a high level audio processing library. It\'s worth reading a bit of its documentation ([or at least the section on exporting](https://github.com/jiaaro/pydub/blob/master/API.markdown#audiosegmentexport)), but you\'ll get by with only having read the examples below.\n\nThe API itself performs no equalization, unlike the CLI - see [nightcore/cli.py](nightcore/cli.py) for the implementation (search "parameters").\n\nAs the word `nightcore` is long, it\'s recommended to import the module as `nc`.\n\n### Quickstart\n\nYou can use any of `Octaves`, `Tones`, `Semitones`, or `Percent` to change speed. These are all subclasses of the base `RelativeChange` class.\n\nUsing the @ operator with one of the above classes is the most convenient way to nightcore a path-like object or `AudioSegment`.\n\n```python\nimport nightcore as nc\n\nnc_audio = "tests/test.mp3" @ nc.Tones(1)\n\nnc_audio.export("tests/test_nc.mp3")\n```\n\n### Advanced Usage\n\n> **nightcore**(*<ins title="An AudioSegment or PathLike object">audio_or_path</ins>*, *<ins title="An int, float, or RelativeChange subclass (see above)">amount</ins>*, \\*\\**<ins title="Additional keyword arguments passed to AudioSegment.from_file if the first argument is not an AudioSegment">kwargs</ins>*) -> *AudioSegment*\n\nThe @ operator is shorthand for the `nightcore` function. The function only needs to be called manually if:\n\n- You need to provide additional keyword arguments to `AudioSegment.from_file`\n- The operator is less readable in context\n- You need to use a function\n\nThere is also an equivalent async function in its own namespace (`nightcore.aio`).\n\n```python\nimport nightcore as nc\n\n# Additional keyword args are passed to AudioSegment.from_file\naudio = nc.nightcore("/tmp/badly_named_audio", nc.Semitones(2), format="ogg")\n```\n\n## Contributing\n\nContributions, feedback, and feature requests are all welcome and greatly appreciated, no matter how small.\n\n## License\n\nThis project is licensed under the MIT license.\n',
    'author': 'SeparateRecords',
    'author_email': 'me@rob.ac',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/SeparateRecords/nightcore',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
