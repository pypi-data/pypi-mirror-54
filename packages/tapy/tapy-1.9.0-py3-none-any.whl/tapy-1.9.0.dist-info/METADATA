Metadata-Version: 2.1
Name: tapy
Version: 1.9.0
Summary: Technical Indicators for the Pandas' Dataframes
Home-page: https://github.com/dmitriiweb/tapy
Author: Dmitrii Kurlov
Author-email: dmitriik@tutanota.com
License: MIT
Keywords: technical analyse indicators pandas forex stocks
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Financial and Insurance Industry
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: Implementation :: CPython
Requires-Dist: pandas (>=0.25.1)
Provides-Extra: dev
Requires-Dist: flake8 (<3.7.0,>=3.6.0) ; extra == 'dev'
Requires-Dist: isort (<4.4.0,>=4.3.4) ; extra == 'dev'
Requires-Dist: coverage ; extra == 'dev'
Requires-Dist: pytest (>=3.10) ; extra == 'dev'
Requires-Dist: readme-renderer ; extra == 'dev'
Requires-Dist: sphinx ; extra == 'dev'
Requires-Dist: sphinx-rtd-theme (>=0.4.0) ; extra == 'dev'
Provides-Extra: dev-docs
Requires-Dist: readme-renderer ; extra == 'dev-docs'
Requires-Dist: sphinx ; extra == 'dev-docs'
Requires-Dist: sphinx-rtd-theme (>=0.4.0) ; extra == 'dev-docs'
Provides-Extra: dev-lint
Requires-Dist: flake8 (<3.7.0,>=3.6.0) ; extra == 'dev-lint'
Requires-Dist: isort (<4.4.0,>=4.3.4) ; extra == 'dev-lint'
Provides-Extra: dev-test
Requires-Dist: coverage ; extra == 'dev-test'
Requires-Dist: pytest (>=3.10) ; extra == 'dev-test'

tapy
====

Technical Indicators for the Pandas' Dataframes

Documentation: https://pandastechindicators.readthedocs.io/en/latest/

Installation
------------

::

    pip install -U tapy

Example
-------

::


    >>> import pandas as pd
    >>> from tapy import Indicators
    >>> df = pd.read_csv('EURUSD60.csv')
    >>> indicators = Indicators(df)
    >>> indicators.accelerator_oscillator(column_name='AC')
    >>> indicators.sma()
    >>> df = indicators.df
    >>> df.tail()
                Date   Time     Open     High      Low    Close  Volume        AC       sma
    3723  2019.09.20  16:00  1.10022  1.10105  1.10010  1.10070    2888 -0.001155  1.101296
    3724  2019.09.20  17:00  1.10068  1.10193  1.10054  1.10184    6116 -0.000820  1.101158
    3725  2019.09.20  18:00  1.10186  1.10194  1.10095  1.10144    3757 -0.000400  1.101056
    3726  2019.09.20  19:00  1.10146  1.10215  1.10121  1.10188    3069  0.000022  1.101216
    3727  2019.09.20  20:00  1.10184  1.10215  1.10147  1.10167    1224  0.000388  1.101506


Available Indicators
--------------------

1. Accelerator Oscillator (AC)
2. Accumulation/Distribution (A/D)
3. Alligator
4. Average True Range (ATR)
5. Awesome Oscillator (AO)
6. Bears Power
7. Bollinger Bands
8. Bulls Power
9. Commodity Channel Index (CCI)
10. DeMarker (DeM)
11. Exponential Moving Average (EMA)
12. Force Index (FRC)
13. Fractals
14. Gator Oscillator
15. Ichimoku Kinko Hyo
16. Market Facilitation Index (BW MFI)
17. Momentum
18. Money Flow Index (MFI)
19. Moving Average Convergence/Divergence (MACD)
20. Simple Moving Average (SMA)
21. Smoothed Moving Average (SMMA)



