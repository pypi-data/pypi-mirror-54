# coding: utf-8

"""
    Bleumi Pay API

    A simple and powerful REST API to integrate ERC20 payments into your business or application  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@bleumi.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from bleumi_pay.models.eth_network import EthNetwork  # noqa: F401,E501


class WalletCreateOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chain': 'EthNetwork',
        'addr': 'str',
        'token': 'str',
        'balance': 'str',
        'block_num': 'str'
    }

    attribute_map = {
        'chain': 'chain',
        'addr': 'addr',
        'token': 'token',
        'balance': 'balance',
        'block_num': 'blockNum'
    }

    def __init__(self, chain=None, addr=None, token=None, balance=None, block_num=None):  # noqa: E501
        """WalletCreateOutput - a model defined in Swagger"""  # noqa: E501
        self._chain = None
        self._addr = None
        self._token = None
        self._balance = None
        self._block_num = None
        self.discriminator = None
        if chain is not None:
            self.chain = chain
        if addr is not None:
            self.addr = addr
        if token is not None:
            self.token = token
        if balance is not None:
            self.balance = balance
        if block_num is not None:    
            self.block_num = block_num

    @property
    def chain(self):
        """Gets the chain of this WalletCreateOutput.  # noqa: E501


        :return: The chain of this WalletCreateOutput.  # noqa: E501
        :rtype: EthNetwork
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this WalletCreateOutput.


        :param chain: The chain of this WalletCreateOutput.  # noqa: E501
        :type: EthNetwork
        """
        if chain is None:
            raise ValueError("Invalid value for `chain`, must not be `None`")  # noqa: E501

        self._chain = chain

    @property
    def addr(self):
        """Gets the addr of this WalletCreateOutput.  # noqa: E501


        :return: The addr of this WalletCreateOutput.  # noqa: E501
        :rtype: str
        """
        return self._addr

    @addr.setter
    def addr(self, addr):
        """Sets the addr of this WalletCreateOutput.


        :param addr: The addr of this WalletCreateOutput.  # noqa: E501
        :type: str
        """
        if addr is None:
            raise ValueError("Invalid value for `addr`, must not be `None`")  # noqa: E501

        self._addr = addr

    @property
    def token(self):
        """Gets the token of this WalletCreateOutput.  # noqa: E501


        :return: The token of this WalletCreateOutput.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this WalletCreateOutput.


        :param token: The token of this WalletCreateOutput.  # noqa: E501
        :type: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def balance(self):
        """Gets the balance of this WalletCreateOutput.  # noqa: E501


        :return: The balance of this WalletCreateOutput.  # noqa: E501
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this WalletCreateOutput.


        :param balance: The balance of this WalletCreateOutput.  # noqa: E501
        :type: str
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    @property
    def block_num(self):
        """Gets the block_num of this WalletCreateOutput.  # noqa: E501


        :return: The block_num of this WalletCreateOutput.  # noqa: E501
        :rtype: str
        """
        return self._block_num

    @block_num.setter
    def block_num(self, block_num):
        """Sets the block_num of this WalletCreateOutput.


        :param block_num: The block_num of this WalletCreateOutput.  # noqa: E501
        :type: str
        """
        if block_num is None:
            raise ValueError("Invalid value for `block_num`, must not be `None`")  # noqa: E501

        self._block_num = block_num

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WalletCreateOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WalletCreateOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
