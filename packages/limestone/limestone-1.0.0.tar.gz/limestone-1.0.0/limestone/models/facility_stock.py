# coding: utf-8

"""
    Limestone Networks API

    LSN API Documentation  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@limestonenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FacilityStock(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'available': 'list[str]',
        'unavailable': 'list[str]',
        'low': 'list[str]',
        'facility': 'str'
    }

    attribute_map = {
        'available': 'available',
        'unavailable': 'unavailable',
        'low': 'low',
        'facility': 'facility'
    }

    def __init__(self, available=None, unavailable=None, low=None, facility=None):  # noqa: E501
        """FacilityStock - a model defined in OpenAPI"""  # noqa: E501

        self._available = None
        self._unavailable = None
        self._low = None
        self._facility = None
        self.discriminator = None

        if available is not None:
            self.available = available
        if unavailable is not None:
            self.unavailable = unavailable
        if low is not None:
            self.low = low
        if facility is not None:
            self.facility = facility

    @property
    def available(self):
        """Gets the available of this FacilityStock.  # noqa: E501


        :return: The available of this FacilityStock.  # noqa: E501
        :rtype: list[str]
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this FacilityStock.


        :param available: The available of this FacilityStock.  # noqa: E501
        :type: list[str]
        """

        self._available = available

    @property
    def unavailable(self):
        """Gets the unavailable of this FacilityStock.  # noqa: E501


        :return: The unavailable of this FacilityStock.  # noqa: E501
        :rtype: list[str]
        """
        return self._unavailable

    @unavailable.setter
    def unavailable(self, unavailable):
        """Sets the unavailable of this FacilityStock.


        :param unavailable: The unavailable of this FacilityStock.  # noqa: E501
        :type: list[str]
        """

        self._unavailable = unavailable

    @property
    def low(self):
        """Gets the low of this FacilityStock.  # noqa: E501


        :return: The low of this FacilityStock.  # noqa: E501
        :rtype: list[str]
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this FacilityStock.


        :param low: The low of this FacilityStock.  # noqa: E501
        :type: list[str]
        """

        self._low = low

    @property
    def facility(self):
        """Gets the facility of this FacilityStock.  # noqa: E501


        :return: The facility of this FacilityStock.  # noqa: E501
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this FacilityStock.


        :param facility: The facility of this FacilityStock.  # noqa: E501
        :type: str
        """

        self._facility = facility

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FacilityStock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
