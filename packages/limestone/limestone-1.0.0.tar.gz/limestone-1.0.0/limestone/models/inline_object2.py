# coding: utf-8

"""
    Limestone Networks API

    LSN API Documentation  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@limestonenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineObject2(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'pubkey': 'str',
        'comment': 'str'
    }

    attribute_map = {
        'name': 'name',
        'pubkey': 'pubkey',
        'comment': 'comment'
    }

    def __init__(self, name=None, pubkey=None, comment=None):  # noqa: E501
        """InlineObject2 - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._pubkey = None
        self._comment = None
        self.discriminator = None

        self.name = name
        self.pubkey = pubkey
        if comment is not None:
            self.comment = comment

    @property
    def name(self):
        """Gets the name of this InlineObject2.  # noqa: E501

        The name of the sshkey  # noqa: E501

        :return: The name of this InlineObject2.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineObject2.

        The name of the sshkey  # noqa: E501

        :param name: The name of this InlineObject2.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def pubkey(self):
        """Gets the pubkey of this InlineObject2.  # noqa: E501

        The public key  # noqa: E501

        :return: The pubkey of this InlineObject2.  # noqa: E501
        :rtype: str
        """
        return self._pubkey

    @pubkey.setter
    def pubkey(self, pubkey):
        """Sets the pubkey of this InlineObject2.

        The public key  # noqa: E501

        :param pubkey: The pubkey of this InlineObject2.  # noqa: E501
        :type: str
        """
        if pubkey is None:
            raise ValueError("Invalid value for `pubkey`, must not be `None`")  # noqa: E501

        self._pubkey = pubkey

    @property
    def comment(self):
        """Gets the comment of this InlineObject2.  # noqa: E501

        The comment for the key. Can also be included with the pubkey.  # noqa: E501

        :return: The comment of this InlineObject2.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this InlineObject2.

        The comment for the key. Can also be included with the pubkey.  # noqa: E501

        :param comment: The comment of this InlineObject2.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
