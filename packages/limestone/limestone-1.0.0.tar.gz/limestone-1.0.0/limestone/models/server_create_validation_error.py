# coding: utf-8

"""
    Limestone Networks API

    LSN API Documentation  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@limestonenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ServerCreateValidationError(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_property': 'str',
        'pointer': 'str',
        'message': 'str',
        'constraint': 'str',
        'context': 'int'
    }

    attribute_map = {
        '_property': 'property',
        'pointer': 'pointer',
        'message': 'message',
        'constraint': 'constraint',
        'context': 'context'
    }

    def __init__(self, _property=None, pointer=None, message=None, constraint=None, context=None):  # noqa: E501
        """ServerCreateValidationError - a model defined in OpenAPI"""  # noqa: E501

        self.__property = None
        self._pointer = None
        self._message = None
        self._constraint = None
        self._context = None
        self.discriminator = None

        if _property is not None:
            self._property = _property
        if pointer is not None:
            self.pointer = pointer
        if message is not None:
            self.message = message
        if constraint is not None:
            self.constraint = constraint
        if context is not None:
            self.context = context

    @property
    def _property(self):
        """Gets the _property of this ServerCreateValidationError.  # noqa: E501

        Property that failed validation  # noqa: E501

        :return: The _property of this ServerCreateValidationError.  # noqa: E501
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this ServerCreateValidationError.

        Property that failed validation  # noqa: E501

        :param _property: The _property of this ServerCreateValidationError.  # noqa: E501
        :type: str
        """

        self.__property = _property

    @property
    def pointer(self):
        """Gets the pointer of this ServerCreateValidationError.  # noqa: E501


        :return: The pointer of this ServerCreateValidationError.  # noqa: E501
        :rtype: str
        """
        return self._pointer

    @pointer.setter
    def pointer(self, pointer):
        """Sets the pointer of this ServerCreateValidationError.


        :param pointer: The pointer of this ServerCreateValidationError.  # noqa: E501
        :type: str
        """

        self._pointer = pointer

    @property
    def message(self):
        """Gets the message of this ServerCreateValidationError.  # noqa: E501


        :return: The message of this ServerCreateValidationError.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ServerCreateValidationError.


        :param message: The message of this ServerCreateValidationError.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def constraint(self):
        """Gets the constraint of this ServerCreateValidationError.  # noqa: E501


        :return: The constraint of this ServerCreateValidationError.  # noqa: E501
        :rtype: str
        """
        return self._constraint

    @constraint.setter
    def constraint(self, constraint):
        """Sets the constraint of this ServerCreateValidationError.


        :param constraint: The constraint of this ServerCreateValidationError.  # noqa: E501
        :type: str
        """

        self._constraint = constraint

    @property
    def context(self):
        """Gets the context of this ServerCreateValidationError.  # noqa: E501


        :return: The context of this ServerCreateValidationError.  # noqa: E501
        :rtype: int
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ServerCreateValidationError.


        :param context: The context of this ServerCreateValidationError.  # noqa: E501
        :type: int
        """

        self._context = context

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerCreateValidationError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
