# coding: utf-8

"""
    Limestone Networks API

    LSN API Documentation  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@limestonenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RaidDiskAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'device': 'str',
        'raid': 'RaidDiskAllOfRaid',
        'format': 'str',
        'format_options': 'str',
        'config_drive': 'bool'
    }

    attribute_map = {
        'device': 'device',
        'raid': 'raid',
        'format': 'format',
        'format_options': 'format_options',
        'config_drive': 'config_drive'
    }

    def __init__(self, device=None, raid=None, format=None, format_options=None, config_drive=False):  # noqa: E501
        """RaidDiskAllOf - a model defined in OpenAPI"""  # noqa: E501

        self._device = None
        self._raid = None
        self._format = None
        self._format_options = None
        self._config_drive = None
        self.discriminator = None

        self.device = device
        self.raid = raid
        if format is not None:
            self.format = format
        if format_options is not None:
            self.format_options = format_options
        if config_drive is not None:
            self.config_drive = config_drive

    @property
    def device(self):
        """Gets the device of this RaidDiskAllOf.  # noqa: E501


        :return: The device of this RaidDiskAllOf.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this RaidDiskAllOf.


        :param device: The device of this RaidDiskAllOf.  # noqa: E501
        :type: str
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")  # noqa: E501

        self._device = device

    @property
    def raid(self):
        """Gets the raid of this RaidDiskAllOf.  # noqa: E501


        :return: The raid of this RaidDiskAllOf.  # noqa: E501
        :rtype: RaidDiskAllOfRaid
        """
        return self._raid

    @raid.setter
    def raid(self, raid):
        """Sets the raid of this RaidDiskAllOf.


        :param raid: The raid of this RaidDiskAllOf.  # noqa: E501
        :type: RaidDiskAllOfRaid
        """
        if raid is None:
            raise ValueError("Invalid value for `raid`, must not be `None`")  # noqa: E501

        self._raid = raid

    @property
    def format(self):
        """Gets the format of this RaidDiskAllOf.  # noqa: E501


        :return: The format of this RaidDiskAllOf.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this RaidDiskAllOf.


        :param format: The format of this RaidDiskAllOf.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def format_options(self):
        """Gets the format_options of this RaidDiskAllOf.  # noqa: E501


        :return: The format_options of this RaidDiskAllOf.  # noqa: E501
        :rtype: str
        """
        return self._format_options

    @format_options.setter
    def format_options(self, format_options):
        """Sets the format_options of this RaidDiskAllOf.


        :param format_options: The format_options of this RaidDiskAllOf.  # noqa: E501
        :type: str
        """

        self._format_options = format_options

    @property
    def config_drive(self):
        """Gets the config_drive of this RaidDiskAllOf.  # noqa: E501

        Build a cloud-init config drive on this device.  # noqa: E501

        :return: The config_drive of this RaidDiskAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._config_drive

    @config_drive.setter
    def config_drive(self, config_drive):
        """Sets the config_drive of this RaidDiskAllOf.

        Build a cloud-init config drive on this device.  # noqa: E501

        :param config_drive: The config_drive of this RaidDiskAllOf.  # noqa: E501
        :type: bool
        """

        self._config_drive = config_drive

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RaidDiskAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
