# coding: utf-8

"""
    Limestone Networks API

    LSN API Documentation  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@limestonenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ServerCreate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'core': 'str',
        'name': 'str',
        'description': 'str',
        'image': 'str',
        'ssh_keys': 'list[str]',
        'user_data': 'str',
        'networks': 'list[str]',
        'quantity': 'int',
        'tags': 'list[str]',
        'admin_password': 'str',
        'custom_metadata': 'dict(str, str)',
        'facility': 'str',
        'partitions': 'list[Disk]',
        'os_disk': 'str'
    }

    attribute_map = {
        'core': 'core',
        'name': 'name',
        'description': 'description',
        'image': 'image',
        'ssh_keys': 'ssh_keys',
        'user_data': 'user_data',
        'networks': 'networks',
        'quantity': 'quantity',
        'tags': 'tags',
        'admin_password': 'admin_password',
        'custom_metadata': 'custom_metadata',
        'facility': 'facility',
        'partitions': 'partitions',
        'os_disk': 'os_disk'
    }

    def __init__(self, core=None, name=None, description=None, image=None, ssh_keys=None, user_data=None, networks=None, quantity=1, tags=None, admin_password=None, custom_metadata=None, facility=None, partitions=None, os_disk=None):  # noqa: E501
        """ServerCreate - a model defined in OpenAPI"""  # noqa: E501

        self._core = None
        self._name = None
        self._description = None
        self._image = None
        self._ssh_keys = None
        self._user_data = None
        self._networks = None
        self._quantity = None
        self._tags = None
        self._admin_password = None
        self._custom_metadata = None
        self._facility = None
        self._partitions = None
        self._os_disk = None
        self.discriminator = None

        self.core = core
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        self.image = image
        if ssh_keys is not None:
            self.ssh_keys = ssh_keys
        if user_data is not None:
            self.user_data = user_data
        if networks is not None:
            self.networks = networks
        if quantity is not None:
            self.quantity = quantity
        if tags is not None:
            self.tags = tags
        if admin_password is not None:
            self.admin_password = admin_password
        if custom_metadata is not None:
            self.custom_metadata = custom_metadata
        if facility is not None:
            self.facility = facility
        self.partitions = partitions
        self.os_disk = os_disk

    @property
    def core(self):
        """Gets the core of this ServerCreate.  # noqa: E501


        :return: The core of this ServerCreate.  # noqa: E501
        :rtype: str
        """
        return self._core

    @core.setter
    def core(self, core):
        """Sets the core of this ServerCreate.


        :param core: The core of this ServerCreate.  # noqa: E501
        :type: str
        """
        if core is None:
            raise ValueError("Invalid value for `core`, must not be `None`")  # noqa: E501

        self._core = core

    @property
    def name(self):
        """Gets the name of this ServerCreate.  # noqa: E501


        :return: The name of this ServerCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServerCreate.


        :param name: The name of this ServerCreate.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 32:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `32`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ServerCreate.  # noqa: E501


        :return: The description of this ServerCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServerCreate.


        :param description: The description of this ServerCreate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def image(self):
        """Gets the image of this ServerCreate.  # noqa: E501


        :return: The image of this ServerCreate.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ServerCreate.


        :param image: The image of this ServerCreate.  # noqa: E501
        :type: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def ssh_keys(self):
        """Gets the ssh_keys of this ServerCreate.  # noqa: E501


        :return: The ssh_keys of this ServerCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._ssh_keys

    @ssh_keys.setter
    def ssh_keys(self, ssh_keys):
        """Sets the ssh_keys of this ServerCreate.


        :param ssh_keys: The ssh_keys of this ServerCreate.  # noqa: E501
        :type: list[str]
        """

        self._ssh_keys = ssh_keys

    @property
    def user_data(self):
        """Gets the user_data of this ServerCreate.  # noqa: E501


        :return: The user_data of this ServerCreate.  # noqa: E501
        :rtype: str
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this ServerCreate.


        :param user_data: The user_data of this ServerCreate.  # noqa: E501
        :type: str
        """

        self._user_data = user_data

    @property
    def networks(self):
        """Gets the networks of this ServerCreate.  # noqa: E501

        Valid values: [\"public\",\"private\",\"public_ddos\"]  # noqa: E501

        :return: The networks of this ServerCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this ServerCreate.

        Valid values: [\"public\",\"private\",\"public_ddos\"]  # noqa: E501

        :param networks: The networks of this ServerCreate.  # noqa: E501
        :type: list[str]
        """

        self._networks = networks

    @property
    def quantity(self):
        """Gets the quantity of this ServerCreate.  # noqa: E501


        :return: The quantity of this ServerCreate.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ServerCreate.


        :param quantity: The quantity of this ServerCreate.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def tags(self):
        """Gets the tags of this ServerCreate.  # noqa: E501

        List of tags to store along with this server. This is expected to be valid json.  # noqa: E501

        :return: The tags of this ServerCreate.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ServerCreate.

        List of tags to store along with this server. This is expected to be valid json.  # noqa: E501

        :param tags: The tags of this ServerCreate.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def admin_password(self):
        """Gets the admin_password of this ServerCreate.  # noqa: E501


        :return: The admin_password of this ServerCreate.  # noqa: E501
        :rtype: str
        """
        return self._admin_password

    @admin_password.setter
    def admin_password(self, admin_password):
        """Sets the admin_password of this ServerCreate.


        :param admin_password: The admin_password of this ServerCreate.  # noqa: E501
        :type: str
        """

        self._admin_password = admin_password

    @property
    def custom_metadata(self):
        """Gets the custom_metadata of this ServerCreate.  # noqa: E501

        Key value hash to store along with this server. This is expected to be valid json.  # noqa: E501

        :return: The custom_metadata of this ServerCreate.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_metadata

    @custom_metadata.setter
    def custom_metadata(self, custom_metadata):
        """Sets the custom_metadata of this ServerCreate.

        Key value hash to store along with this server. This is expected to be valid json.  # noqa: E501

        :param custom_metadata: The custom_metadata of this ServerCreate.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_metadata = custom_metadata

    @property
    def facility(self):
        """Gets the facility of this ServerCreate.  # noqa: E501


        :return: The facility of this ServerCreate.  # noqa: E501
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this ServerCreate.


        :param facility: The facility of this ServerCreate.  # noqa: E501
        :type: str
        """

        self._facility = facility

    @property
    def partitions(self):
        """Gets the partitions of this ServerCreate.  # noqa: E501


        :return: The partitions of this ServerCreate.  # noqa: E501
        :rtype: list[Disk]
        """
        return self._partitions

    @partitions.setter
    def partitions(self, partitions):
        """Sets the partitions of this ServerCreate.


        :param partitions: The partitions of this ServerCreate.  # noqa: E501
        :type: list[Disk]
        """
        if partitions is None:
            raise ValueError("Invalid value for `partitions`, must not be `None`")  # noqa: E501

        self._partitions = partitions

    @property
    def os_disk(self):
        """Gets the os_disk of this ServerCreate.  # noqa: E501

        Installation destination device  # noqa: E501

        :return: The os_disk of this ServerCreate.  # noqa: E501
        :rtype: str
        """
        return self._os_disk

    @os_disk.setter
    def os_disk(self, os_disk):
        """Sets the os_disk of this ServerCreate.

        Installation destination device  # noqa: E501

        :param os_disk: The os_disk of this ServerCreate.  # noqa: E501
        :type: str
        """
        if os_disk is None:
            raise ValueError("Invalid value for `os_disk`, must not be `None`")  # noqa: E501

        self._os_disk = os_disk

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
