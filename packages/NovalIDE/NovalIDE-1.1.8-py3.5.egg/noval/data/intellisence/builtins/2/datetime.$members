(dp0
S'doc'
p1
S'Fast implementation of the datetime type.'
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g3
I01
sS'type'
p7
I5
sS'name'
p8
S'MAXYEAR'
p9
sa(dp10
g3
I01
sg7
I5
sg8
S'MINYEAR'
p11
sa(dp12
g3
I01
sg7
I5
sg8
S'__doc__'
p13
sa(dp14
g3
I01
sg7
I5
sg8
S'__name__'
p15
sa(dp16
g3
I01
sg7
I5
sg8
S'__package__'
p17
sa(dp18
g1
S'date(year, month, day) --> date object'
p19
sg3
I01
sg4
(lp20
(dp21
g3
I01
sg7
I5
sg8
S'__add__'
p22
sa(dp23
g3
I01
sg7
I5
sg8
S'__delattr__'
p24
sa(dp25
g3
I01
sg7
I5
sg8
g13
sa(dp26
g3
I01
sg7
I5
sg8
S'__eq__'
p27
sa(dp28
g1
S'Formats self with strftime.'
p29
sg3
I01
sg7
I2
sg8
S'__format__'
p30
sa(dp31
g3
I01
sg7
I5
sg8
S'__ge__'
p32
sa(dp33
g3
I01
sg7
I5
sg8
S'__getattribute__'
p34
sa(dp35
g3
I01
sg7
I5
sg8
S'__gt__'
p36
sa(dp37
g3
I01
sg7
I5
sg8
S'__hash__'
p38
sa(dp39
g3
I01
sg7
I5
sg8
S'__init__'
p40
sa(dp41
g3
I01
sg7
I5
sg8
S'__le__'
p42
sa(dp43
g3
I01
sg7
I5
sg8
S'__lt__'
p44
sa(dp45
g3
I01
sg7
I5
sg8
S'__ne__'
p46
sa(dp47
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p48
sg3
I01
sg7
I2
sg8
S'__new__'
p49
sa(dp50
g3
I01
sg7
I5
sg8
S'__radd__'
p51
sa(dp52
g1
S'__reduce__() -> (cls, state)'
p53
sg3
I01
sg7
I2
sg8
S'__reduce__'
p54
sa(dp55
g1
S'helper for pickle'
p56
sg3
I01
sg7
I2
sg8
S'__reduce_ex__'
p57
sa(dp58
g3
I01
sg7
I5
sg8
S'__repr__'
p59
sa(dp60
g3
I01
sg7
I5
sg8
S'__rsub__'
p61
sa(dp62
g3
I01
sg7
I5
sg8
S'__setattr__'
p63
sa(dp64
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p65
sg3
I01
sg7
I2
sg8
S'__sizeof__'
p66
sa(dp67
g3
I01
sg7
I5
sg8
S'__str__'
p68
sa(dp69
g3
I01
sg7
I5
sg8
S'__sub__'
p70
sa(dp71
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p72
sg3
I01
sg7
I2
sg8
S'__subclasshook__'
p73
sa(dp74
g1
S'Return ctime() style string.'
p75
sg3
I01
sg7
I2
sg8
S'ctime'
p76
sa(dp77
g3
I01
sg7
I5
sg8
S'day'
p78
sa(dp79
g1
S'int -> date corresponding to a proleptic Gregorian ordinal.'
p80
sg3
I01
sg7
I2
sg8
S'fromordinal'
p81
sa(dp82
g1
S'timestamp -> local date from a POSIX timestamp (like time.time()).'
p83
sg3
I01
sg7
I2
sg8
S'fromtimestamp'
p84
sa(dp85
g1
S'Return a 3-tuple containing ISO year, week number, and weekday.'
p86
sg3
I01
sg7
I2
sg8
S'isocalendar'
p87
sa(dp88
g1
S'Return string in ISO 8601 format, YYYY-MM-DD.'
p89
sg3
I01
sg7
I2
sg8
S'isoformat'
p90
sa(dp91
g1
S'Return the day of the week represented by the date.\nMonday == 1 ... Sunday == 7'
p92
sg3
I01
sg7
I2
sg8
S'isoweekday'
p93
sa(dp94
g3
I01
sg7
I5
sg8
S'max'
p95
sa(dp96
g3
I01
sg7
I5
sg8
S'min'
p97
sa(dp98
g3
I01
sg7
I5
sg8
S'month'
p99
sa(dp100
g1
S'Return date with new specified fields.'
p101
sg3
I01
sg7
I2
sg8
S'replace'
p102
sa(dp103
g3
I01
sg7
I5
sg8
S'resolution'
p104
sa(dp105
g1
S'format -> strftime() style string.'
p106
sg3
I01
sg7
I2
sg8
S'strftime'
p107
sa(dp108
g1
S'Return time tuple, compatible with time.localtime().'
p109
sg3
I01
sg7
I2
sg8
S'timetuple'
p110
sa(dp111
g1
S'Current date or datetime:  same as self.__class__.fromtimestamp(time.time()).'
p112
sg3
I01
sg7
I2
sg8
S'today'
p113
sa(dp114
g1
S'Return proleptic Gregorian ordinal.  January 1 of year 1 is day 1.'
p115
sg3
I01
sg7
I2
sg8
S'toordinal'
p116
sa(dp117
g1
S'Return the day of the week represented by the date.\nMonday == 0 ... Sunday == 6'
p118
sg3
I01
sg7
I2
sg8
S'weekday'
p119
sa(dp120
g3
I01
sg7
I5
sg8
S'year'
p121
sasg7
I3
sg8
S'date'
p122
sa(dp123
g1
S'datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n\nThe year, month and day arguments are required. tzinfo may be None, or an\ninstance of a tzinfo subclass. The remaining arguments may be ints or longs.\n'
p124
sg3
I01
sg4
(lp125
(dp126
g3
I01
sg7
I5
sg8
g22
sa(dp127
g3
I01
sg7
I5
sg8
g24
sa(dp128
g3
I01
sg7
I5
sg8
g13
sa(dp129
g3
I01
sg7
I5
sg8
g27
sa(dp130
g1
S'Formats self with strftime.'
p131
sg3
I01
sg7
I2
sg8
g30
sa(dp132
g3
I01
sg7
I5
sg8
g32
sa(dp133
g3
I01
sg7
I5
sg8
g34
sa(dp134
g3
I01
sg7
I5
sg8
g36
sa(dp135
g3
I01
sg7
I5
sg8
g38
sa(dp136
g3
I01
sg7
I5
sg8
g40
sa(dp137
g3
I01
sg7
I5
sg8
g42
sa(dp138
g3
I01
sg7
I5
sg8
g44
sa(dp139
g3
I01
sg7
I5
sg8
g46
sa(dp140
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p141
sg3
I01
sg7
I2
sg8
g49
sa(dp142
g3
I01
sg7
I5
sg8
g51
sa(dp143
g1
S'__reduce__() -> (cls, state)'
p144
sg3
I01
sg7
I2
sg8
g54
sa(dp145
g1
S'helper for pickle'
p146
sg3
I01
sg7
I2
sg8
g57
sa(dp147
g3
I01
sg7
I5
sg8
g59
sa(dp148
g3
I01
sg7
I5
sg8
g61
sa(dp149
g3
I01
sg7
I5
sg8
g63
sa(dp150
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p151
sg3
I01
sg7
I2
sg8
g66
sa(dp152
g3
I01
sg7
I5
sg8
g68
sa(dp153
g3
I01
sg7
I5
sg8
g70
sa(dp154
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p155
sg3
I01
sg7
I2
sg8
g73
sa(dp156
g1
S'tz -> convert to local time in new timezone tz\n'
p157
sg3
I01
sg7
I2
sg8
S'astimezone'
p158
sa(dp159
g1
S'date, time -> datetime with same date and time fields'
p160
sg3
I01
sg7
I2
sg8
S'combine'
p161
sa(dp162
g1
S'Return ctime() style string.'
p163
sg3
I01
sg7
I2
sg8
g76
sa(dp164
g1
S'Return date object with same year, month and day.'
p165
sg3
I01
sg7
I2
sg8
g122
sa(dp166
g3
I01
sg7
I5
sg8
g78
sa(dp167
g1
S'Return self.tzinfo.dst(self).'
p168
sg3
I01
sg7
I2
sg8
S'dst'
p169
sa(dp170
g1
S'int -> date corresponding to a proleptic Gregorian ordinal.'
p171
sg3
I01
sg7
I2
sg8
g81
sa(dp172
g1
S"timestamp[, tz] -> tz's local time from POSIX timestamp."
p173
sg3
I01
sg7
I2
sg8
g84
sa(dp174
g3
I01
sg7
I5
sg8
S'hour'
p175
sa(dp176
g1
S'Return a 3-tuple containing ISO year, week number, and weekday.'
p177
sg3
I01
sg7
I2
sg8
g87
sa(dp178
g1
S"[sep] -> string in ISO 8601 format, YYYY-MM-DDTHH:MM:SS[.mmmmmm][+HH:MM].\n\nsep is used to separate the year from the time, and defaults to 'T'."
p179
sg3
I01
sg7
I2
sg8
g90
sa(dp180
g1
S'Return the day of the week represented by the date.\nMonday == 1 ... Sunday == 7'
p181
sg3
I01
sg7
I2
sg8
g93
sa(dp182
g3
I01
sg7
I5
sg8
g95
sa(dp183
g3
I01
sg7
I5
sg8
S'microsecond'
p184
sa(dp185
g3
I01
sg7
I5
sg8
g97
sa(dp186
g3
I01
sg7
I5
sg8
S'minute'
p187
sa(dp188
g3
I01
sg7
I5
sg8
g99
sa(dp189
g1
S"[tz] -> new datetime with tz's local day and time."
p190
sg3
I01
sg7
I2
sg8
S'now'
p191
sa(dp192
g1
S'Return datetime with new specified fields.'
p193
sg3
I01
sg7
I2
sg8
g102
sa(dp194
g3
I01
sg7
I5
sg8
g104
sa(dp195
g3
I01
sg7
I5
sg8
S'second'
p196
sa(dp197
g1
S'format -> strftime() style string.'
p198
sg3
I01
sg7
I2
sg8
g107
sa(dp199
g1
S'string, format -> new datetime parsed from a string (like time.strptime()).'
p200
sg3
I01
sg7
I2
sg8
S'strptime'
p201
sa(dp202
g1
S'Return time object with same time but with tzinfo=None.'
p203
sg3
I01
sg7
I2
sg8
S'time'
p204
sa(dp205
g1
S'Return time tuple, compatible with time.localtime().'
p206
sg3
I01
sg7
I2
sg8
g110
sa(dp207
g1
S'Return time object with same time and tzinfo.'
p208
sg3
I01
sg7
I2
sg8
S'timetz'
p209
sa(dp210
g1
S'Current date or datetime:  same as self.__class__.fromtimestamp(time.time()).'
p211
sg3
I01
sg7
I2
sg8
g113
sa(dp212
g1
S'Return proleptic Gregorian ordinal.  January 1 of year 1 is day 1.'
p213
sg3
I01
sg7
I2
sg8
g116
sa(dp214
g3
I01
sg7
I5
sg8
S'tzinfo'
p215
sa(dp216
g1
S'Return self.tzinfo.tzname(self).'
p217
sg3
I01
sg7
I2
sg8
S'tzname'
p218
sa(dp219
g1
S'timestamp -> UTC datetime from a POSIX timestamp (like time.time()).'
p220
sg3
I01
sg7
I2
sg8
S'utcfromtimestamp'
p221
sa(dp222
g1
S'Return a new datetime representing UTC day and time.'
p223
sg3
I01
sg7
I2
sg8
S'utcnow'
p224
sa(dp225
g1
S'Return self.tzinfo.utcoffset(self).'
p226
sg3
I01
sg7
I2
sg8
S'utcoffset'
p227
sa(dp228
g1
S'Return UTC time tuple, compatible with time.localtime().'
p229
sg3
I01
sg7
I2
sg8
S'utctimetuple'
p230
sa(dp231
g1
S'Return the day of the week represented by the date.\nMonday == 0 ... Sunday == 6'
p232
sg3
I01
sg7
I2
sg8
g119
sa(dp233
g3
I01
sg7
I5
sg8
g121
sasg7
I3
sg8
S'datetime'
p234
sa(dp235
g3
I01
sg7
I5
sg8
S'datetime_CAPI'
p236
sa(dp237
g1
S'time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object\n\nAll arguments are optional. tzinfo may be None, or an instance of\na tzinfo subclass. The remaining arguments may be ints or longs.\n'
p238
sg3
I01
sg4
(lp239
(dp240
g3
I01
sg7
I5
sg8
g24
sa(dp241
g3
I01
sg7
I5
sg8
g13
sa(dp242
g3
I01
sg7
I5
sg8
g27
sa(dp243
g1
S'Formats self with strftime.'
p244
sg3
I01
sg7
I2
sg8
g30
sa(dp245
g3
I01
sg7
I5
sg8
g32
sa(dp246
g3
I01
sg7
I5
sg8
g34
sa(dp247
g3
I01
sg7
I5
sg8
g36
sa(dp248
g3
I01
sg7
I5
sg8
g38
sa(dp249
g3
I01
sg7
I5
sg8
g40
sa(dp250
g3
I01
sg7
I5
sg8
g42
sa(dp251
g3
I01
sg7
I5
sg8
g44
sa(dp252
g3
I01
sg7
I5
sg8
g46
sa(dp253
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p254
sg3
I01
sg7
I2
sg8
g49
sa(dp255
g3
I01
sg7
I5
sg8
S'__nonzero__'
p256
sa(dp257
g1
S'__reduce__() -> (cls, state)'
p258
sg3
I01
sg7
I2
sg8
g54
sa(dp259
g1
S'helper for pickle'
p260
sg3
I01
sg7
I2
sg8
g57
sa(dp261
g3
I01
sg7
I5
sg8
g59
sa(dp262
g3
I01
sg7
I5
sg8
g63
sa(dp263
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p264
sg3
I01
sg7
I2
sg8
g66
sa(dp265
g3
I01
sg7
I5
sg8
g68
sa(dp266
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p267
sg3
I01
sg7
I2
sg8
g73
sa(dp268
g1
S'Return self.tzinfo.dst(self).'
p269
sg3
I01
sg7
I2
sg8
g169
sa(dp270
g3
I01
sg7
I5
sg8
g175
sa(dp271
g1
S'Return string in ISO 8601 format, HH:MM:SS[.mmmmmm][+HH:MM].'
p272
sg3
I01
sg7
I2
sg8
g90
sa(dp273
g3
I01
sg7
I5
sg8
g95
sa(dp274
g3
I01
sg7
I5
sg8
g184
sa(dp275
g3
I01
sg7
I5
sg8
g97
sa(dp276
g3
I01
sg7
I5
sg8
g187
sa(dp277
g1
S'Return time with new specified fields.'
p278
sg3
I01
sg7
I2
sg8
g102
sa(dp279
g3
I01
sg7
I5
sg8
g104
sa(dp280
g3
I01
sg7
I5
sg8
g196
sa(dp281
g1
S'format -> strftime() style string.'
p282
sg3
I01
sg7
I2
sg8
g107
sa(dp283
g3
I01
sg7
I5
sg8
g215
sa(dp284
g1
S'Return self.tzinfo.tzname(self).'
p285
sg3
I01
sg7
I2
sg8
g218
sa(dp286
g1
S'Return self.tzinfo.utcoffset(self).'
p287
sg3
I01
sg7
I2
sg8
g227
sasg7
I3
sg8
g204
sa(dp288
g1
S'Difference between two datetime values.'
p289
sg3
I01
sg4
(lp290
(dp291
g3
I01
sg7
I5
sg8
S'__abs__'
p292
sa(dp293
g3
I01
sg7
I5
sg8
g22
sa(dp294
g3
I01
sg7
I5
sg8
g24
sa(dp295
g3
I01
sg7
I5
sg8
S'__div__'
p296
sa(dp297
g3
I01
sg7
I5
sg8
g13
sa(dp298
g3
I01
sg7
I5
sg8
g27
sa(dp299
g3
I01
sg7
I5
sg8
S'__floordiv__'
p300
sa(dp301
g1
S'default object formatter'
p302
sg3
I01
sg7
I2
sg8
g30
sa(dp303
g3
I01
sg7
I5
sg8
g32
sa(dp304
g3
I01
sg7
I5
sg8
g34
sa(dp305
g3
I01
sg7
I5
sg8
g36
sa(dp306
g3
I01
sg7
I5
sg8
g38
sa(dp307
g3
I01
sg7
I5
sg8
g40
sa(dp308
g3
I01
sg7
I5
sg8
g42
sa(dp309
g3
I01
sg7
I5
sg8
g44
sa(dp310
g3
I01
sg7
I5
sg8
S'__mul__'
p311
sa(dp312
g3
I01
sg7
I5
sg8
g46
sa(dp313
g3
I01
sg7
I5
sg8
S'__neg__'
p314
sa(dp315
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p316
sg3
I01
sg7
I2
sg8
g49
sa(dp317
g3
I01
sg7
I5
sg8
g256
sa(dp318
g3
I01
sg7
I5
sg8
S'__pos__'
p319
sa(dp320
g3
I01
sg7
I5
sg8
g51
sa(dp321
g3
I01
sg7
I5
sg8
S'__rdiv__'
p322
sa(dp323
g1
S'__reduce__() -> (cls, state)'
p324
sg3
I01
sg7
I2
sg8
g54
sa(dp325
g1
S'helper for pickle'
p326
sg3
I01
sg7
I2
sg8
g57
sa(dp327
g3
I01
sg7
I5
sg8
g59
sa(dp328
g3
I01
sg7
I5
sg8
S'__rfloordiv__'
p329
sa(dp330
g3
I01
sg7
I5
sg8
S'__rmul__'
p331
sa(dp332
g3
I01
sg7
I5
sg8
g61
sa(dp333
g3
I01
sg7
I5
sg8
g63
sa(dp334
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p335
sg3
I01
sg7
I2
sg8
g66
sa(dp336
g3
I01
sg7
I5
sg8
g68
sa(dp337
g3
I01
sg7
I5
sg8
g70
sa(dp338
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p339
sg3
I01
sg7
I2
sg8
g73
sa(dp340
g3
I01
sg7
I5
sg8
S'days'
p341
sa(dp342
g3
I01
sg7
I5
sg8
g95
sa(dp343
g3
I01
sg7
I5
sg8
S'microseconds'
p344
sa(dp345
g3
I01
sg7
I5
sg8
g97
sa(dp346
g3
I01
sg7
I5
sg8
g104
sa(dp347
g3
I01
sg7
I5
sg8
S'seconds'
p348
sa(dp349
g1
S'Total seconds in the duration.'
p350
sg3
I01
sg7
I2
sg8
S'total_seconds'
p351
sasg7
I3
sg8
S'timedelta'
p352
sa(dp353
g1
S'Abstract base class for time zone info objects.'
p354
sg3
I01
sg4
(lp355
(dp356
g3
I01
sg7
I5
sg8
g24
sa(dp357
g3
I01
sg7
I5
sg8
g13
sa(dp358
g1
S'default object formatter'
p359
sg3
I01
sg7
I2
sg8
g30
sa(dp360
g3
I01
sg7
I5
sg8
g34
sa(dp361
g3
I01
sg7
I5
sg8
g38
sa(dp362
g3
I01
sg7
I5
sg8
g40
sa(dp363
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p364
sg3
I01
sg7
I2
sg8
g49
sa(dp365
g1
S'-> (cls, state)'
p366
sg3
I01
sg7
I2
sg8
g54
sa(dp367
g1
S'helper for pickle'
p368
sg3
I01
sg7
I2
sg8
g57
sa(dp369
g3
I01
sg7
I5
sg8
g59
sa(dp370
g3
I01
sg7
I5
sg8
g63
sa(dp371
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p372
sg3
I01
sg7
I2
sg8
g66
sa(dp373
g3
I01
sg7
I5
sg8
g68
sa(dp374
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p375
sg3
I01
sg7
I2
sg8
g73
sa(dp376
g1
S'datetime -> DST offset in minutes east of UTC.'
p377
sg3
I01
sg7
I2
sg8
g169
sa(dp378
g1
S'datetime in UTC -> datetime in local time.'
p379
sg3
I01
sg7
I2
sg8
S'fromutc'
p380
sa(dp381
g1
S'datetime -> string name of time zone.'
p382
sg3
I01
sg7
I2
sg8
g218
sa(dp383
g1
S'datetime -> minutes east of UTC (negative for west of UTC).'
p384
sg3
I01
sg7
I2
sg8
g227
sasg7
I3
sg8
g215
sasg7
I1
sg8
S'datetime'
p385
s.