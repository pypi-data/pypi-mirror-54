(dp0
S'doc'
p1
S'C implementation and optimization of the Python pickle module.'
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g1
Nsg3
I01
sg4
(lp7
(dp8
g3
I01
sS'type'
p9
I5
sS'name'
p10
S'__delattr__'
p11
sa(dp12
g3
I01
sg9
I5
sg10
S'__dict__'
p13
sa(dp14
g3
I01
sg9
I5
sg10
S'__doc__'
p15
sa(dp16
g1
S'default object formatter'
p17
sg3
I01
sg9
I2
sg10
S'__format__'
p18
sa(dp19
g3
I01
sg9
I5
sg10
S'__getattribute__'
p20
sa(dp21
g3
I01
sg9
I5
sg10
S'__getitem__'
p22
sa(dp23
g3
I01
sg9
I5
sg10
S'__getslice__'
p24
sa(dp25
g3
I01
sg9
I5
sg10
S'__hash__'
p26
sa(dp27
g3
I01
sg9
I5
sg10
S'__init__'
p28
sa(dp29
g3
I01
sg9
I5
sg10
S'__module__'
p30
sa(dp31
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p32
sg3
I01
sg9
I2
sg10
S'__new__'
p33
sa(dp34
g1
Nsg3
I01
sg9
I2
sg10
S'__reduce__'
p35
sa(dp36
g1
S'helper for pickle'
p37
sg3
I01
sg9
I2
sg10
S'__reduce_ex__'
p38
sa(dp39
g3
I01
sg9
I5
sg10
S'__repr__'
p40
sa(dp41
g3
I01
sg9
I5
sg10
S'__setattr__'
p42
sa(dp43
g1
Nsg3
I01
sg9
I2
sg10
S'__setstate__'
p44
sa(dp45
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p46
sg3
I01
sg9
I2
sg10
S'__sizeof__'
p47
sa(dp48
g3
I01
sg9
I5
sg10
S'__str__'
p49
sa(dp50
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p51
sg3
I01
sg9
I2
sg10
S'__subclasshook__'
p52
sa(dp53
g1
Nsg3
I01
sg9
I2
sg10
S'__unicode__'
p54
sa(dp55
g3
I01
sg9
I5
sg10
S'__weakref__'
p56
sa(dp57
g3
I01
sg9
I5
sg10
S'args'
p58
sa(dp59
g3
I01
sg9
I5
sg10
S'message'
p60
sasg9
I3
sg10
S'BadPickleGet'
p61
sa(dp62
g3
I01
sg9
I5
sg10
S'HIGHEST_PROTOCOL'
p63
sa(dp64
g1
Nsg3
I01
sg4
(lp65
(dp66
g3
I01
sg9
I5
sg10
g11
sa(dp67
g3
I01
sg9
I5
sg10
g13
sa(dp68
g3
I01
sg9
I5
sg10
g15
sa(dp69
g1
S'default object formatter'
p70
sg3
I01
sg9
I2
sg10
g18
sa(dp71
g3
I01
sg9
I5
sg10
g20
sa(dp72
g3
I01
sg9
I5
sg10
g22
sa(dp73
g3
I01
sg9
I5
sg10
g24
sa(dp74
g3
I01
sg9
I5
sg10
g26
sa(dp75
g3
I01
sg9
I5
sg10
g28
sa(dp76
g3
I01
sg9
I5
sg10
g30
sa(dp77
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p78
sg3
I01
sg9
I2
sg10
g33
sa(dp79
g1
Nsg3
I01
sg9
I2
sg10
g35
sa(dp80
g1
S'helper for pickle'
p81
sg3
I01
sg9
I2
sg10
g38
sa(dp82
g3
I01
sg9
I5
sg10
g40
sa(dp83
g3
I01
sg9
I5
sg10
g42
sa(dp84
g1
Nsg3
I01
sg9
I2
sg10
g44
sa(dp85
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p86
sg3
I01
sg9
I2
sg10
g47
sa(dp87
g3
I01
sg9
I5
sg10
g49
sa(dp88
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p89
sg3
I01
sg9
I2
sg10
g52
sa(dp90
g1
Nsg3
I01
sg9
I2
sg10
g54
sa(dp91
g3
I01
sg9
I5
sg10
g56
sa(dp92
g3
I01
sg9
I5
sg10
g58
sa(dp93
g3
I01
sg9
I5
sg10
g60
sasg9
I3
sg10
S'PickleError'
p94
sa(dp95
g1
S'Pickler(file, protocol=0) -- Create a pickler.\n\nThis takes a file-like object for writing a pickle data stream.\nThe optional proto argument tells the pickler to use the given\nprotocol; supported protocols are 0, 1, 2.  The default\nprotocol is 0, to be backwards compatible.  (Protocol 0 is the\nonly protocol that can be written to a file opened in text\nmode and read back successfully.  When using a protocol higher\nthan 0, make sure the file is opened in binary mode, both when\npickling and unpickling.)\n\nProtocol 1 is more efficient than protocol 0; protocol 2 is\nmore efficient than protocol 1.\n\nSpecifying a negative protocol version selects the highest\nprotocol version supported.  The higher the protocol used, the\nmore recent the version of Python needed to read the pickle\nproduced.\n\nThe file parameter must have a write() method that accepts a single\nstring argument.  It can thus be an open file object, a StringIO\nobject, or any other custom object that meets this interface.\n'
p96
sg3
I01
sg9
I2
sg10
S'Pickler'
p97
sa(dp98
g1
Nsg3
I01
sg4
(lp99
(dp100
g3
I01
sg9
I5
sg10
g11
sa(dp101
g3
I01
sg9
I5
sg10
g13
sa(dp102
g3
I01
sg9
I5
sg10
g15
sa(dp103
g1
S'default object formatter'
p104
sg3
I01
sg9
I2
sg10
g18
sa(dp105
g3
I01
sg9
I5
sg10
g20
sa(dp106
g3
I01
sg9
I5
sg10
g22
sa(dp107
g3
I01
sg9
I5
sg10
g24
sa(dp108
g3
I01
sg9
I5
sg10
g26
sa(dp109
g3
I01
sg9
I5
sg10
g28
sa(dp110
g3
I01
sg9
I5
sg10
g30
sa(dp111
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p112
sg3
I01
sg9
I2
sg10
g33
sa(dp113
g1
Nsg3
I01
sg9
I2
sg10
g35
sa(dp114
g1
S'helper for pickle'
p115
sg3
I01
sg9
I2
sg10
g38
sa(dp116
g3
I01
sg9
I5
sg10
g40
sa(dp117
g3
I01
sg9
I5
sg10
g42
sa(dp118
g1
Nsg3
I01
sg9
I2
sg10
g44
sa(dp119
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p120
sg3
I01
sg9
I2
sg10
g47
sa(dp121
g3
I01
sg9
I5
sg10
g49
sa(dp122
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p123
sg3
I01
sg9
I2
sg10
g52
sa(dp124
g1
Nsg3
I01
sg9
I2
sg10
g54
sa(dp125
g3
I01
sg9
I5
sg10
g56
sa(dp126
g3
I01
sg9
I5
sg10
g58
sa(dp127
g3
I01
sg9
I5
sg10
g60
sasg9
I3
sg10
S'PicklingError'
p128
sa(dp129
g1
Nsg3
I01
sg4
(lp130
(dp131
g3
I01
sg9
I5
sg10
g11
sa(dp132
g3
I01
sg9
I5
sg10
g13
sa(dp133
g3
I01
sg9
I5
sg10
g15
sa(dp134
g1
S'default object formatter'
p135
sg3
I01
sg9
I2
sg10
g18
sa(dp136
g3
I01
sg9
I5
sg10
g20
sa(dp137
g3
I01
sg9
I5
sg10
g22
sa(dp138
g3
I01
sg9
I5
sg10
g24
sa(dp139
g3
I01
sg9
I5
sg10
g26
sa(dp140
g3
I01
sg9
I5
sg10
g28
sa(dp141
g3
I01
sg9
I5
sg10
g30
sa(dp142
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p143
sg3
I01
sg9
I2
sg10
g33
sa(dp144
g1
Nsg3
I01
sg9
I2
sg10
g35
sa(dp145
g1
S'helper for pickle'
p146
sg3
I01
sg9
I2
sg10
g38
sa(dp147
g3
I01
sg9
I5
sg10
g40
sa(dp148
g3
I01
sg9
I5
sg10
g42
sa(dp149
g1
Nsg3
I01
sg9
I2
sg10
g44
sa(dp150
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p151
sg3
I01
sg9
I2
sg10
g47
sa(dp152
g3
I01
sg9
I5
sg10
g49
sa(dp153
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p154
sg3
I01
sg9
I2
sg10
g52
sa(dp155
g1
Nsg3
I01
sg9
I2
sg10
g54
sa(dp156
g3
I01
sg9
I5
sg10
g56
sa(dp157
g3
I01
sg9
I5
sg10
g58
sa(dp158
g3
I01
sg9
I5
sg10
g60
sasg9
I3
sg10
S'UnpickleableError'
p159
sa(dp160
g1
S'Unpickler(file) -- Create an unpickler.'
p161
sg3
I01
sg9
I2
sg10
S'Unpickler'
p162
sa(dp163
g1
Nsg3
I01
sg4
(lp164
(dp165
g3
I01
sg9
I5
sg10
g11
sa(dp166
g3
I01
sg9
I5
sg10
g13
sa(dp167
g3
I01
sg9
I5
sg10
g15
sa(dp168
g1
S'default object formatter'
p169
sg3
I01
sg9
I2
sg10
g18
sa(dp170
g3
I01
sg9
I5
sg10
g20
sa(dp171
g3
I01
sg9
I5
sg10
g22
sa(dp172
g3
I01
sg9
I5
sg10
g24
sa(dp173
g3
I01
sg9
I5
sg10
g26
sa(dp174
g3
I01
sg9
I5
sg10
g28
sa(dp175
g3
I01
sg9
I5
sg10
g30
sa(dp176
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p177
sg3
I01
sg9
I2
sg10
g33
sa(dp178
g1
Nsg3
I01
sg9
I2
sg10
g35
sa(dp179
g1
S'helper for pickle'
p180
sg3
I01
sg9
I2
sg10
g38
sa(dp181
g3
I01
sg9
I5
sg10
g40
sa(dp182
g3
I01
sg9
I5
sg10
g42
sa(dp183
g1
Nsg3
I01
sg9
I2
sg10
g44
sa(dp184
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p185
sg3
I01
sg9
I2
sg10
g47
sa(dp186
g3
I01
sg9
I5
sg10
g49
sa(dp187
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p188
sg3
I01
sg9
I2
sg10
g52
sa(dp189
g1
Nsg3
I01
sg9
I2
sg10
g54
sa(dp190
g3
I01
sg9
I5
sg10
g56
sa(dp191
g3
I01
sg9
I5
sg10
g58
sa(dp192
g3
I01
sg9
I5
sg10
g60
sasg9
I3
sg10
S'UnpicklingError'
p193
sa(dp194
g3
I01
sg9
I5
sg10
S'__builtins__'
p195
sa(dp196
g3
I01
sg9
I5
sg10
g15
sa(dp197
g3
I01
sg9
I5
sg10
S'__name__'
p198
sa(dp199
g3
I01
sg9
I5
sg10
S'__package__'
p200
sa(dp201
g3
I01
sg9
I5
sg10
S'__version__'
p202
sa(dp203
g3
I01
sg9
I5
sg10
S'compatible_formats'
p204
sa(dp205
g1
S'dump(obj, file, protocol=0) -- Write an object in pickle format to the given file.\n\nSee the Pickler docstring for the meaning of optional argument proto.'
p206
sg3
I01
sg9
I2
sg10
S'dump'
p207
sa(dp208
g1
S'dumps(obj, protocol=0) -- Return a string containing an object in pickle format.\n\nSee the Pickler docstring for the meaning of optional argument proto.'
p209
sg3
I01
sg9
I2
sg10
S'dumps'
p210
sa(dp211
g3
I01
sg9
I5
sg10
S'format_version'
p212
sa(dp213
g1
S'load(file) -- Load a pickle from the given file'
p214
sg3
I01
sg9
I2
sg10
S'load'
p215
sa(dp216
g1
S'loads(string) -- Load a pickle from the given string'
p217
sg3
I01
sg9
I2
sg10
S'loads'
p218
sasg9
I1
sg10
S'cPickle'
p219
s.