(dp0
S'doc'
p1
S'This module is always available.  It provides access to the\nmathematical functions defined by the C standard.'
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g3
I01
sS'type'
p7
I5
sS'name'
p8
S'__doc__'
p9
sa(dp10
g3
I01
sg7
I5
sg8
S'__name__'
p11
sa(dp12
g3
I01
sg7
I5
sg8
S'__package__'
p13
sa(dp14
g1
S'acos(x)\n\nReturn the arc cosine (measured in radians) of x.'
p15
sg3
I01
sg7
I2
sg8
S'acos'
p16
sa(dp17
g1
S'acosh(x)\n\nReturn the inverse hyperbolic cosine of x.'
p18
sg3
I01
sg7
I2
sg8
S'acosh'
p19
sa(dp20
g1
S'asin(x)\n\nReturn the arc sine (measured in radians) of x.'
p21
sg3
I01
sg7
I2
sg8
S'asin'
p22
sa(dp23
g1
S'asinh(x)\n\nReturn the inverse hyperbolic sine of x.'
p24
sg3
I01
sg7
I2
sg8
S'asinh'
p25
sa(dp26
g1
S'atan(x)\n\nReturn the arc tangent (measured in radians) of x.'
p27
sg3
I01
sg7
I2
sg8
S'atan'
p28
sa(dp29
g1
S'atan2(y, x)\n\nReturn the arc tangent (measured in radians) of y/x.\nUnlike atan(y/x), the signs of both x and y are considered.'
p30
sg3
I01
sg7
I2
sg8
S'atan2'
p31
sa(dp32
g1
S'atanh(x)\n\nReturn the inverse hyperbolic tangent of x.'
p33
sg3
I01
sg7
I2
sg8
S'atanh'
p34
sa(dp35
g1
S'ceil(x)\n\nReturn the ceiling of x as a float.\nThis is the smallest integral value >= x.'
p36
sg3
I01
sg7
I2
sg8
S'ceil'
p37
sa(dp38
g1
S'copysign(x, y)\n\nReturn x with the sign of y.'
p39
sg3
I01
sg7
I2
sg8
S'copysign'
p40
sa(dp41
g1
S'cos(x)\n\nReturn the cosine of x (measured in radians).'
p42
sg3
I01
sg7
I2
sg8
S'cos'
p43
sa(dp44
g1
S'cosh(x)\n\nReturn the hyperbolic cosine of x.'
p45
sg3
I01
sg7
I2
sg8
S'cosh'
p46
sa(dp47
g1
S'degrees(x)\n\nConvert angle x from radians to degrees.'
p48
sg3
I01
sg7
I2
sg8
S'degrees'
p49
sa(dp50
g3
I01
sg7
I5
sg8
S'e'
p51
sa(dp52
g1
S'erf(x)\n\nError function at x.'
p53
sg3
I01
sg7
I2
sg8
S'erf'
p54
sa(dp55
g1
S'erfc(x)\n\nComplementary error function at x.'
p56
sg3
I01
sg7
I2
sg8
S'erfc'
p57
sa(dp58
g1
S'exp(x)\n\nReturn e raised to the power of x.'
p59
sg3
I01
sg7
I2
sg8
S'exp'
p60
sa(dp61
g1
S'expm1(x)\n\nReturn exp(x)-1.\nThis function avoids the loss of precision involved in the direct evaluation of exp(x)-1 for small x.'
p62
sg3
I01
sg7
I2
sg8
S'expm1'
p63
sa(dp64
g1
S'fabs(x)\n\nReturn the absolute value of the float x.'
p65
sg3
I01
sg7
I2
sg8
S'fabs'
p66
sa(dp67
g1
S'factorial(x) -> Integral\n\nFind x!. Raise a ValueError if x is negative or non-integral.'
p68
sg3
I01
sg7
I2
sg8
S'factorial'
p69
sa(dp70
g1
S'floor(x)\n\nReturn the floor of x as a float.\nThis is the largest integral value <= x.'
p71
sg3
I01
sg7
I2
sg8
S'floor'
p72
sa(dp73
g1
S'fmod(x, y)\n\nReturn fmod(x, y), according to platform C.  x % y may differ.'
p74
sg3
I01
sg7
I2
sg8
S'fmod'
p75
sa(dp76
g1
S'frexp(x)\n\nReturn the mantissa and exponent of x, as pair (m, e).\nm is a float and e is an int, such that x = m * 2.**e.\nIf x is 0, m and e are both 0.  Else 0.5 <= abs(m) < 1.0.'
p77
sg3
I01
sg7
I2
sg8
S'frexp'
p78
sa(dp79
g1
S'fsum(iterable)\n\nReturn an accurate floating point sum of values in the iterable.\nAssumes IEEE-754 floating point arithmetic.'
p80
sg3
I01
sg7
I2
sg8
S'fsum'
p81
sa(dp82
g1
S'gamma(x)\n\nGamma function at x.'
p83
sg3
I01
sg7
I2
sg8
S'gamma'
p84
sa(dp85
g1
S'hypot(x, y)\n\nReturn the Euclidean distance, sqrt(x*x + y*y).'
p86
sg3
I01
sg7
I2
sg8
S'hypot'
p87
sa(dp88
g1
S'isinf(x) -> bool\n\nCheck if float x is infinite (positive or negative).'
p89
sg3
I01
sg7
I2
sg8
S'isinf'
p90
sa(dp91
g1
S'isnan(x) -> bool\n\nCheck if float x is not a number (NaN).'
p92
sg3
I01
sg7
I2
sg8
S'isnan'
p93
sa(dp94
g1
S'ldexp(x, i)\n\nReturn x * (2**i).'
p95
sg3
I01
sg7
I2
sg8
S'ldexp'
p96
sa(dp97
g1
S'lgamma(x)\n\nNatural logarithm of absolute value of Gamma function at x.'
p98
sg3
I01
sg7
I2
sg8
S'lgamma'
p99
sa(dp100
g1
S'log(x[, base])\n\nReturn the logarithm of x to the given base.\nIf the base not specified, returns the natural logarithm (base e) of x.'
p101
sg3
I01
sg7
I2
sg8
S'log'
p102
sa(dp103
g1
S'log10(x)\n\nReturn the base 10 logarithm of x.'
p104
sg3
I01
sg7
I2
sg8
S'log10'
p105
sa(dp106
g1
S'log1p(x)\n\nReturn the natural logarithm of 1+x (base e).\nThe result is computed in a way which is accurate for x near zero.'
p107
sg3
I01
sg7
I2
sg8
S'log1p'
p108
sa(dp109
g1
S'modf(x)\n\nReturn the fractional and integer parts of x.  Both results carry the sign\nof x and are floats.'
p110
sg3
I01
sg7
I2
sg8
S'modf'
p111
sa(dp112
g3
I01
sg7
I5
sg8
S'pi'
p113
sa(dp114
g1
S'pow(x, y)\n\nReturn x**y (x to the power of y).'
p115
sg3
I01
sg7
I2
sg8
S'pow'
p116
sa(dp117
g1
S'radians(x)\n\nConvert angle x from degrees to radians.'
p118
sg3
I01
sg7
I2
sg8
S'radians'
p119
sa(dp120
g1
S'sin(x)\n\nReturn the sine of x (measured in radians).'
p121
sg3
I01
sg7
I2
sg8
S'sin'
p122
sa(dp123
g1
S'sinh(x)\n\nReturn the hyperbolic sine of x.'
p124
sg3
I01
sg7
I2
sg8
S'sinh'
p125
sa(dp126
g1
S'sqrt(x)\n\nReturn the square root of x.'
p127
sg3
I01
sg7
I2
sg8
S'sqrt'
p128
sa(dp129
g1
S'tan(x)\n\nReturn the tangent of x (measured in radians).'
p130
sg3
I01
sg7
I2
sg8
S'tan'
p131
sa(dp132
g1
S'tanh(x)\n\nReturn the hyperbolic tangent of x.'
p133
sg3
I01
sg7
I2
sg8
S'tanh'
p134
sa(dp135
g1
S'trunc(x:Real) -> Integral\n\nTruncates x to the nearest Integral toward 0. Uses the __trunc__ magic method.'
p136
sg3
I01
sg7
I2
sg8
S'trunc'
p137
sasg7
I1
sg8
S'math'
p138
s.