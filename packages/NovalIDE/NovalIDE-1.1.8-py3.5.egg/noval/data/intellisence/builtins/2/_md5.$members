(dp0
S'doc'
p1
S"This module implements the interface to RSA's MD5 message digest\nalgorithm (see also Internet RFC 1321). Its use is quite\nstraightforward: use the new() to create an md5 object. You can now\nfeed this object with arbitrary strings using the update() method, and\nat any point you can ask it for the digest (a strong kind of 128-bit\nchecksum, a.k.a. ``fingerprint'') of the concatenation of the strings\nfed to it so far using the digest() method.\n\nFunctions:\n\nnew([arg]) -- return a new md5 object, initialized with arg if provided\nmd5([arg]) -- DEPRECATED, same as new, but for compatibility\n\nSpecial Objects:\n\nMD5Type -- type object for md5 objects"
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g1
S'An md5 represents the object used to calculate the MD5 checksum of a\nstring of information.\n\nMethods:\n\nupdate() -- updates the current digest with an additional string\ndigest() -- return the current digest value\nhexdigest() -- return the current digest as a string of hexadecimal digits\ncopy() -- return a copy of the current md5 object'
p7
sg3
I01
sg4
(lp8
(dp9
g3
I01
sS'type'
p10
I5
sS'name'
p11
S'__delattr__'
p12
sa(dp13
g3
I01
sg10
I5
sg11
S'__doc__'
p14
sa(dp15
g1
S'default object formatter'
p16
sg3
I01
sg10
I2
sg11
S'__format__'
p17
sa(dp18
g3
I01
sg10
I5
sg11
S'__getattribute__'
p19
sa(dp20
g3
I01
sg10
I5
sg11
S'__hash__'
p21
sa(dp22
g3
I01
sg10
I5
sg11
S'__init__'
p23
sa(dp24
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p25
sg3
I01
sg10
I2
sg11
S'__new__'
p26
sa(dp27
g1
S'helper for pickle'
p28
sg3
I01
sg10
I2
sg11
S'__reduce__'
p29
sa(dp30
g1
S'helper for pickle'
p31
sg3
I01
sg10
I2
sg11
S'__reduce_ex__'
p32
sa(dp33
g3
I01
sg10
I5
sg11
S'__repr__'
p34
sa(dp35
g3
I01
sg10
I5
sg11
S'__setattr__'
p36
sa(dp37
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p38
sg3
I01
sg10
I2
sg11
S'__sizeof__'
p39
sa(dp40
g3
I01
sg10
I5
sg11
S'__str__'
p41
sa(dp42
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p43
sg3
I01
sg10
I2
sg11
S'__subclasshook__'
p44
sa(dp45
g3
I01
sg10
I5
sg11
S'block_size'
p46
sa(dp47
g1
S"copy() -> md5 object\n\nReturn a copy (``clone'') of the md5 object."
p48
sg3
I01
sg10
I2
sg11
S'copy'
p49
sa(dp50
g1
S'digest() -> string\n\nReturn the digest of the strings passed to the update() method so\nfar. This is a 16-byte string which may contain non-ASCII characters,\nincluding null bytes.'
p51
sg3
I01
sg10
I2
sg11
S'digest'
p52
sa(dp53
g3
I01
sg10
I5
sg11
S'digest_size'
p54
sa(dp55
g3
I01
sg10
I5
sg11
S'digestsize'
p56
sa(dp57
g1
S'hexdigest() -> string\n\nLike digest(), but returns the digest as a string of hexadecimal digits.'
p58
sg3
I01
sg10
I2
sg11
S'hexdigest'
p59
sa(dp60
g3
I01
sg10
I5
sg11
g11
sa(dp61
g1
S'update (arg)\n\nUpdate the md5 object with the string arg. Repeated calls are\nequivalent to a single call with the concatenation of all the\narguments.'
p62
sg3
I01
sg10
I2
sg11
S'update'
p63
sasg10
I3
sg11
S'MD5Type'
p64
sa(dp65
g3
I01
sg10
I5
sg11
g14
sa(dp66
g3
I01
sg10
I5
sg11
S'__name__'
p67
sa(dp68
g3
I01
sg10
I5
sg11
S'__package__'
p69
sa(dp70
g3
I01
sg10
I5
sg11
g54
sa(dp71
g1
S'new([arg]) -> md5 object\n\nReturn a new md5 object. If arg is present, the method call update(arg)\nis made.'
p72
sg3
I01
sg10
I2
sg11
S'new'
p73
sasg10
I1
sg11
S'_md5'
p74
s.