(dp0
S'doc'
p1
S"Functions to convert between Python values and C structs represented\nas Python strings. It uses format strings (explained below) as compact\ndescriptions of the lay-out of the C structs and the intended conversion\nto/from Python values.\n\nThe optional first format char indicates byte order, size and alignment:\n  @: native order, size & alignment (default)\n  =: native order, std. size & alignment\n  <: little-endian, std. size & alignment\n  >: big-endian, std. size & alignment\n  !: same as >\n\nThe remaining chars indicate types of args and must match exactly;\nthese can be preceded by a decimal repeat count:\n  x: pad byte (no data); c:char; b:signed byte; B:unsigned byte;\n  ?: _Bool (requires C99; if not available, char is used instead)\n  h:short; H:unsigned short; i:int; I:unsigned int;\n  l:long; L:unsigned long; f:float; d:double.\nSpecial cases (preceding decimal count indicates length):\n  s:string (array of char); p: pascal string (with count byte).\nSpecial case (only available in native format):\n  P:an integer type that is wide enough to hold a pointer.\nSpecial case (not in native mode unless 'long long' in platform C):\n  q:long long; Q:unsigned long long\nWhitespace between formats is ignored.\n\nThe variable struct.error is an exception raised on errors.\n"
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g1
S'Compiled struct object'
p7
sg3
I01
sg4
(lp8
(dp9
g3
I01
sS'type'
p10
I5
sS'name'
p11
S'__delattr__'
p12
sa(dp13
g3
I01
sg10
I5
sg11
S'__doc__'
p14
sa(dp15
g1
S'default object formatter'
p16
sg3
I01
sg10
I2
sg11
S'__format__'
p17
sa(dp18
g3
I01
sg10
I5
sg11
S'__getattribute__'
p19
sa(dp20
g3
I01
sg10
I5
sg11
S'__hash__'
p21
sa(dp22
g3
I01
sg10
I5
sg11
S'__init__'
p23
sa(dp24
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p25
sg3
I01
sg10
I2
sg11
S'__new__'
p26
sa(dp27
g1
S'helper for pickle'
p28
sg3
I01
sg10
I2
sg11
S'__reduce__'
p29
sa(dp30
g1
S'helper for pickle'
p31
sg3
I01
sg10
I2
sg11
S'__reduce_ex__'
p32
sa(dp33
g3
I01
sg10
I5
sg11
S'__repr__'
p34
sa(dp35
g3
I01
sg10
I5
sg11
S'__setattr__'
p36
sa(dp37
g1
S'S.__sizeof__() -> size of S in memory, in bytes'
p38
sg3
I01
sg10
I2
sg11
S'__sizeof__'
p39
sa(dp40
g3
I01
sg10
I5
sg11
S'__str__'
p41
sa(dp42
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p43
sg3
I01
sg10
I2
sg11
S'__subclasshook__'
p44
sa(dp45
g3
I01
sg10
I5
sg11
S'format'
p46
sa(dp47
g1
S"S.pack(v1, v2, ...) -> string\n\nReturn a string containing values v1, v2, ... packed according to this\nStruct's format. See struct.__doc__ for more on format strings."
p48
sg3
I01
sg10
I2
sg11
S'pack'
p49
sa(dp50
g1
S"S.pack_into(buffer, offset, v1, v2, ...)\n\nPack the values v1, v2, ... according to this Struct's format, write \nthe packed bytes into the writable buffer buf starting at offset.  Note\nthat the offset is not an optional argument.  See struct.__doc__ for \nmore on format strings."
p51
sg3
I01
sg10
I2
sg11
S'pack_into'
p52
sa(dp53
g3
I01
sg10
I5
sg11
S'size'
p54
sa(dp55
g1
S"S.unpack(str) -> (v1, v2, ...)\n\nReturn tuple containing values unpacked according to this Struct's format.\nRequires len(str) == self.size. See struct.__doc__ for more on format\nstrings."
p56
sg3
I01
sg10
I2
sg11
S'unpack'
p57
sa(dp58
g1
S"S.unpack_from(buffer[, offset]) -> (v1, v2, ...)\n\nReturn tuple containing values unpacked according to this Struct's format.\nUnlike unpack, unpack_from can unpack values from any object supporting\nthe buffer API, not just str. Requires len(buffer[offset:]) >= self.size.\nSee struct.__doc__ for more on format strings."
p59
sg3
I01
sg10
I2
sg11
S'unpack_from'
p60
sasg10
I3
sg11
S'Struct'
p61
sa(dp62
g3
I01
sg10
I5
sg11
S'_PY_STRUCT_FLOAT_COERCE'
p63
sa(dp64
g3
I01
sg10
I5
sg11
S'_PY_STRUCT_RANGE_CHECKING'
p65
sa(dp66
g3
I01
sg10
I5
sg11
g14
sa(dp67
g3
I01
sg10
I5
sg11
S'__name__'
p68
sa(dp69
g3
I01
sg10
I5
sg11
S'__package__'
p70
sa(dp71
g3
I01
sg10
I5
sg11
S'__version__'
p72
sa(dp73
g1
S'Clear the internal cache.'
p74
sg3
I01
sg10
I2
sg11
S'_clearcache'
p75
sa(dp76
g1
S'Return size of C struct described by format string fmt.'
p77
sg3
I01
sg10
I2
sg11
S'calcsize'
p78
sa(dp79
g1
Nsg3
I01
sg4
(lp80
(dp81
g3
I01
sg10
I5
sg11
g12
sa(dp82
g3
I01
sg10
I5
sg11
S'__dict__'
p83
sa(dp84
g3
I01
sg10
I5
sg11
g14
sa(dp85
g1
S'default object formatter'
p86
sg3
I01
sg10
I2
sg11
g17
sa(dp87
g3
I01
sg10
I5
sg11
g19
sa(dp88
g3
I01
sg10
I5
sg11
S'__getitem__'
p89
sa(dp90
g3
I01
sg10
I5
sg11
S'__getslice__'
p91
sa(dp92
g3
I01
sg10
I5
sg11
g21
sa(dp93
g3
I01
sg10
I5
sg11
g23
sa(dp94
g3
I01
sg10
I5
sg11
S'__module__'
p95
sa(dp96
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p97
sg3
I01
sg10
I2
sg11
g26
sa(dp98
g1
Nsg3
I01
sg10
I2
sg11
g29
sa(dp99
g1
S'helper for pickle'
p100
sg3
I01
sg10
I2
sg11
g32
sa(dp101
g3
I01
sg10
I5
sg11
g34
sa(dp102
g3
I01
sg10
I5
sg11
g36
sa(dp103
g1
Nsg3
I01
sg10
I2
sg11
S'__setstate__'
p104
sa(dp105
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p106
sg3
I01
sg10
I2
sg11
g39
sa(dp107
g3
I01
sg10
I5
sg11
g41
sa(dp108
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p109
sg3
I01
sg10
I2
sg11
g44
sa(dp110
g1
Nsg3
I01
sg10
I2
sg11
S'__unicode__'
p111
sa(dp112
g3
I01
sg10
I5
sg11
S'__weakref__'
p113
sa(dp114
g3
I01
sg10
I5
sg11
S'args'
p115
sa(dp116
g3
I01
sg10
I5
sg11
S'message'
p117
sasg10
I3
sg11
S'error'
p118
sa(dp119
g1
S'Return string containing values v1, v2, ... packed according to fmt.'
p120
sg3
I01
sg10
I2
sg11
g49
sa(dp121
g1
S'Pack the values v1, v2, ... according to fmt.\nWrite the packed bytes into the writable buffer buf starting at offset.'
p122
sg3
I01
sg10
I2
sg11
g52
sa(dp123
g1
S'Unpack the string containing packed C structure data, according to fmt.\nRequires len(string) == calcsize(fmt).'
p124
sg3
I01
sg10
I2
sg11
g57
sa(dp125
g1
S'Unpack the buffer, containing packed C structure data, according to\nfmt, starting at offset. Requires len(buffer[offset:]) >= calcsize(fmt).'
p126
sg3
I01
sg10
I2
sg11
g60
sasg10
I1
sg11
S'_struct'
p127
s.