(dp0
S'doc'
p1
S'Common string manipulations, optimized for speed.\n\nAlways use "import string" rather than referencing\nthis module directly.'
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g3
I01
sS'type'
p7
I5
sS'name'
p8
S'__doc__'
p9
sa(dp10
g3
I01
sg7
I5
sg8
S'__name__'
p11
sa(dp12
g3
I01
sg7
I5
sg8
S'__package__'
p13
sa(dp14
g1
S'atof(s) -> float\n\nReturn the floating point number represented by the string s.'
p15
sg3
I01
sg7
I2
sg8
S'atof'
p16
sa(dp17
g1
S'atoi(s [,base]) -> int\n\nReturn the integer represented by the string s in the given\nbase, which defaults to 10.  The string s must consist of one\nor more digits, possibly preceded by a sign.  If base is 0, it\nis chosen from the leading characters of s, 0 for octal, 0x or\n0X for hexadecimal.  If base is 16, a preceding 0x or 0X is\naccepted.'
p18
sg3
I01
sg7
I2
sg8
S'atoi'
p19
sa(dp20
g1
S'atol(s [,base]) -> long\n\nReturn the long integer represented by the string s in the\ngiven base, which defaults to 10.  The string s must consist\nof one or more digits, possibly preceded by a sign.  If base\nis 0, it is chosen from the leading characters of s, 0 for\noctal, 0x or 0X for hexadecimal.  If base is 16, a preceding\n0x or 0X is accepted.  A trailing L or l is not accepted,\nunless base is 0.'
p21
sg3
I01
sg7
I2
sg8
S'atol'
p22
sa(dp23
g1
S'capitalize(s) -> string\n\nReturn a copy of the string s with only its first character\ncapitalized.'
p24
sg3
I01
sg7
I2
sg8
S'capitalize'
p25
sa(dp26
g1
S'count(s, sub[, start[, end]]) -> int\n\nReturn the number of occurrences of substring sub in string\ns[start:end].  Optional arguments start and end are\ninterpreted as in slice notation.'
p27
sg3
I01
sg7
I2
sg8
S'count'
p28
sa(dp29
g1
S"expandtabs(string, [tabsize]) -> string\n\nExpand tabs in a string, i.e. replace them by one or more spaces,\ndepending on the current column and the given tab size (default 8).\nThe column number is reset to zero after each newline occurring in the\nstring.  This doesn't understand other non-printing characters."
p30
sg3
I01
sg7
I2
sg8
S'expandtabs'
p31
sa(dp32
g1
S'find(s, sub [,start [,end]]) -> in\n\nReturn the lowest index in s where substring sub is found,\nsuch that sub is contained within s[start,end].  Optional\narguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.'
p33
sg3
I01
sg7
I2
sg8
S'find'
p34
sa(dp35
g1
S'join(list [,sep]) -> string\njoinfields(list [,sep]) -> string\n\nReturn a string composed of the words in list, with\nintervening occurrences of sep.  Sep defaults to a single\nspace.\n\n(join and joinfields are synonymous)'
p36
sg3
I01
sg7
I2
sg8
S'join'
p37
sa(dp38
g1
S'join(list [,sep]) -> string\njoinfields(list [,sep]) -> string\n\nReturn a string composed of the words in list, with\nintervening occurrences of sep.  Sep defaults to a single\nspace.\n\n(join and joinfields are synonymous)'
p39
sg3
I01
sg7
I2
sg8
S'joinfields'
p40
sa(dp41
g1
S'lower(s) -> string\n\nReturn a copy of the string s converted to lowercase.'
p42
sg3
I01
sg7
I2
sg8
S'lower'
p43
sa(dp44
g3
I01
sg7
I5
sg8
S'lowercase'
p45
sa(dp46
g1
S'lstrip(s) -> string\n\nReturn a copy of the string s with leading whitespace removed.'
p47
sg3
I01
sg7
I2
sg8
S'lstrip'
p48
sa(dp49
g1
S'maketrans(frm, to) -> string\n\nReturn a translation table (a string of 256 bytes long)\nsuitable for use in string.translate.  The strings frm and to\nmust be of the same length.'
p50
sg3
I01
sg7
I2
sg8
S'maketrans'
p51
sa(dp52
g1
S'replace (str, old, new[, maxsplit]) -> string\n\nReturn a copy of string str with all occurrences of substring\nold replaced by new. If the optional argument maxsplit is\ngiven, only the first maxsplit occurrences are replaced.'
p53
sg3
I01
sg7
I2
sg8
S'replace'
p54
sa(dp55
g1
S'rfind(s, sub [,start [,end]]) -> int\n\nReturn the highest index in s where substring sub is found,\nsuch that sub is contained within s[start,end].  Optional\narguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.'
p56
sg3
I01
sg7
I2
sg8
S'rfind'
p57
sa(dp58
g1
S'rstrip(s) -> string\n\nReturn a copy of the string s with trailing whitespace removed.'
p59
sg3
I01
sg7
I2
sg8
S'rstrip'
p60
sa(dp61
g1
S'split(s [,sep [,maxsplit]]) -> list of strings\nsplitfields(s [,sep [,maxsplit]]) -> list of strings\n\nReturn a list of the words in the string s, using sep as the\ndelimiter string.  If maxsplit is nonzero, splits into at most\nmaxsplit words.  If sep is not specified, any whitespace string\nis a separator.  Maxsplit defaults to 0.\n\n(split and splitfields are synonymous)'
p62
sg3
I01
sg7
I2
sg8
S'split'
p63
sa(dp64
g1
S'split(s [,sep [,maxsplit]]) -> list of strings\nsplitfields(s [,sep [,maxsplit]]) -> list of strings\n\nReturn a list of the words in the string s, using sep as the\ndelimiter string.  If maxsplit is nonzero, splits into at most\nmaxsplit words.  If sep is not specified, any whitespace string\nis a separator.  Maxsplit defaults to 0.\n\n(split and splitfields are synonymous)'
p65
sg3
I01
sg7
I2
sg8
S'splitfields'
p66
sa(dp67
g1
S'strip(s) -> string\n\nReturn a copy of the string s with leading and trailing\nwhitespace removed.'
p68
sg3
I01
sg7
I2
sg8
S'strip'
p69
sa(dp70
g1
S'swapcase(s) -> string\n\nReturn a copy of the string s with upper case characters\nconverted to lowercase and vice versa.'
p71
sg3
I01
sg7
I2
sg8
S'swapcase'
p72
sa(dp73
g1
S'translate(s,table [,deletechars]) -> string\n\nReturn a copy of the string s, where all characters occurring\nin the optional argument deletechars are removed, and the\nremaining characters have been mapped through the given\ntranslation table, which must be a string of length 256.'
p74
sg3
I01
sg7
I2
sg8
S'translate'
p75
sa(dp76
g1
S'upper(s) -> string\n\nReturn a copy of the string s converted to uppercase.'
p77
sg3
I01
sg7
I2
sg8
S'upper'
p78
sa(dp79
g3
I01
sg7
I5
sg8
S'uppercase'
p80
sa(dp81
g3
I01
sg7
I5
sg8
S'whitespace'
p82
sasg7
I1
sg8
S'strop'
p83
s.