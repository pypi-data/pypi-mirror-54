(dp0
S'doc'
p1
S'This module provides the components needed to build your own\n__import__ function.  Undocumented functions are obsolete.'
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g3
I01
sS'type'
p7
I5
sS'name'
p8
S'C_BUILTIN'
p9
sa(dp10
g3
I01
sg7
I5
sg8
S'C_EXTENSION'
p11
sa(dp12
g3
I01
sg7
I5
sg8
S'IMP_HOOK'
p13
sa(dp14
g1
S'Null importer object'
p15
sg3
I01
sg4
(lp16
(dp17
g3
I01
sg7
I5
sg8
S'__delattr__'
p18
sa(dp19
g3
I01
sg7
I5
sg8
S'__doc__'
p20
sa(dp21
g1
S'default object formatter'
p22
sg3
I01
sg7
I2
sg8
S'__format__'
p23
sa(dp24
g3
I01
sg7
I5
sg8
S'__getattribute__'
p25
sa(dp26
g3
I01
sg7
I5
sg8
S'__hash__'
p27
sa(dp28
g3
I01
sg7
I5
sg8
S'__init__'
p29
sa(dp30
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p31
sg3
I01
sg7
I2
sg8
S'__new__'
p32
sa(dp33
g1
S'helper for pickle'
p34
sg3
I01
sg7
I2
sg8
S'__reduce__'
p35
sa(dp36
g1
S'helper for pickle'
p37
sg3
I01
sg7
I2
sg8
S'__reduce_ex__'
p38
sa(dp39
g3
I01
sg7
I5
sg8
S'__repr__'
p40
sa(dp41
g3
I01
sg7
I5
sg8
S'__setattr__'
p42
sa(dp43
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p44
sg3
I01
sg7
I2
sg8
S'__sizeof__'
p45
sa(dp46
g3
I01
sg7
I5
sg8
S'__str__'
p47
sa(dp48
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p49
sg3
I01
sg7
I2
sg8
S'__subclasshook__'
p50
sa(dp51
g1
S'Always return None'
p52
sg3
I01
sg7
I2
sg8
S'find_module'
p53
sasg7
I3
sg8
S'NullImporter'
p54
sa(dp55
g3
I01
sg7
I5
sg8
S'PKG_DIRECTORY'
p56
sa(dp57
g3
I01
sg7
I5
sg8
S'PY_CODERESOURCE'
p58
sa(dp59
g3
I01
sg7
I5
sg8
S'PY_COMPILED'
p60
sa(dp61
g3
I01
sg7
I5
sg8
S'PY_FROZEN'
p62
sa(dp63
g3
I01
sg7
I5
sg8
S'PY_RESOURCE'
p64
sa(dp65
g3
I01
sg7
I5
sg8
S'PY_SOURCE'
p66
sa(dp67
g3
I01
sg7
I5
sg8
S'SEARCH_ERROR'
p68
sa(dp69
g3
I01
sg7
I5
sg8
g20
sa(dp70
g3
I01
sg7
I5
sg8
S'__name__'
p71
sa(dp72
g3
I01
sg7
I5
sg8
S'__package__'
p73
sa(dp74
g1
S"acquire_lock() -> None\nAcquires the interpreter's import lock for the current thread.\nThis lock should be used by import hooks to ensure thread-safety\nwhen importing modules.\nOn platforms without threads, this function does nothing."
p75
sg3
I01
sg7
I2
sg8
S'acquire_lock'
p76
sa(dp77
g1
S"find_module(name, [path]) -> (file, filename, (suffix, mode, type))\nSearch for a module.  If path is omitted or None, search for a\nbuilt-in, frozen or special module and continue search in sys.path.\nThe module name cannot contain '.'; to search for a submodule of a\npackage, pass the submodule name and the package's __path__."
p78
sg3
I01
sg7
I2
sg8
g53
sa(dp79
g1
Nsg3
I01
sg7
I2
sg8
S'get_frozen_object'
p80
sa(dp81
g1
S'get_magic() -> string\nReturn the magic number for .pyc or .pyo files.'
p82
sg3
I01
sg7
I2
sg8
S'get_magic'
p83
sa(dp84
g1
S'get_suffixes() -> [(suffix, mode, type), ...]\nReturn a list of (suffix, mode, type) tuples describing the files\nthat find_module() looks for.'
p85
sg3
I01
sg7
I2
sg8
S'get_suffixes'
p86
sa(dp87
g1
Nsg3
I01
sg7
I2
sg8
S'init_builtin'
p88
sa(dp89
g1
Nsg3
I01
sg7
I2
sg8
S'init_frozen'
p90
sa(dp91
g1
Nsg3
I01
sg7
I2
sg8
g3
sa(dp92
g1
Nsg3
I01
sg7
I2
sg8
S'is_frozen'
p93
sa(dp94
g1
Nsg3
I01
sg7
I2
sg8
S'load_compiled'
p95
sa(dp96
g1
Nsg3
I01
sg7
I2
sg8
S'load_dynamic'
p97
sa(dp98
g1
S'load_module(name, file, filename, (suffix, mode, type)) -> module\nLoad a module, given information returned by find_module().\nThe module name must include the full package name, if any.'
p99
sg3
I01
sg7
I2
sg8
S'load_module'
p100
sa(dp101
g1
Nsg3
I01
sg7
I2
sg8
S'load_package'
p102
sa(dp103
g1
Nsg3
I01
sg7
I2
sg8
S'load_source'
p104
sa(dp105
g1
S'lock_held() -> boolean\nReturn True if the import lock is currently held, else False.\nOn platforms without threads, return False.'
p106
sg3
I01
sg7
I2
sg8
S'lock_held'
p107
sa(dp108
g1
S'new_module(name) -> module\nCreate a new module.  Do not enter it in sys.modules.\nThe module name must include the full package name, if any.'
p109
sg3
I01
sg7
I2
sg8
S'new_module'
p110
sa(dp111
g1
S"release_lock() -> None\nRelease the interpreter's import lock.\nOn platforms without threads, this function does nothing."
p112
sg3
I01
sg7
I2
sg8
S'release_lock'
p113
sa(dp114
g1
S'reload(module) -> module\n\nReload the module.  The module must have been successfully imported before.'
p115
sg3
I01
sg7
I2
sg8
S'reload'
p116
sasg7
I1
sg8
S'imp'
p117
s.