(dp0
S'doc'
p1
S"This module defines an object type which can efficiently represent\nan array of basic values: characters, integers, floating point\nnumbers.  Arrays are sequence types and behave very much like lists,\nexcept that the type of objects stored in them is constrained.  The\ntype is specified at object creation time by using a type code, which\nis a single character.  The following type codes are defined:\n\n    Type code   C Type             Minimum size in bytes \n    'c'         character          1 \n    'b'         signed integer     1 \n    'B'         unsigned integer   1 \n    'u'         Unicode character  2 \n    'h'         signed integer     2 \n    'H'         unsigned integer   2 \n    'i'         signed integer     2 \n    'I'         unsigned integer   2 \n    'l'         signed integer     4 \n    'L'         unsigned integer   4 \n    'f'         floating point     4 \n    'd'         floating point     8 \n\nThe constructor is:\n\narray(typecode [, initializer]) -- create a new array\n"
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g1
S'array(typecode [, initializer]) -> array\n\nReturn a new array whose items are restricted by typecode, and\ninitialized from the optional initializer value, which must be a list,\nstring or iterable over elements of the appropriate type.\n\nArrays represent basic values and behave very much like lists, except\nthe type of objects stored in them is constrained.\n\nMethods:\n\nappend() -- append a new item to the end of the array\nbuffer_info() -- return information giving the current memory info\nbyteswap() -- byteswap all the items of the array\ncount() -- return number of occurrences of an object\nextend() -- extend array by appending multiple elements from an iterable\nfromfile() -- read items from a file object\nfromlist() -- append items from the list\nfromstring() -- append items from the string\nindex() -- return index of first occurrence of an object\ninsert() -- insert a new item into the array at a provided position\npop() -- remove and return item (default last)\nread() -- DEPRECATED, use fromfile()\nremove() -- remove first occurrence of an object\nreverse() -- reverse the order of the items in the array\ntofile() -- write all items to a file object\ntolist() -- return the array converted to an ordinary list\ntostring() -- return the array converted to a string\nwrite() -- DEPRECATED, use tofile()\n\nAttributes:\n\ntypecode -- the typecode character used to create the array\nitemsize -- the length in bytes of one array item\n'
p7
sg3
I01
sg4
(lp8
(dp9
g3
I01
sS'type'
p10
I5
sS'name'
p11
S'__add__'
p12
sa(dp13
g3
I01
sg10
I5
sg11
S'__contains__'
p14
sa(dp15
g1
S'copy(array)\n\n Return a copy of the array.'
p16
sg3
I01
sg10
I2
sg11
S'__copy__'
p17
sa(dp18
g1
S'copy(array)\n\n Return a copy of the array.'
p19
sg3
I01
sg10
I2
sg11
S'__deepcopy__'
p20
sa(dp21
g3
I01
sg10
I5
sg11
S'__delattr__'
p22
sa(dp23
g3
I01
sg10
I5
sg11
S'__delitem__'
p24
sa(dp25
g3
I01
sg10
I5
sg11
S'__delslice__'
p26
sa(dp27
g3
I01
sg10
I5
sg11
S'__doc__'
p28
sa(dp29
g3
I01
sg10
I5
sg11
S'__eq__'
p30
sa(dp31
g1
S'default object formatter'
p32
sg3
I01
sg10
I2
sg11
S'__format__'
p33
sa(dp34
g3
I01
sg10
I5
sg11
S'__ge__'
p35
sa(dp36
g3
I01
sg10
I5
sg11
S'__getattribute__'
p37
sa(dp38
g3
I01
sg10
I5
sg11
S'__getitem__'
p39
sa(dp40
g3
I01
sg10
I5
sg11
S'__getslice__'
p41
sa(dp42
g3
I01
sg10
I5
sg11
S'__gt__'
p43
sa(dp44
g3
I01
sg10
I5
sg11
S'__hash__'
p45
sa(dp46
g3
I01
sg10
I5
sg11
S'__iadd__'
p47
sa(dp48
g3
I01
sg10
I5
sg11
S'__imul__'
p49
sa(dp50
g3
I01
sg10
I5
sg11
S'__init__'
p51
sa(dp52
g3
I01
sg10
I5
sg11
S'__iter__'
p53
sa(dp54
g3
I01
sg10
I5
sg11
S'__le__'
p55
sa(dp56
g3
I01
sg10
I5
sg11
S'__len__'
p57
sa(dp58
g3
I01
sg10
I5
sg11
S'__lt__'
p59
sa(dp60
g3
I01
sg10
I5
sg11
S'__mul__'
p61
sa(dp62
g3
I01
sg10
I5
sg11
S'__ne__'
p63
sa(dp64
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p65
sg3
I01
sg10
I2
sg11
S'__new__'
p66
sa(dp67
g1
S'Return state information for pickling.'
p68
sg3
I01
sg10
I2
sg11
S'__reduce__'
p69
sa(dp70
g1
S'helper for pickle'
p71
sg3
I01
sg10
I2
sg11
S'__reduce_ex__'
p72
sa(dp73
g3
I01
sg10
I5
sg11
S'__repr__'
p74
sa(dp75
g3
I01
sg10
I5
sg11
S'__rmul__'
p76
sa(dp77
g3
I01
sg10
I5
sg11
S'__setattr__'
p78
sa(dp79
g3
I01
sg10
I5
sg11
S'__setitem__'
p80
sa(dp81
g3
I01
sg10
I5
sg11
S'__setslice__'
p82
sa(dp83
g1
S'__sizeof__() -> int\n\nSize of the array in memory, in bytes.'
p84
sg3
I01
sg10
I2
sg11
S'__sizeof__'
p85
sa(dp86
g3
I01
sg10
I5
sg11
S'__str__'
p87
sa(dp88
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p89
sg3
I01
sg10
I2
sg11
S'__subclasshook__'
p90
sa(dp91
g1
S'append(x)\n\nAppend new value x to the end of the array.'
p92
sg3
I01
sg10
I2
sg11
S'append'
p93
sa(dp94
g1
S"buffer_info() -> (address, length)\n\nReturn a tuple (address, length) giving the current memory address and\nthe length in items of the buffer used to hold array's contents\nThe length should be multiplied by the itemsize attribute to calculate\nthe buffer length in bytes."
p95
sg3
I01
sg10
I2
sg11
S'buffer_info'
p96
sa(dp97
g1
S'byteswap()\n\nByteswap all items of the array.  If the items in the array are not 1, 2,\n4, or 8 bytes in size, RuntimeError is raised.'
p98
sg3
I01
sg10
I2
sg11
S'byteswap'
p99
sa(dp100
g1
S'count(x)\n\nReturn number of occurrences of x in the array.'
p101
sg3
I01
sg10
I2
sg11
S'count'
p102
sa(dp103
g1
S'extend(array or iterable)\n\n Append items to the end of the array.'
p104
sg3
I01
sg10
I2
sg11
S'extend'
p105
sa(dp106
g1
S'fromfile(f, n)\n\nRead n objects from the file object f and append them to the end of the\narray.  Also called as read.'
p107
sg3
I01
sg10
I2
sg11
S'fromfile'
p108
sa(dp109
g1
S'fromlist(list)\n\nAppend items to array from list.'
p110
sg3
I01
sg10
I2
sg11
S'fromlist'
p111
sa(dp112
g1
S'fromstring(string)\n\nAppends items from the string, interpreting it as an array of machine\nvalues,as if it had been read from a file using the fromfile() method).'
p113
sg3
I01
sg10
I2
sg11
S'fromstring'
p114
sa(dp115
g1
S"fromunicode(ustr)\n\nExtends this array with data from the unicode string ustr.\nThe array must be a type 'u' array; otherwise a ValueError\nis raised.  Use array.fromstring(ustr.decode(...)) to\nappend Unicode data to an array of some other type."
p116
sg3
I01
sg10
I2
sg11
S'fromunicode'
p117
sa(dp118
g1
S'index(x)\n\nReturn index of first occurrence of x in the array.'
p119
sg3
I01
sg10
I2
sg11
S'index'
p120
sa(dp121
g1
S'insert(i,x)\n\nInsert a new item x into the array before position i.'
p122
sg3
I01
sg10
I2
sg11
S'insert'
p123
sa(dp124
g3
I01
sg10
I5
sg11
S'itemsize'
p125
sa(dp126
g1
S'pop([i])\n\nReturn the i-th element and delete it from the array. i defaults to -1.'
p127
sg3
I01
sg10
I2
sg11
S'pop'
p128
sa(dp129
g1
S'fromfile(f, n)\n\nRead n objects from the file object f and append them to the end of the\narray.  Also called as read.'
p130
sg3
I01
sg10
I2
sg11
S'read'
p131
sa(dp132
g1
S'remove(x)\n\nRemove the first occurrence of x in the array.'
p133
sg3
I01
sg10
I2
sg11
S'remove'
p134
sa(dp135
g1
S'reverse()\n\nReverse the order of the items in the array.'
p136
sg3
I01
sg10
I2
sg11
S'reverse'
p137
sa(dp138
g1
S'tofile(f)\n\nWrite all items (as machine values) to the file object f.  Also called as\nwrite.'
p139
sg3
I01
sg10
I2
sg11
S'tofile'
p140
sa(dp141
g1
S'tolist() -> list\n\nConvert array to an ordinary list with the same items.'
p142
sg3
I01
sg10
I2
sg11
S'tolist'
p143
sa(dp144
g1
S'tostring() -> string\n\nConvert the array to an array of machine values and return the string\nrepresentation.'
p145
sg3
I01
sg10
I2
sg11
S'tostring'
p146
sa(dp147
g1
S"tounicode() -> unicode\n\nConvert the array to a unicode string.  The array must be\na type 'u' array; otherwise a ValueError is raised.  Use\narray.tostring().decode() to obtain a unicode string from\nan array of some other type."
p148
sg3
I01
sg10
I2
sg11
S'tounicode'
p149
sa(dp150
g3
I01
sg10
I5
sg11
S'typecode'
p151
sa(dp152
g1
S'tofile(f)\n\nWrite all items (as machine values) to the file object f.  Also called as\nwrite.'
p153
sg3
I01
sg10
I2
sg11
S'write'
p154
sasg10
I3
sg11
S'ArrayType'
p155
sa(dp156
g3
I01
sg10
I5
sg11
g28
sa(dp157
g3
I01
sg10
I5
sg11
S'__name__'
p158
sa(dp159
g3
I01
sg10
I5
sg11
S'__package__'
p160
sa(dp161
g1
S'array(typecode [, initializer]) -> array\n\nReturn a new array whose items are restricted by typecode, and\ninitialized from the optional initializer value, which must be a list,\nstring or iterable over elements of the appropriate type.\n\nArrays represent basic values and behave very much like lists, except\nthe type of objects stored in them is constrained.\n\nMethods:\n\nappend() -- append a new item to the end of the array\nbuffer_info() -- return information giving the current memory info\nbyteswap() -- byteswap all the items of the array\ncount() -- return number of occurrences of an object\nextend() -- extend array by appending multiple elements from an iterable\nfromfile() -- read items from a file object\nfromlist() -- append items from the list\nfromstring() -- append items from the string\nindex() -- return index of first occurrence of an object\ninsert() -- insert a new item into the array at a provided position\npop() -- remove and return item (default last)\nread() -- DEPRECATED, use fromfile()\nremove() -- remove first occurrence of an object\nreverse() -- reverse the order of the items in the array\ntofile() -- write all items to a file object\ntolist() -- return the array converted to an ordinary list\ntostring() -- return the array converted to a string\nwrite() -- DEPRECATED, use tofile()\n\nAttributes:\n\ntypecode -- the typecode character used to create the array\nitemsize -- the length in bytes of one array item\n'
p162
sg3
I01
sg4
(lp163
(dp164
g3
I01
sg10
I5
sg11
g12
sa(dp165
g3
I01
sg10
I5
sg11
g14
sa(dp166
g1
S'copy(array)\n\n Return a copy of the array.'
p167
sg3
I01
sg10
I2
sg11
g17
sa(dp168
g1
S'copy(array)\n\n Return a copy of the array.'
p169
sg3
I01
sg10
I2
sg11
g20
sa(dp170
g3
I01
sg10
I5
sg11
g22
sa(dp171
g3
I01
sg10
I5
sg11
g24
sa(dp172
g3
I01
sg10
I5
sg11
g26
sa(dp173
g3
I01
sg10
I5
sg11
g28
sa(dp174
g3
I01
sg10
I5
sg11
g30
sa(dp175
g1
S'default object formatter'
p176
sg3
I01
sg10
I2
sg11
g33
sa(dp177
g3
I01
sg10
I5
sg11
g35
sa(dp178
g3
I01
sg10
I5
sg11
g37
sa(dp179
g3
I01
sg10
I5
sg11
g39
sa(dp180
g3
I01
sg10
I5
sg11
g41
sa(dp181
g3
I01
sg10
I5
sg11
g43
sa(dp182
g3
I01
sg10
I5
sg11
g45
sa(dp183
g3
I01
sg10
I5
sg11
g47
sa(dp184
g3
I01
sg10
I5
sg11
g49
sa(dp185
g3
I01
sg10
I5
sg11
g51
sa(dp186
g3
I01
sg10
I5
sg11
g53
sa(dp187
g3
I01
sg10
I5
sg11
g55
sa(dp188
g3
I01
sg10
I5
sg11
g57
sa(dp189
g3
I01
sg10
I5
sg11
g59
sa(dp190
g3
I01
sg10
I5
sg11
g61
sa(dp191
g3
I01
sg10
I5
sg11
g63
sa(dp192
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p193
sg3
I01
sg10
I2
sg11
g66
sa(dp194
g1
S'Return state information for pickling.'
p195
sg3
I01
sg10
I2
sg11
g69
sa(dp196
g1
S'helper for pickle'
p197
sg3
I01
sg10
I2
sg11
g72
sa(dp198
g3
I01
sg10
I5
sg11
g74
sa(dp199
g3
I01
sg10
I5
sg11
g76
sa(dp200
g3
I01
sg10
I5
sg11
g78
sa(dp201
g3
I01
sg10
I5
sg11
g80
sa(dp202
g3
I01
sg10
I5
sg11
g82
sa(dp203
g1
S'__sizeof__() -> int\n\nSize of the array in memory, in bytes.'
p204
sg3
I01
sg10
I2
sg11
g85
sa(dp205
g3
I01
sg10
I5
sg11
g87
sa(dp206
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p207
sg3
I01
sg10
I2
sg11
g90
sa(dp208
g1
S'append(x)\n\nAppend new value x to the end of the array.'
p209
sg3
I01
sg10
I2
sg11
g93
sa(dp210
g1
S"buffer_info() -> (address, length)\n\nReturn a tuple (address, length) giving the current memory address and\nthe length in items of the buffer used to hold array's contents\nThe length should be multiplied by the itemsize attribute to calculate\nthe buffer length in bytes."
p211
sg3
I01
sg10
I2
sg11
g96
sa(dp212
g1
S'byteswap()\n\nByteswap all items of the array.  If the items in the array are not 1, 2,\n4, or 8 bytes in size, RuntimeError is raised.'
p213
sg3
I01
sg10
I2
sg11
g99
sa(dp214
g1
S'count(x)\n\nReturn number of occurrences of x in the array.'
p215
sg3
I01
sg10
I2
sg11
g102
sa(dp216
g1
S'extend(array or iterable)\n\n Append items to the end of the array.'
p217
sg3
I01
sg10
I2
sg11
g105
sa(dp218
g1
S'fromfile(f, n)\n\nRead n objects from the file object f and append them to the end of the\narray.  Also called as read.'
p219
sg3
I01
sg10
I2
sg11
g108
sa(dp220
g1
S'fromlist(list)\n\nAppend items to array from list.'
p221
sg3
I01
sg10
I2
sg11
g111
sa(dp222
g1
S'fromstring(string)\n\nAppends items from the string, interpreting it as an array of machine\nvalues,as if it had been read from a file using the fromfile() method).'
p223
sg3
I01
sg10
I2
sg11
g114
sa(dp224
g1
S"fromunicode(ustr)\n\nExtends this array with data from the unicode string ustr.\nThe array must be a type 'u' array; otherwise a ValueError\nis raised.  Use array.fromstring(ustr.decode(...)) to\nappend Unicode data to an array of some other type."
p225
sg3
I01
sg10
I2
sg11
g117
sa(dp226
g1
S'index(x)\n\nReturn index of first occurrence of x in the array.'
p227
sg3
I01
sg10
I2
sg11
g120
sa(dp228
g1
S'insert(i,x)\n\nInsert a new item x into the array before position i.'
p229
sg3
I01
sg10
I2
sg11
g123
sa(dp230
g3
I01
sg10
I5
sg11
g125
sa(dp231
g1
S'pop([i])\n\nReturn the i-th element and delete it from the array. i defaults to -1.'
p232
sg3
I01
sg10
I2
sg11
g128
sa(dp233
g1
S'fromfile(f, n)\n\nRead n objects from the file object f and append them to the end of the\narray.  Also called as read.'
p234
sg3
I01
sg10
I2
sg11
g131
sa(dp235
g1
S'remove(x)\n\nRemove the first occurrence of x in the array.'
p236
sg3
I01
sg10
I2
sg11
g134
sa(dp237
g1
S'reverse()\n\nReverse the order of the items in the array.'
p238
sg3
I01
sg10
I2
sg11
g137
sa(dp239
g1
S'tofile(f)\n\nWrite all items (as machine values) to the file object f.  Also called as\nwrite.'
p240
sg3
I01
sg10
I2
sg11
g140
sa(dp241
g1
S'tolist() -> list\n\nConvert array to an ordinary list with the same items.'
p242
sg3
I01
sg10
I2
sg11
g143
sa(dp243
g1
S'tostring() -> string\n\nConvert the array to an array of machine values and return the string\nrepresentation.'
p244
sg3
I01
sg10
I2
sg11
g146
sa(dp245
g1
S"tounicode() -> unicode\n\nConvert the array to a unicode string.  The array must be\na type 'u' array; otherwise a ValueError is raised.  Use\narray.tostring().decode() to obtain a unicode string from\nan array of some other type."
p246
sg3
I01
sg10
I2
sg11
g149
sa(dp247
g3
I01
sg10
I5
sg11
g151
sa(dp248
g1
S'tofile(f)\n\nWrite all items (as machine values) to the file object f.  Also called as\nwrite.'
p249
sg3
I01
sg10
I2
sg11
g154
sasg10
I3
sg11
S'array'
p250
sasg10
I1
sg11
S'array'
p251
s.