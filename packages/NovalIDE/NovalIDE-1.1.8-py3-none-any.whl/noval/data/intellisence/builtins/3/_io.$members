(dp0
Vis_builtin
p1
I01
sVchilds
p2
(lp3
(dp4
g1
I01
sg2
(lp5
(dp6
g1
I01
sVname
p7
V__cause__
p8
sVtype
p9
L5L
sa(dp10
g1
I01
sg7
V__context__
p11
sg9
L5L
sa(dp12
g1
I01
sg7
V__delattr__
p13
sg9
L5L
sa(dp14
g1
I01
sg7
V__dict__
p15
sg9
L5L
sa(dp16
g1
I01
sVdoc
p17
V__dir__() -> list\u000adefault dir() implementation
p18
sg7
V__dir__
p19
sg9
L2L
sa(dp20
g1
I01
sg7
V__doc__
p21
sg9
L5L
sa(dp22
g1
I01
sg7
V__eq__
p23
sg9
L5L
sa(dp24
g1
I01
sg17
Vdefault object formatter
p25
sg7
V__format__
p26
sg9
L2L
sa(dp27
g1
I01
sg7
V__ge__
p28
sg9
L5L
sa(dp29
g1
I01
sg7
V__getattribute__
p30
sg9
L5L
sa(dp31
g1
I01
sg7
V__gt__
p32
sg9
L5L
sa(dp33
g1
I01
sg7
V__hash__
p34
sg9
L5L
sa(dp35
g1
I01
sg7
V__init__
p36
sg9
L5L
sa(dp37
g1
I01
sg7
V__le__
p38
sg9
L5L
sa(dp39
g1
I01
sg7
V__lt__
p40
sg9
L5L
sa(dp41
g1
I01
sg7
V__ne__
p42
sg9
L5L
sa(dp43
g1
I01
sg17
VCreate and return a new object.  See help(type) for accurate signature.
p44
sg7
V__new__
p45
sg9
L2L
sa(dp46
g1
I01
sg17
Nsg7
V__reduce__
p47
sg9
L2L
sa(dp48
g1
I01
sg17
Vhelper for pickle
p49
sg7
V__reduce_ex__
p50
sg9
L2L
sa(dp51
g1
I01
sg7
V__repr__
p52
sg9
L5L
sa(dp53
g1
I01
sg7
V__setattr__
p54
sg9
L5L
sa(dp55
g1
I01
sg17
Nsg7
V__setstate__
p56
sg9
L2L
sa(dp57
g1
I01
sg17
V__sizeof__() -> int\u000asize of object in memory, in bytes
p58
sg7
V__sizeof__
p59
sg9
L2L
sa(dp60
g1
I01
sg7
V__str__
p61
sg9
L5L
sa(dp62
g1
I01
sg17
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p63
sg7
V__subclasshook__
p64
sg9
L2L
sa(dp65
g1
I01
sg7
V__suppress_context__
p66
sg9
L5L
sa(dp67
g1
I01
sg7
V__traceback__
p68
sg9
L5L
sa(dp69
g1
I01
sg7
Vargs
p70
sg9
L5L
sa(dp71
g1
I01
sg7
Vcharacters_written
p72
sg9
L5L
sa(dp73
g1
I01
sg7
Verrno
p74
sg9
L5L
sa(dp75
g1
I01
sg7
Vfilename
p76
sg9
L5L
sa(dp77
g1
I01
sg7
Vfilename2
p78
sg9
L5L
sa(dp79
g1
I01
sg7
Vstrerror
p80
sg9
L5L
sa(dp81
g1
I01
sg17
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p82
sg7
Vwith_traceback
p83
sg9
L2L
sasg17
VI/O operation would block.
p84
sg7
VBlockingIOError
p85
sg9
L3L
sa(dp86
g1
I01
sg2
(lp87
(dp88
g1
I01
sg7
V__del__
p89
sg9
L5L
sa(dp90
g1
I01
sg7
g13
sg9
L5L
sa(dp91
g1
I01
sg7
g15
sg9
L5L
sa(dp92
g1
I01
sg17
V__dir__() -> list\u000adefault dir() implementation
p93
sg7
g19
sg9
L2L
sa(dp94
g1
I01
sg7
g21
sg9
L5L
sa(dp95
g1
I01
sg17
Nsg7
V__enter__
p96
sg9
L2L
sa(dp97
g1
I01
sg7
g23
sg9
L5L
sa(dp98
g1
I01
sg17
Nsg7
V__exit__
p99
sg9
L2L
sa(dp100
g1
I01
sg17
Vdefault object formatter
p101
sg7
g26
sg9
L2L
sa(dp102
g1
I01
sg7
g28
sg9
L5L
sa(dp103
g1
I01
sg7
g30
sg9
L5L
sa(dp104
g1
I01
sg17
Nsg7
V__getstate__
p105
sg9
L2L
sa(dp106
g1
I01
sg7
g32
sg9
L5L
sa(dp107
g1
I01
sg7
g34
sg9
L5L
sa(dp108
g1
I01
sg7
g36
sg9
L5L
sa(dp109
g1
I01
sg7
V__iter__
p110
sg9
L5L
sa(dp111
g1
I01
sg7
g38
sg9
L5L
sa(dp112
g1
I01
sg7
g40
sg9
L5L
sa(dp113
g1
I01
sg7
g42
sg9
L5L
sa(dp114
g1
I01
sg17
VCreate and return a new object.  See help(type) for accurate signature.
p115
sg7
g45
sg9
L2L
sa(dp116
g1
I01
sg7
V__next__
p117
sg9
L5L
sa(dp118
g1
I01
sg17
Vhelper for pickle
p119
sg7
g47
sg9
L2L
sa(dp120
g1
I01
sg17
Vhelper for pickle
p121
sg7
g50
sg9
L2L
sa(dp122
g1
I01
sg7
g52
sg9
L5L
sa(dp123
g1
I01
sg7
g54
sg9
L5L
sa(dp124
g1
I01
sg17
V__sizeof__() -> int\u000asize of object in memory, in bytes
p125
sg7
g59
sg9
L2L
sa(dp126
g1
I01
sg7
g61
sg9
L5L
sa(dp127
g1
I01
sg17
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p128
sg7
g64
sg9
L2L
sa(dp129
g1
I01
sg17
Nsg7
V_checkClosed
p130
sg9
L2L
sa(dp131
g1
I01
sg17
Nsg7
V_checkReadable
p132
sg9
L2L
sa(dp133
g1
I01
sg17
Nsg7
V_checkSeekable
p134
sg9
L2L
sa(dp135
g1
I01
sg17
Nsg7
V_checkWritable
p136
sg9
L2L
sa(dp137
g1
I01
sg17
Nsg7
Vclose
p138
sg9
L2L
sa(dp139
g1
I01
sg7
Vclosed
p140
sg9
L5L
sa(dp141
g1
I01
sg17
VDisconnect this buffer from its underlying raw stream and return it.\u000a\u000aAfter the raw stream has been detached, the buffer is in an unusable\u000astate.
p142
sg7
Vdetach
p143
sg9
L2L
sa(dp144
g1
I01
sg17
VReturns underlying file descriptor if one exists.\u000a\u000aOSError is raised if the IO object does not use a file descriptor.
p145
sg7
Vfileno
p146
sg9
L2L
sa(dp147
g1
I01
sg17
Nsg7
Vflush
p148
sg9
L2L
sa(dp149
g1
I01
sg17
Nsg7
Visatty
p150
sg9
L2L
sa(dp151
g1
I01
sg17
Nsg7
Vpeek
p152
sg9
L2L
sa(dp153
g1
I01
sg17
Nsg7
Vread
p154
sg9
L2L
sa(dp155
g1
I01
sg17
Nsg7
Vread1
p156
sg9
L2L
sa(dp157
g1
I01
sg17
Nsg7
Vreadable
p158
sg9
L2L
sa(dp159
g1
I01
sg17
Nsg7
Vreadinto
p160
sg9
L2L
sa(dp161
g1
I01
sg17
Nsg7
Vreadinto1
p162
sg9
L2L
sa(dp163
g1
I01
sg17
VRead and return a line from the stream.\u000a\u000aIf size is specified, at most size bytes will be read.\u000a\u000aThe line terminator is always b'\u005cn' for binary files; for text\u000afiles, the newlines argument to open can be used to select the line\u000aterminator(s) recognized.
p164
sg7
Vreadline
p165
sg9
L2L
sa(dp166
g1
I01
sg17
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p167
sg7
Vreadlines
p168
sg9
L2L
sa(dp169
g1
I01
sg17
VChange stream position.\u000a\u000aChange the stream position to the given byte offset. The offset is\u000ainterpreted relative to the position indicated by whence.  Values\u000afor whence are:\u000a\u000a* 0 -- start of stream (the default); offset should be zero or positive\u000a* 1 -- current stream position; offset may be negative\u000a* 2 -- end of stream; offset is usually negative\u000a\u000aReturn the new absolute position.
p170
sg7
Vseek
p171
sg9
L2L
sa(dp172
g1
I01
sg17
VReturn whether object supports random access.\u000a\u000aIf False, seek(), tell() and truncate() will raise OSError.\u000aThis method may need to do a test seek().
p173
sg7
Vseekable
p174
sg9
L2L
sa(dp175
g1
I01
sg17
VReturn current stream position.
p176
sg7
Vtell
p177
sg9
L2L
sa(dp178
g1
I01
sg17
VTruncate file to size bytes.\u000a\u000aFile pointer is left unchanged.  Size defaults to the current IO\u000aposition as reported by tell().  Returns the new size.
p179
sg7
Vtruncate
p180
sg9
L2L
sa(dp181
g1
I01
sg17
Nsg7
Vwritable
p182
sg9
L2L
sa(dp183
g1
I01
sg17
Nsg7
Vwrite
p184
sg9
L2L
sa(dp185
g1
I01
sg17
Nsg7
Vwritelines
p186
sg9
L2L
sasg17
VA buffered reader and writer object together.\u000a\u000aA buffered reader object and buffered writer object put together to\u000aform a sequential IO object that can read and write. This is typically\u000aused with a socket or two-way pipe.\u000a\u000areader and writer are RawIOBase objects that are readable and\u000awriteable respectively. If the buffer_size is omitted it defaults to\u000aDEFAULT_BUFFER_SIZE.
p187
sg7
VBufferedRWPair
p188
sg9
L3L
sa(dp189
g1
I01
sg2
(lp190
(dp191
g1
I01
sg7
g89
sg9
L5L
sa(dp192
g1
I01
sg7
g13
sg9
L5L
sa(dp193
g1
I01
sg7
g15
sg9
L5L
sa(dp194
g1
I01
sg17
V__dir__() -> list\u000adefault dir() implementation
p195
sg7
g19
sg9
L2L
sa(dp196
g1
I01
sg7
g21
sg9
L5L
sa(dp197
g1
I01
sg17
Nsg7
g96
sg9
L2L
sa(dp198
g1
I01
sg7
g23
sg9
L5L
sa(dp199
g1
I01
sg17
Nsg7
g99
sg9
L2L
sa(dp200
g1
I01
sg17
Vdefault object formatter
p201
sg7
g26
sg9
L2L
sa(dp202
g1
I01
sg7
g28
sg9
L5L
sa(dp203
g1
I01
sg7
g30
sg9
L5L
sa(dp204
g1
I01
sg17
Nsg7
g105
sg9
L2L
sa(dp205
g1
I01
sg7
g32
sg9
L5L
sa(dp206
g1
I01
sg7
g34
sg9
L5L
sa(dp207
g1
I01
sg7
g36
sg9
L5L
sa(dp208
g1
I01
sg7
g110
sg9
L5L
sa(dp209
g1
I01
sg7
g38
sg9
L5L
sa(dp210
g1
I01
sg7
g40
sg9
L5L
sa(dp211
g1
I01
sg7
g42
sg9
L5L
sa(dp212
g1
I01
sg17
VCreate and return a new object.  See help(type) for accurate signature.
p213
sg7
g45
sg9
L2L
sa(dp214
g1
I01
sg7
g117
sg9
L5L
sa(dp215
g1
I01
sg17
Vhelper for pickle
p216
sg7
g47
sg9
L2L
sa(dp217
g1
I01
sg17
Vhelper for pickle
p218
sg7
g50
sg9
L2L
sa(dp219
g1
I01
sg7
g52
sg9
L5L
sa(dp220
g1
I01
sg7
g54
sg9
L5L
sa(dp221
g1
I01
sg17
Nsg7
g59
sg9
L2L
sa(dp222
g1
I01
sg7
g61
sg9
L5L
sa(dp223
g1
I01
sg17
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p224
sg7
g64
sg9
L2L
sa(dp225
g1
I01
sg17
Nsg7
g130
sg9
L2L
sa(dp226
g1
I01
sg17
Nsg7
g132
sg9
L2L
sa(dp227
g1
I01
sg17
Nsg7
g134
sg9
L2L
sa(dp228
g1
I01
sg17
Nsg7
g136
sg9
L2L
sa(dp229
g1
I01
sg17
Nsg7
V_dealloc_warn
p230
sg9
L2L
sa(dp231
g1
I01
sg7
V_finalizing
p232
sg9
L5L
sa(dp233
g1
I01
sg17
Nsg7
g138
sg9
L2L
sa(dp234
g1
I01
sg7
g140
sg9
L5L
sa(dp235
g1
I01
sg17
Nsg7
g143
sg9
L2L
sa(dp236
g1
I01
sg17
Nsg7
g146
sg9
L2L
sa(dp237
g1
I01
sg17
Nsg7
g148
sg9
L2L
sa(dp238
g1
I01
sg17
Nsg7
g150
sg9
L2L
sa(dp239
g1
I01
sg7
Vmode
p240
sg9
L5L
sa(dp241
g1
I01
sg7
g7
sg9
L5L
sa(dp242
g1
I01
sg17
Nsg7
g152
sg9
L2L
sa(dp243
g1
I01
sg7
Vraw
p244
sg9
L5L
sa(dp245
g1
I01
sg17
Nsg7
g154
sg9
L2L
sa(dp246
g1
I01
sg17
Nsg7
g156
sg9
L2L
sa(dp247
g1
I01
sg17
Nsg7
g158
sg9
L2L
sa(dp248
g1
I01
sg17
Nsg7
g160
sg9
L2L
sa(dp249
g1
I01
sg17
Nsg7
g162
sg9
L2L
sa(dp250
g1
I01
sg17
Nsg7
g165
sg9
L2L
sa(dp251
g1
I01
sg17
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p252
sg7
g168
sg9
L2L
sa(dp253
g1
I01
sg17
Nsg7
g171
sg9
L2L
sa(dp254
g1
I01
sg17
Nsg7
g174
sg9
L2L
sa(dp255
g1
I01
sg17
Nsg7
g177
sg9
L2L
sa(dp256
g1
I01
sg17
Nsg7
g180
sg9
L2L
sa(dp257
g1
I01
sg17
Nsg7
g182
sg9
L2L
sa(dp258
g1
I01
sg17
Nsg7
g184
sg9
L2L
sa(dp259
g1
I01
sg17
Nsg7
g186
sg9
L2L
sasg17
VA buffered interface to random access streams.\u000a\u000aThe constructor creates a reader and writer for a seekable stream,\u000araw, given in the first argument. If the buffer_size is omitted it\u000adefaults to DEFAULT_BUFFER_SIZE.
p260
sg7
VBufferedRandom
p261
sg9
L3L
sa(dp262
g1
I01
sg2
(lp263
(dp264
g1
I01
sg7
g89
sg9
L5L
sa(dp265
g1
I01
sg7
g13
sg9
L5L
sa(dp266
g1
I01
sg7
g15
sg9
L5L
sa(dp267
g1
I01
sg17
V__dir__() -> list\u000adefault dir() implementation
p268
sg7
g19
sg9
L2L
sa(dp269
g1
I01
sg7
g21
sg9
L5L
sa(dp270
g1
I01
sg17
Nsg7
g96
sg9
L2L
sa(dp271
g1
I01
sg7
g23
sg9
L5L
sa(dp272
g1
I01
sg17
Nsg7
g99
sg9
L2L
sa(dp273
g1
I01
sg17
Vdefault object formatter
p274
sg7
g26
sg9
L2L
sa(dp275
g1
I01
sg7
g28
sg9
L5L
sa(dp276
g1
I01
sg7
g30
sg9
L5L
sa(dp277
g1
I01
sg17
Nsg7
g105
sg9
L2L
sa(dp278
g1
I01
sg7
g32
sg9
L5L
sa(dp279
g1
I01
sg7
g34
sg9
L5L
sa(dp280
g1
I01
sg7
g36
sg9
L5L
sa(dp281
g1
I01
sg7
g110
sg9
L5L
sa(dp282
g1
I01
sg7
g38
sg9
L5L
sa(dp283
g1
I01
sg7
g40
sg9
L5L
sa(dp284
g1
I01
sg7
g42
sg9
L5L
sa(dp285
g1
I01
sg17
VCreate and return a new object.  See help(type) for accurate signature.
p286
sg7
g45
sg9
L2L
sa(dp287
g1
I01
sg7
g117
sg9
L5L
sa(dp288
g1
I01
sg17
Vhelper for pickle
p289
sg7
g47
sg9
L2L
sa(dp290
g1
I01
sg17
Vhelper for pickle
p291
sg7
g50
sg9
L2L
sa(dp292
g1
I01
sg7
g52
sg9
L5L
sa(dp293
g1
I01
sg7
g54
sg9
L5L
sa(dp294
g1
I01
sg17
Nsg7
g59
sg9
L2L
sa(dp295
g1
I01
sg7
g61
sg9
L5L
sa(dp296
g1
I01
sg17
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p297
sg7
g64
sg9
L2L
sa(dp298
g1
I01
sg17
Nsg7
g130
sg9
L2L
sa(dp299
g1
I01
sg17
Nsg7
g132
sg9
L2L
sa(dp300
g1
I01
sg17
Nsg7
g134
sg9
L2L
sa(dp301
g1
I01
sg17
Nsg7
g136
sg9
L2L
sa(dp302
g1
I01
sg17
Nsg7
g230
sg9
L2L
sa(dp303
g1
I01
sg7
g232
sg9
L5L
sa(dp304
g1
I01
sg17
Nsg7
g138
sg9
L2L
sa(dp305
g1
I01
sg7
g140
sg9
L5L
sa(dp306
g1
I01
sg17
Nsg7
g143
sg9
L2L
sa(dp307
g1
I01
sg17
Nsg7
g146
sg9
L2L
sa(dp308
g1
I01
sg17
Nsg7
g148
sg9
L2L
sa(dp309
g1
I01
sg17
Nsg7
g150
sg9
L2L
sa(dp310
g1
I01
sg7
g240
sg9
L5L
sa(dp311
g1
I01
sg7
g7
sg9
L5L
sa(dp312
g1
I01
sg17
Nsg7
g152
sg9
L2L
sa(dp313
g1
I01
sg7
g244
sg9
L5L
sa(dp314
g1
I01
sg17
Nsg7
g154
sg9
L2L
sa(dp315
g1
I01
sg17
Nsg7
g156
sg9
L2L
sa(dp316
g1
I01
sg17
Nsg7
g158
sg9
L2L
sa(dp317
g1
I01
sg17
Nsg7
g160
sg9
L2L
sa(dp318
g1
I01
sg17
Nsg7
g162
sg9
L2L
sa(dp319
g1
I01
sg17
Nsg7
g165
sg9
L2L
sa(dp320
g1
I01
sg17
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p321
sg7
g168
sg9
L2L
sa(dp322
g1
I01
sg17
Nsg7
g171
sg9
L2L
sa(dp323
g1
I01
sg17
Nsg7
g174
sg9
L2L
sa(dp324
g1
I01
sg17
Nsg7
g177
sg9
L2L
sa(dp325
g1
I01
sg17
Nsg7
g180
sg9
L2L
sa(dp326
g1
I01
sg17
VReturn whether object was opened for writing.\u000a\u000aIf False, write() will raise OSError.
p327
sg7
g182
sg9
L2L
sa(dp328
g1
I01
sg17
VWrite the given buffer to the IO stream.\u000a\u000aReturns the number of bytes written, which is always the length of b\u000ain bytes.\u000a\u000aRaises BlockingIOError if the buffer is full and the\u000aunderlying raw stream cannot accept more data at the moment.\u000a
p329
sg7
g184
sg9
L2L
sa(dp330
g1
I01
sg17
Nsg7
g186
sg9
L2L
sasg17
VCreate a new buffered reader using the given readable raw IO object.
p331
sg7
VBufferedReader
p332
sg9
L3L
sa(dp333
g1
I01
sg2
(lp334
(dp335
g1
I01
sg7
g89
sg9
L5L
sa(dp336
g1
I01
sg7
g13
sg9
L5L
sa(dp337
g1
I01
sg7
g15
sg9
L5L
sa(dp338
g1
I01
sg17
V__dir__() -> list\u000adefault dir() implementation
p339
sg7
g19
sg9
L2L
sa(dp340
g1
I01
sg7
g21
sg9
L5L
sa(dp341
g1
I01
sg17
Nsg7
g96
sg9
L2L
sa(dp342
g1
I01
sg7
g23
sg9
L5L
sa(dp343
g1
I01
sg17
Nsg7
g99
sg9
L2L
sa(dp344
g1
I01
sg17
Vdefault object formatter
p345
sg7
g26
sg9
L2L
sa(dp346
g1
I01
sg7
g28
sg9
L5L
sa(dp347
g1
I01
sg7
g30
sg9
L5L
sa(dp348
g1
I01
sg17
Nsg7
g105
sg9
L2L
sa(dp349
g1
I01
sg7
g32
sg9
L5L
sa(dp350
g1
I01
sg7
g34
sg9
L5L
sa(dp351
g1
I01
sg7
g36
sg9
L5L
sa(dp352
g1
I01
sg7
g110
sg9
L5L
sa(dp353
g1
I01
sg7
g38
sg9
L5L
sa(dp354
g1
I01
sg7
g40
sg9
L5L
sa(dp355
g1
I01
sg7
g42
sg9
L5L
sa(dp356
g1
I01
sg17
VCreate and return a new object.  See help(type) for accurate signature.
p357
sg7
g45
sg9
L2L
sa(dp358
g1
I01
sg7
g117
sg9
L5L
sa(dp359
g1
I01
sg17
Vhelper for pickle
p360
sg7
g47
sg9
L2L
sa(dp361
g1
I01
sg17
Vhelper for pickle
p362
sg7
g50
sg9
L2L
sa(dp363
g1
I01
sg7
g52
sg9
L5L
sa(dp364
g1
I01
sg7
g54
sg9
L5L
sa(dp365
g1
I01
sg17
Nsg7
g59
sg9
L2L
sa(dp366
g1
I01
sg7
g61
sg9
L5L
sa(dp367
g1
I01
sg17
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p368
sg7
g64
sg9
L2L
sa(dp369
g1
I01
sg17
Nsg7
g130
sg9
L2L
sa(dp370
g1
I01
sg17
Nsg7
g132
sg9
L2L
sa(dp371
g1
I01
sg17
Nsg7
g134
sg9
L2L
sa(dp372
g1
I01
sg17
Nsg7
g136
sg9
L2L
sa(dp373
g1
I01
sg17
Nsg7
g230
sg9
L2L
sa(dp374
g1
I01
sg7
g232
sg9
L5L
sa(dp375
g1
I01
sg17
Nsg7
g138
sg9
L2L
sa(dp376
g1
I01
sg7
g140
sg9
L5L
sa(dp377
g1
I01
sg17
Nsg7
g143
sg9
L2L
sa(dp378
g1
I01
sg17
Nsg7
g146
sg9
L2L
sa(dp379
g1
I01
sg17
Nsg7
g148
sg9
L2L
sa(dp380
g1
I01
sg17
Nsg7
g150
sg9
L2L
sa(dp381
g1
I01
sg7
g240
sg9
L5L
sa(dp382
g1
I01
sg7
g7
sg9
L5L
sa(dp383
g1
I01
sg7
g244
sg9
L5L
sa(dp384
g1
I01
sg17
VRead and return up to n bytes.\u000a\u000aIf the argument is omitted, None, or negative, reads and\u000areturns all data until EOF.\u000a\u000aIf the argument is positive, and the underlying raw stream is\u000anot 'interactive', multiple raw reads may be issued to satisfy\u000athe byte count (unless EOF is reached first).  But for\u000ainteractive raw streams (as well as sockets and pipes), at most\u000aone raw read will be issued, and a short result does not imply\u000athat EOF is imminent.\u000a\u000aReturns an empty bytes object on EOF.\u000a\u000aReturns None if the underlying raw stream was open in non-blocking\u000amode and no data is available at the moment.\u000a
p385
sg7
g154
sg9
L2L
sa(dp386
g1
I01
sg17
VRead and return up to n bytes, with at most one read() call\u000ato the underlying raw stream. A short result does not imply\u000athat EOF is imminent.\u000a\u000aReturns an empty bytes object on EOF.\u000a
p387
sg7
g156
sg9
L2L
sa(dp388
g1
I01
sg17
VReturn whether object was opened for reading.\u000a\u000aIf False, read() will raise OSError.
p389
sg7
g158
sg9
L2L
sa(dp390
g1
I01
sg17
Nsg7
g160
sg9
L2L
sa(dp391
g1
I01
sg17
Nsg7
g162
sg9
L2L
sa(dp392
g1
I01
sg17
VRead and return a line from the stream.\u000a\u000aIf size is specified, at most size bytes will be read.\u000a\u000aThe line terminator is always b'\u005cn' for binary files; for text\u000afiles, the newlines argument to open can be used to select the line\u000aterminator(s) recognized.
p393
sg7
g165
sg9
L2L
sa(dp394
g1
I01
sg17
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p395
sg7
g168
sg9
L2L
sa(dp396
g1
I01
sg17
Nsg7
g171
sg9
L2L
sa(dp397
g1
I01
sg17
Nsg7
g174
sg9
L2L
sa(dp398
g1
I01
sg17
Nsg7
g177
sg9
L2L
sa(dp399
g1
I01
sg17
Nsg7
g180
sg9
L2L
sa(dp400
g1
I01
sg17
Nsg7
g182
sg9
L2L
sa(dp401
g1
I01
sg17
Nsg7
g184
sg9
L2L
sa(dp402
g1
I01
sg17
Nsg7
g186
sg9
L2L
sasg17
VA buffer for a writeable sequential RawIO object.\u000a\u000aThe constructor creates a BufferedWriter for the given writeable raw\u000astream. If the buffer_size is not given, it defaults to\u000aDEFAULT_BUFFER_SIZE.
p403
sg7
VBufferedWriter
p404
sg9
L3L
sa(dp405
g1
I01
sg2
(lp406
(dp407
g1
I01
sg7
g89
sg9
L5L
sa(dp408
g1
I01
sg7
g13
sg9
L5L
sa(dp409
g1
I01
sg7
g15
sg9
L5L
sa(dp410
g1
I01
sg17
V__dir__() -> list\u000adefault dir() implementation
p411
sg7
g19
sg9
L2L
sa(dp412
g1
I01
sg7
g21
sg9
L5L
sa(dp413
g1
I01
sg17
Nsg7
g96
sg9
L2L
sa(dp414
g1
I01
sg7
g23
sg9
L5L
sa(dp415
g1
I01
sg17
Nsg7
g99
sg9
L2L
sa(dp416
g1
I01
sg17
Vdefault object formatter
p417
sg7
g26
sg9
L2L
sa(dp418
g1
I01
sg7
g28
sg9
L5L
sa(dp419
g1
I01
sg7
g30
sg9
L5L
sa(dp420
g1
I01
sg17
Nsg7
g105
sg9
L2L
sa(dp421
g1
I01
sg7
g32
sg9
L5L
sa(dp422
g1
I01
sg7
g34
sg9
L5L
sa(dp423
g1
I01
sg7
g36
sg9
L5L
sa(dp424
g1
I01
sg7
g110
sg9
L5L
sa(dp425
g1
I01
sg7
g38
sg9
L5L
sa(dp426
g1
I01
sg7
g40
sg9
L5L
sa(dp427
g1
I01
sg7
g42
sg9
L5L
sa(dp428
g1
I01
sg17
VCreate and return a new object.  See help(type) for accurate signature.
p429
sg7
g45
sg9
L2L
sa(dp430
g1
I01
sg7
g117
sg9
L5L
sa(dp431
g1
I01
sg17
Vhelper for pickle
p432
sg7
g47
sg9
L2L
sa(dp433
g1
I01
sg17
Vhelper for pickle
p434
sg7
g50
sg9
L2L
sa(dp435
g1
I01
sg7
g52
sg9
L5L
sa(dp436
g1
I01
sg7
g54
sg9
L5L
sa(dp437
g1
I01
sg17
Nsg7
g56
sg9
L2L
sa(dp438
g1
I01
sg17
Nsg7
g59
sg9
L2L
sa(dp439
g1
I01
sg7
g61
sg9
L5L
sa(dp440
g1
I01
sg17
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p441
sg7
g64
sg9
L2L
sa(dp442
g1
I01
sg17
Nsg7
g130
sg9
L2L
sa(dp443
g1
I01
sg17
Nsg7
g132
sg9
L2L
sa(dp444
g1
I01
sg17
Nsg7
g134
sg9
L2L
sa(dp445
g1
I01
sg17
Nsg7
g136
sg9
L2L
sa(dp446
g1
I01
sg17
VDisable all I/O operations.
p447
sg7
g138
sg9
L2L
sa(dp448
g1
I01
sg7
g140
sg9
L5L
sa(dp449
g1
I01
sg17
VDisconnect this buffer from its underlying raw stream and return it.\u000a\u000aAfter the raw stream has been detached, the buffer is in an unusable\u000astate.
p450
sg7
g143
sg9
L2L
sa(dp451
g1
I01
sg17
VReturns underlying file descriptor if one exists.\u000a\u000aOSError is raised if the IO object does not use a file descriptor.
p452
sg7
g146
sg9
L2L
sa(dp453
g1
I01
sg17
VDoes nothing.
p454
sg7
g148
sg9
L2L
sa(dp455
g1
I01
sg17
VGet a read-write view over the contents of the BytesIO object.
p456
sg7
Vgetbuffer
p457
sg9
L2L
sa(dp458
g1
I01
sg17
VRetrieve the entire contents of the BytesIO object.
p459
sg7
Vgetvalue
p460
sg9
L2L
sa(dp461
g1
I01
sg17
VAlways returns False.\u000a\u000aBytesIO objects are not connected to a TTY-like device.
p462
sg7
g150
sg9
L2L
sa(dp463
g1
I01
sg17
VRead at most size bytes, returned as a bytes object.\u000a\u000aIf the size argument is negative, read until EOF is reached.\u000aReturn an empty bytes object at EOF.
p464
sg7
g154
sg9
L2L
sa(dp465
g1
I01
sg17
VRead at most size bytes, returned as a bytes object.\u000a\u000aIf the size argument is negative or omitted, read until EOF is reached.\u000aReturn an empty bytes object at EOF.
p466
sg7
g156
sg9
L2L
sa(dp467
g1
I01
sg17
VReturns True if the IO object can be read.
p468
sg7
g158
sg9
L2L
sa(dp469
g1
I01
sg17
VRead bytes into buffer.\u000a\u000aReturns number of bytes read (0 for EOF), or None if the object\u000ais set not to block and has no data to read.
p470
sg7
g160
sg9
L2L
sa(dp471
g1
I01
sg17
Nsg7
g162
sg9
L2L
sa(dp472
g1
I01
sg17
VNext line from the file, as a bytes object.\u000a\u000aRetain newline.  A non-negative size argument limits the maximum\u000anumber of bytes to return (an incomplete line may be returned then).\u000aReturn an empty bytes object at EOF.
p473
sg7
g165
sg9
L2L
sa(dp474
g1
I01
sg17
VList of bytes objects, each a line from the file.\u000a\u000aCall readline() repeatedly and return a list of the lines so read.\u000aThe optional size argument, if given, is an approximate bound on the\u000atotal number of bytes in the lines returned.
p475
sg7
g168
sg9
L2L
sa(dp476
g1
I01
sg17
VChange stream position.\u000a\u000aSeek to byte offset pos relative to position indicated by whence:\u000a     0  Start of stream (the default).  pos should be >= 0;\u000a     1  Current position - pos may be negative;\u000a     2  End of stream - pos usually negative.\u000aReturns the new absolute position.
p477
sg7
g171
sg9
L2L
sa(dp478
g1
I01
sg17
VReturns True if the IO object can be seeked.
p479
sg7
g174
sg9
L2L
sa(dp480
g1
I01
sg17
VCurrent file position, an integer.
p481
sg7
g177
sg9
L2L
sa(dp482
g1
I01
sg17
VTruncate the file to at most size bytes.\u000a\u000aSize defaults to the current file position, as returned by tell().\u000aThe current file position is unchanged.  Returns the new size.
p483
sg7
g180
sg9
L2L
sa(dp484
g1
I01
sg17
VReturns True if the IO object can be written.
p485
sg7
g182
sg9
L2L
sa(dp486
g1
I01
sg17
VWrite bytes to file.\u000a\u000aReturn the number of bytes written.
p487
sg7
g184
sg9
L2L
sa(dp488
g1
I01
sg17
VWrite lines to the file.\u000a\u000aNote that newlines are not added.  lines can be any iterable object\u000aproducing bytes-like objects. This is equivalent to calling write() for\u000aeach element.
p489
sg7
g186
sg9
L2L
sasg17
VBuffered I/O implementation using an in-memory bytes buffer.
p490
sg7
VBytesIO
p491
sg9
L3L
sa(dp492
g1
I01
sg7
VDEFAULT_BUFFER_SIZE
p493
sg9
L5L
sa(dp494
g1
I01
sg2
(lp495
(dp496
g1
I01
sg7
g89
sg9
L5L
sa(dp497
g1
I01
sg7
g13
sg9
L5L
sa(dp498
g1
I01
sg7
g15
sg9
L5L
sa(dp499
g1
I01
sg17
V__dir__() -> list\u000adefault dir() implementation
p500
sg7
g19
sg9
L2L
sa(dp501
g1
I01
sg7
g21
sg9
L5L
sa(dp502
g1
I01
sg17
Nsg7
g96
sg9
L2L
sa(dp503
g1
I01
sg7
g23
sg9
L5L
sa(dp504
g1
I01
sg17
Nsg7
g99
sg9
L2L
sa(dp505
g1
I01
sg17
Vdefault object formatter
p506
sg7
g26
sg9
L2L
sa(dp507
g1
I01
sg7
g28
sg9
L5L
sa(dp508
g1
I01
sg7
g30
sg9
L5L
sa(dp509
g1
I01
sg17
Nsg7
g105
sg9
L2L
sa(dp510
g1
I01
sg7
g32
sg9
L5L
sa(dp511
g1
I01
sg7
g34
sg9
L5L
sa(dp512
g1
I01
sg7
g36
sg9
L5L
sa(dp513
g1
I01
sg7
g110
sg9
L5L
sa(dp514
g1
I01
sg7
g38
sg9
L5L
sa(dp515
g1
I01
sg7
g40
sg9
L5L
sa(dp516
g1
I01
sg7
g42
sg9
L5L
sa(dp517
g1
I01
sg17
VCreate and return a new object.  See help(type) for accurate signature.
p518
sg7
g45
sg9
L2L
sa(dp519
g1
I01
sg7
g117
sg9
L5L
sa(dp520
g1
I01
sg17
Vhelper for pickle
p521
sg7
g47
sg9
L2L
sa(dp522
g1
I01
sg17
Vhelper for pickle
p523
sg7
g50
sg9
L2L
sa(dp524
g1
I01
sg7
g52
sg9
L5L
sa(dp525
g1
I01
sg7
g54
sg9
L5L
sa(dp526
g1
I01
sg17
V__sizeof__() -> int\u000asize of object in memory, in bytes
p527
sg7
g59
sg9
L2L
sa(dp528
g1
I01
sg7
g61
sg9
L5L
sa(dp529
g1
I01
sg17
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p530
sg7
g64
sg9
L2L
sa(dp531
g1
I01
sg7
V_blksize
p532
sg9
L5L
sa(dp533
g1
I01
sg17
Nsg7
g130
sg9
L2L
sa(dp534
g1
I01
sg17
Nsg7
g132
sg9
L2L
sa(dp535
g1
I01
sg17
Nsg7
g134
sg9
L2L
sa(dp536
g1
I01
sg17
Nsg7
g136
sg9
L2L
sa(dp537
g1
I01
sg17
Nsg7
g230
sg9
L2L
sa(dp538
g1
I01
sg7
g232
sg9
L5L
sa(dp539
g1
I01
sg17
VClose the file.\u000a\u000aA closed file cannot be used for further I/O operations.  close() may be\u000acalled more than once without error.
p540
sg7
g138
sg9
L2L
sa(dp541
g1
I01
sg7
g140
sg9
L5L
sa(dp542
g1
I01
sg7
Vclosefd
p543
sg9
L5L
sa(dp544
g1
I01
sg17
VReturn the underlying file descriptor (an integer).
p545
sg7
g146
sg9
L2L
sa(dp546
g1
I01
sg17
VFlush write buffers, if applicable.\u000a\u000aThis is not implemented for read-only and non-blocking streams.
p547
sg7
g148
sg9
L2L
sa(dp548
g1
I01
sg17
VTrue if the file is connected to a TTY device.
p549
sg7
g150
sg9
L2L
sa(dp550
g1
I01
sg7
g240
sg9
L5L
sa(dp551
g1
I01
sg17
VRead at most size bytes, returned as bytes.\u000a\u000aOnly makes one system call, so less data may be returned than requested.\u000aIn non-blocking mode, returns None if no data is available.\u000aReturn an empty bytes object at EOF.
p552
sg7
g154
sg9
L2L
sa(dp553
g1
I01
sg17
VTrue if file was opened in a read mode.
p554
sg7
g158
sg9
L2L
sa(dp555
g1
I01
sg17
VRead all data from the file, returned as bytes.\u000a\u000aIn non-blocking mode, returns as much as is immediately available,\u000aor None if no data is available.  Return an empty bytes object at EOF.
p556
sg7
Vreadall
p557
sg9
L2L
sa(dp558
g1
I01
sg17
VSame as RawIOBase.readinto().
p559
sg7
g160
sg9
L2L
sa(dp560
g1
I01
sg17
VRead and return a line from the stream.\u000a\u000aIf size is specified, at most size bytes will be read.\u000a\u000aThe line terminator is always b'\u005cn' for binary files; for text\u000afiles, the newlines argument to open can be used to select the line\u000aterminator(s) recognized.
p561
sg7
g165
sg9
L2L
sa(dp562
g1
I01
sg17
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p563
sg7
g168
sg9
L2L
sa(dp564
g1
I01
sg17
VMove to new file position and return the file position.\u000a\u000aArgument offset is a byte count.  Optional argument whence defaults to\u000aSEEK_SET or 0 (offset from start of file, offset should be >= 0); other values\u000aare SEEK_CUR or 1 (move relative to current position, positive or negative),\u000aand SEEK_END or 2 (move relative to end of file, usually negative, although\u000amany platforms allow seeking beyond the end of a file).\u000a\u000aNote that not all file objects are seekable.
p565
sg7
g171
sg9
L2L
sa(dp566
g1
I01
sg17
VTrue if file supports random-access.
p567
sg7
g174
sg9
L2L
sa(dp568
g1
I01
sg17
VCurrent file position.\u000a\u000aCan raise OSError for non seekable files.
p569
sg7
g177
sg9
L2L
sa(dp570
g1
I01
sg17
VTruncate the file to at most size bytes and return the truncated size.\u000a\u000aSize defaults to the current file position, as returned by tell().\u000aThe current file position is changed to the value of size.
p571
sg7
g180
sg9
L2L
sa(dp572
g1
I01
sg17
VTrue if file was opened in a write mode.
p573
sg7
g182
sg9
L2L
sa(dp574
g1
I01
sg17
VWrite buffer b to file, return number of bytes written.\u000a\u000aOnly makes one system call, so not all of the data may be written.\u000aThe number of bytes actually written is returned.  In non-blocking mode,\u000areturns None if the write would block.
p575
sg7
g184
sg9
L2L
sa(dp576
g1
I01
sg17
Nsg7
g186
sg9
L2L
sasg17
VOpen a file.\u000a\u000aThe mode can be 'r' (default), 'w', 'x' or 'a' for reading,\u000awriting, exclusive creation or appending.  The file will be created if it\u000adoesn't exist when opened for writing or appending; it will be truncated\u000awhen opened for writing.  A FileExistsError will be raised if it already\u000aexists when opened for creating. Opening a file for creating implies\u000awriting so this mode behaves in a similar way to 'w'.Add a '+' to the mode\u000ato allow simultaneous reading and writing. A custom opener can be used by\u000apassing a callable as *opener*. The underlying file descriptor for the file\u000aobject is then obtained by calling opener with (*name*, *flags*).\u000a*opener* must return an open file descriptor (passing os.open as *opener*\u000aresults in functionality similar to passing None).
p577
sg7
VFileIO
p578
sg9
L3L
sa(dp579
g1
I01
sg2
(lp580
(dp581
g1
I01
sg7
g13
sg9
L5L
sa(dp582
g1
I01
sg17
V__dir__() -> list\u000adefault dir() implementation
p583
sg7
g19
sg9
L2L
sa(dp584
g1
I01
sg7
g21
sg9
L5L
sa(dp585
g1
I01
sg7
g23
sg9
L5L
sa(dp586
g1
I01
sg17
Vdefault object formatter
p587
sg7
g26
sg9
L2L
sa(dp588
g1
I01
sg7
g28
sg9
L5L
sa(dp589
g1
I01
sg7
g30
sg9
L5L
sa(dp590
g1
I01
sg7
g32
sg9
L5L
sa(dp591
g1
I01
sg7
g34
sg9
L5L
sa(dp592
g1
I01
sg7
g36
sg9
L5L
sa(dp593
g1
I01
sg7
g38
sg9
L5L
sa(dp594
g1
I01
sg7
g40
sg9
L5L
sa(dp595
g1
I01
sg7
g42
sg9
L5L
sa(dp596
g1
I01
sg17
VCreate and return a new object.  See help(type) for accurate signature.
p597
sg7
g45
sg9
L2L
sa(dp598
g1
I01
sg17
Vhelper for pickle
p599
sg7
g47
sg9
L2L
sa(dp600
g1
I01
sg17
Vhelper for pickle
p601
sg7
g50
sg9
L2L
sa(dp602
g1
I01
sg7
g52
sg9
L5L
sa(dp603
g1
I01
sg7
g54
sg9
L5L
sa(dp604
g1
I01
sg17
V__sizeof__() -> int\u000asize of object in memory, in bytes
p605
sg7
g59
sg9
L2L
sa(dp606
g1
I01
sg7
g61
sg9
L5L
sa(dp607
g1
I01
sg17
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p608
sg7
g64
sg9
L2L
sa(dp609
g1
I01
sg17
Nsg7
Vdecode
p610
sg9
L2L
sa(dp611
g1
I01
sg17
Nsg7
Vgetstate
p612
sg9
L2L
sa(dp613
g1
I01
sg7
Vnewlines
p614
sg9
L5L
sa(dp615
g1
I01
sg17
Nsg7
Vreset
p616
sg9
L2L
sa(dp617
g1
I01
sg17
Nsg7
Vsetstate
p618
sg9
L2L
sasg17
VCodec used when reading a file in universal newlines mode.\u000a\u000aIt wraps another incremental decoder, translating \u005cr\u005cn and \u005cr into \u005cn.\u000aIt also records the types of newlines encountered.  When used with\u000atranslate=False, it ensures that the newline sequence is returned in\u000aone piece. When used with decoder=None, it expects unicode strings as\u000adecode input and translates newlines without first invoking an external\u000adecoder.
p619
sg7
VIncrementalNewlineDecoder
p620
sg9
L3L
sa(dp621
g1
I01
sg2
(lp622
(dp623
g1
I01
sg7
g89
sg9
L5L
sa(dp624
g1
I01
sg7
g13
sg9
L5L
sa(dp625
g1
I01
sg7
g15
sg9
L5L
sa(dp626
g1
I01
sg17
V__dir__() -> list\u000adefault dir() implementation
p627
sg7
g19
sg9
L2L
sa(dp628
g1
I01
sg7
g21
sg9
L5L
sa(dp629
g1
I01
sg17
Nsg7
g96
sg9
L2L
sa(dp630
g1
I01
sg7
g23
sg9
L5L
sa(dp631
g1
I01
sg17
Nsg7
g99
sg9
L2L
sa(dp632
g1
I01
sg17
Vdefault object formatter
p633
sg7
g26
sg9
L2L
sa(dp634
g1
I01
sg7
g28
sg9
L5L
sa(dp635
g1
I01
sg7
g30
sg9
L5L
sa(dp636
g1
I01
sg17
Nsg7
g105
sg9
L2L
sa(dp637
g1
I01
sg7
g32
sg9
L5L
sa(dp638
g1
I01
sg7
g34
sg9
L5L
sa(dp639
g1
I01
sg7
g36
sg9
L5L
sa(dp640
g1
I01
sg7
g110
sg9
L5L
sa(dp641
g1
I01
sg7
g38
sg9
L5L
sa(dp642
g1
I01
sg7
g40
sg9
L5L
sa(dp643
g1
I01
sg7
g42
sg9
L5L
sa(dp644
g1
I01
sg17
VCreate and return a new object.  See help(type) for accurate signature.
p645
sg7
g45
sg9
L2L
sa(dp646
g1
I01
sg7
g117
sg9
L5L
sa(dp647
g1
I01
sg17
Vhelper for pickle
p648
sg7
g47
sg9
L2L
sa(dp649
g1
I01
sg17
Vhelper for pickle
p650
sg7
g50
sg9
L2L
sa(dp651
g1
I01
sg7
g52
sg9
L5L
sa(dp652
g1
I01
sg7
g54
sg9
L5L
sa(dp653
g1
I01
sg17
Nsg7
g56
sg9
L2L
sa(dp654
g1
I01
sg17
V__sizeof__() -> int\u000asize of object in memory, in bytes
p655
sg7
g59
sg9
L2L
sa(dp656
g1
I01
sg7
g61
sg9
L5L
sa(dp657
g1
I01
sg17
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p658
sg7
g64
sg9
L2L
sa(dp659
g1
I01
sg17
Nsg7
g130
sg9
L2L
sa(dp660
g1
I01
sg17
Nsg7
g132
sg9
L2L
sa(dp661
g1
I01
sg17
Nsg7
g134
sg9
L2L
sa(dp662
g1
I01
sg17
Nsg7
g136
sg9
L2L
sa(dp663
g1
I01
sg17
VClose the IO object.\u000a\u000aAttempting any further operation after the object is closed\u000awill raise a ValueError.\u000a\u000aThis method has no effect if the file is already closed.
p664
sg7
g138
sg9
L2L
sa(dp665
g1
I01
sg7
g140
sg9
L5L
sa(dp666
g1
I01
sg17
VSeparate the underlying buffer from the TextIOBase and return it.\u000a\u000aAfter the underlying buffer has been detached, the TextIO is in an\u000aunusable state.\u000a
p667
sg7
g143
sg9
L2L
sa(dp668
g1
I01
sg7
Vencoding
p669
sg9
L5L
sa(dp670
g1
I01
sg7
Verrors
p671
sg9
L5L
sa(dp672
g1
I01
sg17
VReturns underlying file descriptor if one exists.\u000a\u000aOSError is raised if the IO object does not use a file descriptor.
p673
sg7
g146
sg9
L2L
sa(dp674
g1
I01
sg17
VFlush write buffers, if applicable.\u000a\u000aThis is not implemented for read-only and non-blocking streams.
p675
sg7
g148
sg9
L2L
sa(dp676
g1
I01
sg17
VRetrieve the entire contents of the object.
p677
sg7
g460
sg9
L2L
sa(dp678
g1
I01
sg17
VReturn whether this is an 'interactive' stream.\u000a\u000aReturn False if it can't be determined.
p679
sg7
g150
sg9
L2L
sa(dp680
g1
I01
sg7
Vline_buffering
p681
sg9
L5L
sa(dp682
g1
I01
sg7
g614
sg9
L5L
sa(dp683
g1
I01
sg17
VRead at most size characters, returned as a string.\u000a\u000aIf the argument is negative or omitted, read until EOF\u000ais reached. Return an empty string at EOF.
p684
sg7
g154
sg9
L2L
sa(dp685
g1
I01
sg17
VReturns True if the IO object can be read.
p686
sg7
g158
sg9
L2L
sa(dp687
g1
I01
sg17
VRead until newline or EOF.\u000a\u000aReturns an empty string if EOF is hit immediately.
p688
sg7
g165
sg9
L2L
sa(dp689
g1
I01
sg17
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p690
sg7
g168
sg9
L2L
sa(dp691
g1
I01
sg17
VChange stream position.\u000a\u000aSeek to character offset pos relative to position indicated by whence:\u000a    0  Start of stream (the default).  pos should be >= 0;\u000a    1  Current position - pos must be 0;\u000a    2  End of stream - pos must be 0.\u000aReturns the new absolute position.
p692
sg7
g171
sg9
L2L
sa(dp693
g1
I01
sg17
VReturns True if the IO object can be seeked.
p694
sg7
g174
sg9
L2L
sa(dp695
g1
I01
sg17
VTell the current file position.
p696
sg7
g177
sg9
L2L
sa(dp697
g1
I01
sg17
VTruncate size to pos.\u000a\u000aThe pos argument defaults to the current file position, as\u000areturned by tell().  The current file position is unchanged.\u000aReturns the new absolute position.
p698
sg7
g180
sg9
L2L
sa(dp699
g1
I01
sg17
VReturns True if the IO object can be written.
p700
sg7
g182
sg9
L2L
sa(dp701
g1
I01
sg17
VWrite string to file.\u000a\u000aReturns the number of characters written, which is always equal to\u000athe length of the string.
p702
sg7
g184
sg9
L2L
sa(dp703
g1
I01
sg17
Nsg7
g186
sg9
L2L
sasg17
VText I/O implementation using an in-memory buffer.\u000a\u000aThe initial_value argument sets the value of object.  The newline\u000aargument is like the one of TextIOWrapper's constructor.
p704
sg7
VStringIO
p705
sg9
L3L
sa(dp706
g1
I01
sg2
(lp707
(dp708
g1
I01
sg7
V_CHUNK_SIZE
p709
sg9
L5L
sa(dp710
g1
I01
sg7
g89
sg9
L5L
sa(dp711
g1
I01
sg7
g13
sg9
L5L
sa(dp712
g1
I01
sg7
g15
sg9
L5L
sa(dp713
g1
I01
sg17
V__dir__() -> list\u000adefault dir() implementation
p714
sg7
g19
sg9
L2L
sa(dp715
g1
I01
sg7
g21
sg9
L5L
sa(dp716
g1
I01
sg17
Nsg7
g96
sg9
L2L
sa(dp717
g1
I01
sg7
g23
sg9
L5L
sa(dp718
g1
I01
sg17
Nsg7
g99
sg9
L2L
sa(dp719
g1
I01
sg17
Vdefault object formatter
p720
sg7
g26
sg9
L2L
sa(dp721
g1
I01
sg7
g28
sg9
L5L
sa(dp722
g1
I01
sg7
g30
sg9
L5L
sa(dp723
g1
I01
sg17
Nsg7
g105
sg9
L2L
sa(dp724
g1
I01
sg7
g32
sg9
L5L
sa(dp725
g1
I01
sg7
g34
sg9
L5L
sa(dp726
g1
I01
sg7
g36
sg9
L5L
sa(dp727
g1
I01
sg7
g110
sg9
L5L
sa(dp728
g1
I01
sg7
g38
sg9
L5L
sa(dp729
g1
I01
sg7
g40
sg9
L5L
sa(dp730
g1
I01
sg7
g42
sg9
L5L
sa(dp731
g1
I01
sg17
VCreate and return a new object.  See help(type) for accurate signature.
p732
sg7
g45
sg9
L2L
sa(dp733
g1
I01
sg7
g117
sg9
L5L
sa(dp734
g1
I01
sg17
Vhelper for pickle
p735
sg7
g47
sg9
L2L
sa(dp736
g1
I01
sg17
Vhelper for pickle
p737
sg7
g50
sg9
L2L
sa(dp738
g1
I01
sg7
g52
sg9
L5L
sa(dp739
g1
I01
sg7
g54
sg9
L5L
sa(dp740
g1
I01
sg17
V__sizeof__() -> int\u000asize of object in memory, in bytes
p741
sg7
g59
sg9
L2L
sa(dp742
g1
I01
sg7
g61
sg9
L5L
sa(dp743
g1
I01
sg17
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p744
sg7
g64
sg9
L2L
sa(dp745
g1
I01
sg17
Nsg7
g130
sg9
L2L
sa(dp746
g1
I01
sg17
Nsg7
g132
sg9
L2L
sa(dp747
g1
I01
sg17
Nsg7
g134
sg9
L2L
sa(dp748
g1
I01
sg17
Nsg7
g136
sg9
L2L
sa(dp749
g1
I01
sg7
g232
sg9
L5L
sa(dp750
g1
I01
sg7
Vbuffer
p751
sg9
L5L
sa(dp752
g1
I01
sg17
Nsg7
g138
sg9
L2L
sa(dp753
g1
I01
sg7
g140
sg9
L5L
sa(dp754
g1
I01
sg17
Nsg7
g143
sg9
L2L
sa(dp755
g1
I01
sg7
g669
sg9
L5L
sa(dp756
g1
I01
sg7
g671
sg9
L5L
sa(dp757
g1
I01
sg17
Nsg7
g146
sg9
L2L
sa(dp758
g1
I01
sg17
Nsg7
g148
sg9
L2L
sa(dp759
g1
I01
sg17
Nsg7
g150
sg9
L2L
sa(dp760
g1
I01
sg7
g681
sg9
L5L
sa(dp761
g1
I01
sg7
g7
sg9
L5L
sa(dp762
g1
I01
sg7
g614
sg9
L5L
sa(dp763
g1
I01
sg17
Nsg7
g154
sg9
L2L
sa(dp764
g1
I01
sg17
Nsg7
g158
sg9
L2L
sa(dp765
g1
I01
sg17
Nsg7
g165
sg9
L2L
sa(dp766
g1
I01
sg17
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p767
sg7
g168
sg9
L2L
sa(dp768
g1
I01
sg17
Nsg7
g171
sg9
L2L
sa(dp769
g1
I01
sg17
Nsg7
g174
sg9
L2L
sa(dp770
g1
I01
sg17
Nsg7
g177
sg9
L2L
sa(dp771
g1
I01
sg17
Nsg7
g180
sg9
L2L
sa(dp772
g1
I01
sg17
Nsg7
g182
sg9
L2L
sa(dp773
g1
I01
sg17
Nsg7
g184
sg9
L2L
sa(dp774
g1
I01
sg17
Nsg7
g186
sg9
L2L
sasg17
VCharacter and line based layer over a BufferedIOBase object, buffer.\u000a\u000aencoding gives the name of the encoding that the stream will be\u000adecoded or encoded with. It defaults to locale.getpreferredencoding(False).\u000a\u000aerrors determines the strictness of encoding and decoding (see\u000ahelp(codecs.Codec) or the documentation for codecs.register) and\u000adefaults to "strict".\u000a\u000anewline controls how line endings are handled. It can be None, '',\u000a'\u005cn', '\u005cr', and '\u005cr\u005cn'.  It works as follows:\u000a\u000a* On input, if newline is None, universal newlines mode is\u000a  enabled. Lines in the input can end in '\u005cn', '\u005cr', or '\u005cr\u005cn', and\u000a  these are translated into '\u005cn' before being returned to the\u000a  caller. If it is '', universal newline mode is enabled, but line\u000a  endings are returned to the caller untranslated. If it has any of\u000a  the other legal values, input lines are only terminated by the given\u000a  string, and the line ending is returned to the caller untranslated.\u000a\u000a* On output, if newline is None, any '\u005cn' characters written are\u000a  translated to the system default line separator, os.linesep. If\u000a  newline is '' or '\u005cn', no translation takes place. If newline is any\u000a  of the other legal values, any '\u005cn' characters written are translated\u000a  to the given string.\u000a\u000aIf line_buffering is True, a call to flush is implied when a call to\u000awrite contains a newline character.
p775
sg7
VTextIOWrapper
p776
sg9
L3L
sa(dp777
g1
I01
sg2
(lp778
(dp779
g1
I01
sg7
g8
sg9
L5L
sa(dp780
g1
I01
sg7
g11
sg9
L5L
sa(dp781
g1
I01
sg7
g13
sg9
L5L
sa(dp782
g1
I01
sg7
g15
sg9
L5L
sa(dp783
g1
I01
sg17
V__dir__() -> list\u000adefault dir() implementation
p784
sg7
g19
sg9
L2L
sa(dp785
g1
I01
sg7
g21
sg9
L5L
sa(dp786
g1
I01
sg7
g23
sg9
L5L
sa(dp787
g1
I01
sg17
Vdefault object formatter
p788
sg7
g26
sg9
L2L
sa(dp789
g1
I01
sg7
g28
sg9
L5L
sa(dp790
g1
I01
sg7
g30
sg9
L5L
sa(dp791
g1
I01
sg7
g32
sg9
L5L
sa(dp792
g1
I01
sg7
g34
sg9
L5L
sa(dp793
g1
I01
sg7
g36
sg9
L5L
sa(dp794
g1
I01
sg7
g38
sg9
L5L
sa(dp795
g1
I01
sg7
g40
sg9
L5L
sa(dp796
g1
I01
sg7
V__module__
p797
sg9
L5L
sa(dp798
g1
I01
sg7
g42
sg9
L5L
sa(dp799
g1
I01
sg17
VCreate and return a new object.  See help(type) for accurate signature.
p800
sg7
g45
sg9
L2L
sa(dp801
g1
I01
sg17
Nsg7
g47
sg9
L2L
sa(dp802
g1
I01
sg17
Vhelper for pickle
p803
sg7
g50
sg9
L2L
sa(dp804
g1
I01
sg7
g52
sg9
L5L
sa(dp805
g1
I01
sg7
g54
sg9
L5L
sa(dp806
g1
I01
sg17
Nsg7
g56
sg9
L2L
sa(dp807
g1
I01
sg17
V__sizeof__() -> int\u000asize of object in memory, in bytes
p808
sg7
g59
sg9
L2L
sa(dp809
g1
I01
sg7
g61
sg9
L5L
sa(dp810
g1
I01
sg17
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p811
sg7
g64
sg9
L2L
sa(dp812
g1
I01
sg7
g66
sg9
L5L
sa(dp813
g1
I01
sg7
g68
sg9
L5L
sa(dp814
g1
I01
sg7
V__weakref__
p815
sg9
L5L
sa(dp816
g1
I01
sg7
g70
sg9
L5L
sa(dp817
g1
I01
sg7
g72
sg9
L5L
sa(dp818
g1
I01
sg7
g74
sg9
L5L
sa(dp819
g1
I01
sg7
g76
sg9
L5L
sa(dp820
g1
I01
sg7
g78
sg9
L5L
sa(dp821
g1
I01
sg7
g80
sg9
L5L
sa(dp822
g1
I01
sg17
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p823
sg7
g83
sg9
L2L
sasg17
Nsg7
VUnsupportedOperation
p824
sg9
L3L
sa(dp825
g1
I01
sg2
(lp826
(dp827
g1
I01
sg7
g89
sg9
L5L
sa(dp828
g1
I01
sg7
g13
sg9
L5L
sa(dp829
g1
I01
sg7
g15
sg9
L5L
sa(dp830
g1
I01
sg17
V__dir__() -> list\u000adefault dir() implementation
p831
sg7
g19
sg9
L2L
sa(dp832
g1
I01
sg7
g21
sg9
L5L
sa(dp833
g1
I01
sg17
Nsg7
g96
sg9
L2L
sa(dp834
g1
I01
sg7
g23
sg9
L5L
sa(dp835
g1
I01
sg17
Nsg7
g99
sg9
L2L
sa(dp836
g1
I01
sg17
Vdefault object formatter
p837
sg7
g26
sg9
L2L
sa(dp838
g1
I01
sg7
g28
sg9
L5L
sa(dp839
g1
I01
sg7
g30
sg9
L5L
sa(dp840
g1
I01
sg7
g32
sg9
L5L
sa(dp841
g1
I01
sg7
g34
sg9
L5L
sa(dp842
g1
I01
sg7
g36
sg9
L5L
sa(dp843
g1
I01
sg7
g110
sg9
L5L
sa(dp844
g1
I01
sg7
g38
sg9
L5L
sa(dp845
g1
I01
sg7
g40
sg9
L5L
sa(dp846
g1
I01
sg7
g42
sg9
L5L
sa(dp847
g1
I01
sg17
VCreate and return a new object.  See help(type) for accurate signature.
p848
sg7
g45
sg9
L2L
sa(dp849
g1
I01
sg7
g117
sg9
L5L
sa(dp850
g1
I01
sg17
Vhelper for pickle
p851
sg7
g47
sg9
L2L
sa(dp852
g1
I01
sg17
Vhelper for pickle
p853
sg7
g50
sg9
L2L
sa(dp854
g1
I01
sg7
g52
sg9
L5L
sa(dp855
g1
I01
sg7
g54
sg9
L5L
sa(dp856
g1
I01
sg17
V__sizeof__() -> int\u000asize of object in memory, in bytes
p857
sg7
g59
sg9
L2L
sa(dp858
g1
I01
sg7
g61
sg9
L5L
sa(dp859
g1
I01
sg17
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p860
sg7
g64
sg9
L2L
sa(dp861
g1
I01
sg17
Nsg7
g130
sg9
L2L
sa(dp862
g1
I01
sg17
Nsg7
g132
sg9
L2L
sa(dp863
g1
I01
sg17
Nsg7
g134
sg9
L2L
sa(dp864
g1
I01
sg17
Nsg7
g136
sg9
L2L
sa(dp865
g1
I01
sg17
VFlush and close the IO object.\u000a\u000aThis method has no effect if the file is already closed.
p866
sg7
g138
sg9
L2L
sa(dp867
g1
I01
sg7
g140
sg9
L5L
sa(dp868
g1
I01
sg17
VDisconnect this buffer from its underlying raw stream and return it.\u000a\u000aAfter the raw stream has been detached, the buffer is in an unusable\u000astate.
p869
sg7
g143
sg9
L2L
sa(dp870
g1
I01
sg17
VReturns underlying file descriptor if one exists.\u000a\u000aOSError is raised if the IO object does not use a file descriptor.
p871
sg7
g146
sg9
L2L
sa(dp872
g1
I01
sg17
VFlush write buffers, if applicable.\u000a\u000aThis is not implemented for read-only and non-blocking streams.
p873
sg7
g148
sg9
L2L
sa(dp874
g1
I01
sg17
VReturn whether this is an 'interactive' stream.\u000a\u000aReturn False if it can't be determined.
p875
sg7
g150
sg9
L2L
sa(dp876
g1
I01
sg17
VRead and return up to n bytes.\u000a\u000aIf the argument is omitted, None, or negative, reads and\u000areturns all data until EOF.\u000a\u000aIf the argument is positive, and the underlying raw stream is\u000anot 'interactive', multiple raw reads may be issued to satisfy\u000athe byte count (unless EOF is reached first).  But for\u000ainteractive raw streams (as well as sockets and pipes), at most\u000aone raw read will be issued, and a short result does not imply\u000athat EOF is imminent.\u000a\u000aReturns an empty bytes object on EOF.\u000a\u000aReturns None if the underlying raw stream was open in non-blocking\u000amode and no data is available at the moment.\u000a
p877
sg7
g154
sg9
L2L
sa(dp878
g1
I01
sg17
VRead and return up to n bytes, with at most one read() call\u000ato the underlying raw stream. A short result does not imply\u000athat EOF is imminent.\u000a\u000aReturns an empty bytes object on EOF.\u000a
p879
sg7
g156
sg9
L2L
sa(dp880
g1
I01
sg17
VReturn whether object was opened for reading.\u000a\u000aIf False, read() will raise OSError.
p881
sg7
g158
sg9
L2L
sa(dp882
g1
I01
sg17
Nsg7
g160
sg9
L2L
sa(dp883
g1
I01
sg17
Nsg7
g162
sg9
L2L
sa(dp884
g1
I01
sg17
VRead and return a line from the stream.\u000a\u000aIf size is specified, at most size bytes will be read.\u000a\u000aThe line terminator is always b'\u005cn' for binary files; for text\u000afiles, the newlines argument to open can be used to select the line\u000aterminator(s) recognized.
p885
sg7
g165
sg9
L2L
sa(dp886
g1
I01
sg17
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p887
sg7
g168
sg9
L2L
sa(dp888
g1
I01
sg17
VChange stream position.\u000a\u000aChange the stream position to the given byte offset. The offset is\u000ainterpreted relative to the position indicated by whence.  Values\u000afor whence are:\u000a\u000a* 0 -- start of stream (the default); offset should be zero or positive\u000a* 1 -- current stream position; offset may be negative\u000a* 2 -- end of stream; offset is usually negative\u000a\u000aReturn the new absolute position.
p889
sg7
g171
sg9
L2L
sa(dp890
g1
I01
sg17
VReturn whether object supports random access.\u000a\u000aIf False, seek(), tell() and truncate() will raise OSError.\u000aThis method may need to do a test seek().
p891
sg7
g174
sg9
L2L
sa(dp892
g1
I01
sg17
VReturn current stream position.
p893
sg7
g177
sg9
L2L
sa(dp894
g1
I01
sg17
VTruncate file to size bytes.\u000a\u000aFile pointer is left unchanged.  Size defaults to the current IO\u000aposition as reported by tell().  Returns the new size.
p895
sg7
g180
sg9
L2L
sa(dp896
g1
I01
sg17
VReturn whether object was opened for writing.\u000a\u000aIf False, write() will raise OSError.
p897
sg7
g182
sg9
L2L
sa(dp898
g1
I01
sg17
VWrite the given buffer to the IO stream.\u000a\u000aReturns the number of bytes written, which is always the length of b\u000ain bytes.\u000a\u000aRaises BlockingIOError if the buffer is full and the\u000aunderlying raw stream cannot accept more data at the moment.\u000a
p899
sg7
g184
sg9
L2L
sa(dp900
g1
I01
sg17
Nsg7
g186
sg9
L2L
sasg17
VBase class for buffered IO objects.\u000a\u000aThe main difference with RawIOBase is that the read() method\u000asupports omitting the size argument, and does not have a default\u000aimplementation that defers to readinto().\u000a\u000aIn addition, read(), readinto() and write() may raise\u000aBlockingIOError if the underlying raw stream is in non-blocking\u000amode and not ready; unlike their raw counterparts, they will never\u000areturn None.\u000a\u000aA typical implementation should not inherit from a RawIOBase\u000aimplementation, but wrap one.\u000a
p901
sg7
V_BufferedIOBase
p902
sg9
L3L
sa(dp903
g1
I01
sg2
(lp904
(dp905
g1
I01
sg7
g89
sg9
L5L
sa(dp906
g1
I01
sg7
g13
sg9
L5L
sa(dp907
g1
I01
sg7
g15
sg9
L5L
sa(dp908
g1
I01
sg17
V__dir__() -> list\u000adefault dir() implementation
p909
sg7
g19
sg9
L2L
sa(dp910
g1
I01
sg7
g21
sg9
L5L
sa(dp911
g1
I01
sg17
Nsg7
g96
sg9
L2L
sa(dp912
g1
I01
sg7
g23
sg9
L5L
sa(dp913
g1
I01
sg17
Nsg7
g99
sg9
L2L
sa(dp914
g1
I01
sg17
Vdefault object formatter
p915
sg7
g26
sg9
L2L
sa(dp916
g1
I01
sg7
g28
sg9
L5L
sa(dp917
g1
I01
sg7
g30
sg9
L5L
sa(dp918
g1
I01
sg7
g32
sg9
L5L
sa(dp919
g1
I01
sg7
g34
sg9
L5L
sa(dp920
g1
I01
sg7
g36
sg9
L5L
sa(dp921
g1
I01
sg7
g110
sg9
L5L
sa(dp922
g1
I01
sg7
g38
sg9
L5L
sa(dp923
g1
I01
sg7
g40
sg9
L5L
sa(dp924
g1
I01
sg7
g42
sg9
L5L
sa(dp925
g1
I01
sg17
VCreate and return a new object.  See help(type) for accurate signature.
p926
sg7
g45
sg9
L2L
sa(dp927
g1
I01
sg7
g117
sg9
L5L
sa(dp928
g1
I01
sg17
Vhelper for pickle
p929
sg7
g47
sg9
L2L
sa(dp930
g1
I01
sg17
Vhelper for pickle
p931
sg7
g50
sg9
L2L
sa(dp932
g1
I01
sg7
g52
sg9
L5L
sa(dp933
g1
I01
sg7
g54
sg9
L5L
sa(dp934
g1
I01
sg17
V__sizeof__() -> int\u000asize of object in memory, in bytes
p935
sg7
g59
sg9
L2L
sa(dp936
g1
I01
sg7
g61
sg9
L5L
sa(dp937
g1
I01
sg17
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p938
sg7
g64
sg9
L2L
sa(dp939
g1
I01
sg17
Nsg7
g130
sg9
L2L
sa(dp940
g1
I01
sg17
Nsg7
g132
sg9
L2L
sa(dp941
g1
I01
sg17
Nsg7
g134
sg9
L2L
sa(dp942
g1
I01
sg17
Nsg7
g136
sg9
L2L
sa(dp943
g1
I01
sg17
VFlush and close the IO object.\u000a\u000aThis method has no effect if the file is already closed.
p944
sg7
g138
sg9
L2L
sa(dp945
g1
I01
sg7
g140
sg9
L5L
sa(dp946
g1
I01
sg17
VReturns underlying file descriptor if one exists.\u000a\u000aOSError is raised if the IO object does not use a file descriptor.
p947
sg7
g146
sg9
L2L
sa(dp948
g1
I01
sg17
VFlush write buffers, if applicable.\u000a\u000aThis is not implemented for read-only and non-blocking streams.
p949
sg7
g148
sg9
L2L
sa(dp950
g1
I01
sg17
VReturn whether this is an 'interactive' stream.\u000a\u000aReturn False if it can't be determined.
p951
sg7
g150
sg9
L2L
sa(dp952
g1
I01
sg17
VReturn whether object was opened for reading.\u000a\u000aIf False, read() will raise OSError.
p953
sg7
g158
sg9
L2L
sa(dp954
g1
I01
sg17
VRead and return a line from the stream.\u000a\u000aIf size is specified, at most size bytes will be read.\u000a\u000aThe line terminator is always b'\u005cn' for binary files; for text\u000afiles, the newlines argument to open can be used to select the line\u000aterminator(s) recognized.
p955
sg7
g165
sg9
L2L
sa(dp956
g1
I01
sg17
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p957
sg7
g168
sg9
L2L
sa(dp958
g1
I01
sg17
VChange stream position.\u000a\u000aChange the stream position to the given byte offset. The offset is\u000ainterpreted relative to the position indicated by whence.  Values\u000afor whence are:\u000a\u000a* 0 -- start of stream (the default); offset should be zero or positive\u000a* 1 -- current stream position; offset may be negative\u000a* 2 -- end of stream; offset is usually negative\u000a\u000aReturn the new absolute position.
p959
sg7
g171
sg9
L2L
sa(dp960
g1
I01
sg17
VReturn whether object supports random access.\u000a\u000aIf False, seek(), tell() and truncate() will raise OSError.\u000aThis method may need to do a test seek().
p961
sg7
g174
sg9
L2L
sa(dp962
g1
I01
sg17
VReturn current stream position.
p963
sg7
g177
sg9
L2L
sa(dp964
g1
I01
sg17
VTruncate file to size bytes.\u000a\u000aFile pointer is left unchanged.  Size defaults to the current IO\u000aposition as reported by tell().  Returns the new size.
p965
sg7
g180
sg9
L2L
sa(dp966
g1
I01
sg17
VReturn whether object was opened for writing.\u000a\u000aIf False, write() will raise OSError.
p967
sg7
g182
sg9
L2L
sa(dp968
g1
I01
sg17
Nsg7
g186
sg9
L2L
sasg17
VThe abstract base class for all I/O classes, acting on streams of\u000abytes. There is no public constructor.\u000a\u000aThis class provides dummy implementations for many methods that\u000aderived classes can override selectively; the default implementations\u000arepresent a file that cannot be read, written or seeked.\u000a\u000aEven though IOBase does not declare read, readinto, or write because\u000atheir signatures will vary, implementations and clients should\u000aconsider those methods part of the interface. Also, implementations\u000amay raise UnsupportedOperation when operations they do not support are\u000acalled.\u000a\u000aThe basic type used for binary data read from or written to a file is\u000abytes. Other bytes-like objects are accepted as method arguments too.\u000aIn some cases (such as readinto), a writable object is required. Text\u000aI/O classes work with str data.\u000a\u000aNote that calling any method (except additional calls to close(),\u000awhich are ignored) on a closed stream should raise a ValueError.\u000a\u000aIOBase (and its subclasses) support the iterator protocol, meaning\u000athat an IOBase object can be iterated over yielding the lines in a\u000astream.\u000a\u000aIOBase also supports the :keyword:`with` statement. In this example,\u000afp is closed after the suite of the with statement is complete:\u000a\u000awith open('spam.txt', 'r') as fp:\u000a    fp.write('Spam and eggs!')\u000a
p969
sg7
V_IOBase
p970
sg9
L3L
sa(dp971
g1
I01
sg2
(lp972
(dp973
g1
I01
sg7
g89
sg9
L5L
sa(dp974
g1
I01
sg7
g13
sg9
L5L
sa(dp975
g1
I01
sg7
g15
sg9
L5L
sa(dp976
g1
I01
sg17
V__dir__() -> list\u000adefault dir() implementation
p977
sg7
g19
sg9
L2L
sa(dp978
g1
I01
sg7
g21
sg9
L5L
sa(dp979
g1
I01
sg17
Nsg7
g96
sg9
L2L
sa(dp980
g1
I01
sg7
g23
sg9
L5L
sa(dp981
g1
I01
sg17
Nsg7
g99
sg9
L2L
sa(dp982
g1
I01
sg17
Vdefault object formatter
p983
sg7
g26
sg9
L2L
sa(dp984
g1
I01
sg7
g28
sg9
L5L
sa(dp985
g1
I01
sg7
g30
sg9
L5L
sa(dp986
g1
I01
sg7
g32
sg9
L5L
sa(dp987
g1
I01
sg7
g34
sg9
L5L
sa(dp988
g1
I01
sg7
g36
sg9
L5L
sa(dp989
g1
I01
sg7
g110
sg9
L5L
sa(dp990
g1
I01
sg7
g38
sg9
L5L
sa(dp991
g1
I01
sg7
g40
sg9
L5L
sa(dp992
g1
I01
sg7
g42
sg9
L5L
sa(dp993
g1
I01
sg17
VCreate and return a new object.  See help(type) for accurate signature.
p994
sg7
g45
sg9
L2L
sa(dp995
g1
I01
sg7
g117
sg9
L5L
sa(dp996
g1
I01
sg17
Vhelper for pickle
p997
sg7
g47
sg9
L2L
sa(dp998
g1
I01
sg17
Vhelper for pickle
p999
sg7
g50
sg9
L2L
sa(dp1000
g1
I01
sg7
g52
sg9
L5L
sa(dp1001
g1
I01
sg7
g54
sg9
L5L
sa(dp1002
g1
I01
sg17
V__sizeof__() -> int\u000asize of object in memory, in bytes
p1003
sg7
g59
sg9
L2L
sa(dp1004
g1
I01
sg7
g61
sg9
L5L
sa(dp1005
g1
I01
sg17
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p1006
sg7
g64
sg9
L2L
sa(dp1007
g1
I01
sg17
Nsg7
g130
sg9
L2L
sa(dp1008
g1
I01
sg17
Nsg7
g132
sg9
L2L
sa(dp1009
g1
I01
sg17
Nsg7
g134
sg9
L2L
sa(dp1010
g1
I01
sg17
Nsg7
g136
sg9
L2L
sa(dp1011
g1
I01
sg17
VFlush and close the IO object.\u000a\u000aThis method has no effect if the file is already closed.
p1012
sg7
g138
sg9
L2L
sa(dp1013
g1
I01
sg7
g140
sg9
L5L
sa(dp1014
g1
I01
sg17
VReturns underlying file descriptor if one exists.\u000a\u000aOSError is raised if the IO object does not use a file descriptor.
p1015
sg7
g146
sg9
L2L
sa(dp1016
g1
I01
sg17
VFlush write buffers, if applicable.\u000a\u000aThis is not implemented for read-only and non-blocking streams.
p1017
sg7
g148
sg9
L2L
sa(dp1018
g1
I01
sg17
VReturn whether this is an 'interactive' stream.\u000a\u000aReturn False if it can't be determined.
p1019
sg7
g150
sg9
L2L
sa(dp1020
g1
I01
sg17
Nsg7
g154
sg9
L2L
sa(dp1021
g1
I01
sg17
VReturn whether object was opened for reading.\u000a\u000aIf False, read() will raise OSError.
p1022
sg7
g158
sg9
L2L
sa(dp1023
g1
I01
sg17
VRead until EOF, using multiple read() call.
p1024
sg7
g557
sg9
L2L
sa(dp1025
g1
I01
sg17
Nsg7
g160
sg9
L2L
sa(dp1026
g1
I01
sg17
VRead and return a line from the stream.\u000a\u000aIf size is specified, at most size bytes will be read.\u000a\u000aThe line terminator is always b'\u005cn' for binary files; for text\u000afiles, the newlines argument to open can be used to select the line\u000aterminator(s) recognized.
p1027
sg7
g165
sg9
L2L
sa(dp1028
g1
I01
sg17
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p1029
sg7
g168
sg9
L2L
sa(dp1030
g1
I01
sg17
VChange stream position.\u000a\u000aChange the stream position to the given byte offset. The offset is\u000ainterpreted relative to the position indicated by whence.  Values\u000afor whence are:\u000a\u000a* 0 -- start of stream (the default); offset should be zero or positive\u000a* 1 -- current stream position; offset may be negative\u000a* 2 -- end of stream; offset is usually negative\u000a\u000aReturn the new absolute position.
p1031
sg7
g171
sg9
L2L
sa(dp1032
g1
I01
sg17
VReturn whether object supports random access.\u000a\u000aIf False, seek(), tell() and truncate() will raise OSError.\u000aThis method may need to do a test seek().
p1033
sg7
g174
sg9
L2L
sa(dp1034
g1
I01
sg17
VReturn current stream position.
p1035
sg7
g177
sg9
L2L
sa(dp1036
g1
I01
sg17
VTruncate file to size bytes.\u000a\u000aFile pointer is left unchanged.  Size defaults to the current IO\u000aposition as reported by tell().  Returns the new size.
p1037
sg7
g180
sg9
L2L
sa(dp1038
g1
I01
sg17
VReturn whether object was opened for writing.\u000a\u000aIf False, write() will raise OSError.
p1039
sg7
g182
sg9
L2L
sa(dp1040
g1
I01
sg17
Nsg7
g184
sg9
L2L
sa(dp1041
g1
I01
sg17
Nsg7
g186
sg9
L2L
sasg17
VBase class for raw binary I/O.
p1042
sg7
V_RawIOBase
p1043
sg9
L3L
sa(dp1044
g1
I01
sg2
(lp1045
(dp1046
g1
I01
sg7
g89
sg9
L5L
sa(dp1047
g1
I01
sg7
g13
sg9
L5L
sa(dp1048
g1
I01
sg7
g15
sg9
L5L
sa(dp1049
g1
I01
sg17
V__dir__() -> list\u000adefault dir() implementation
p1050
sg7
g19
sg9
L2L
sa(dp1051
g1
I01
sg7
g21
sg9
L5L
sa(dp1052
g1
I01
sg17
Nsg7
g96
sg9
L2L
sa(dp1053
g1
I01
sg7
g23
sg9
L5L
sa(dp1054
g1
I01
sg17
Nsg7
g99
sg9
L2L
sa(dp1055
g1
I01
sg17
Vdefault object formatter
p1056
sg7
g26
sg9
L2L
sa(dp1057
g1
I01
sg7
g28
sg9
L5L
sa(dp1058
g1
I01
sg7
g30
sg9
L5L
sa(dp1059
g1
I01
sg7
g32
sg9
L5L
sa(dp1060
g1
I01
sg7
g34
sg9
L5L
sa(dp1061
g1
I01
sg7
g36
sg9
L5L
sa(dp1062
g1
I01
sg7
g110
sg9
L5L
sa(dp1063
g1
I01
sg7
g38
sg9
L5L
sa(dp1064
g1
I01
sg7
g40
sg9
L5L
sa(dp1065
g1
I01
sg7
g42
sg9
L5L
sa(dp1066
g1
I01
sg17
VCreate and return a new object.  See help(type) for accurate signature.
p1067
sg7
g45
sg9
L2L
sa(dp1068
g1
I01
sg7
g117
sg9
L5L
sa(dp1069
g1
I01
sg17
Vhelper for pickle
p1070
sg7
g47
sg9
L2L
sa(dp1071
g1
I01
sg17
Vhelper for pickle
p1072
sg7
g50
sg9
L2L
sa(dp1073
g1
I01
sg7
g52
sg9
L5L
sa(dp1074
g1
I01
sg7
g54
sg9
L5L
sa(dp1075
g1
I01
sg17
V__sizeof__() -> int\u000asize of object in memory, in bytes
p1076
sg7
g59
sg9
L2L
sa(dp1077
g1
I01
sg7
g61
sg9
L5L
sa(dp1078
g1
I01
sg17
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p1079
sg7
g64
sg9
L2L
sa(dp1080
g1
I01
sg17
Nsg7
g130
sg9
L2L
sa(dp1081
g1
I01
sg17
Nsg7
g132
sg9
L2L
sa(dp1082
g1
I01
sg17
Nsg7
g134
sg9
L2L
sa(dp1083
g1
I01
sg17
Nsg7
g136
sg9
L2L
sa(dp1084
g1
I01
sg17
VFlush and close the IO object.\u000a\u000aThis method has no effect if the file is already closed.
p1085
sg7
g138
sg9
L2L
sa(dp1086
g1
I01
sg7
g140
sg9
L5L
sa(dp1087
g1
I01
sg17
VSeparate the underlying buffer from the TextIOBase and return it.\u000a\u000aAfter the underlying buffer has been detached, the TextIO is in an\u000aunusable state.\u000a
p1088
sg7
g143
sg9
L2L
sa(dp1089
g1
I01
sg7
g669
sg9
L5L
sa(dp1090
g1
I01
sg7
g671
sg9
L5L
sa(dp1091
g1
I01
sg17
VReturns underlying file descriptor if one exists.\u000a\u000aOSError is raised if the IO object does not use a file descriptor.
p1092
sg7
g146
sg9
L2L
sa(dp1093
g1
I01
sg17
VFlush write buffers, if applicable.\u000a\u000aThis is not implemented for read-only and non-blocking streams.
p1094
sg7
g148
sg9
L2L
sa(dp1095
g1
I01
sg17
VReturn whether this is an 'interactive' stream.\u000a\u000aReturn False if it can't be determined.
p1096
sg7
g150
sg9
L2L
sa(dp1097
g1
I01
sg7
g614
sg9
L5L
sa(dp1098
g1
I01
sg17
VRead at most n characters from stream.\u000a\u000aRead from underlying buffer until we have n characters or we hit EOF.\u000aIf n is negative or omitted, read until EOF.\u000a
p1099
sg7
g154
sg9
L2L
sa(dp1100
g1
I01
sg17
VReturn whether object was opened for reading.\u000a\u000aIf False, read() will raise OSError.
p1101
sg7
g158
sg9
L2L
sa(dp1102
g1
I01
sg17
VRead until newline or EOF.\u000a\u000aReturns an empty string if EOF is hit immediately.\u000a
p1103
sg7
g165
sg9
L2L
sa(dp1104
g1
I01
sg17
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p1105
sg7
g168
sg9
L2L
sa(dp1106
g1
I01
sg17
VChange stream position.\u000a\u000aChange the stream position to the given byte offset. The offset is\u000ainterpreted relative to the position indicated by whence.  Values\u000afor whence are:\u000a\u000a* 0 -- start of stream (the default); offset should be zero or positive\u000a* 1 -- current stream position; offset may be negative\u000a* 2 -- end of stream; offset is usually negative\u000a\u000aReturn the new absolute position.
p1107
sg7
g171
sg9
L2L
sa(dp1108
g1
I01
sg17
VReturn whether object supports random access.\u000a\u000aIf False, seek(), tell() and truncate() will raise OSError.\u000aThis method may need to do a test seek().
p1109
sg7
g174
sg9
L2L
sa(dp1110
g1
I01
sg17
VReturn current stream position.
p1111
sg7
g177
sg9
L2L
sa(dp1112
g1
I01
sg17
VTruncate file to size bytes.\u000a\u000aFile pointer is left unchanged.  Size defaults to the current IO\u000aposition as reported by tell().  Returns the new size.
p1113
sg7
g180
sg9
L2L
sa(dp1114
g1
I01
sg17
VReturn whether object was opened for writing.\u000a\u000aIf False, write() will raise OSError.
p1115
sg7
g182
sg9
L2L
sa(dp1116
g1
I01
sg17
VWrite string to stream.\u000aReturns the number of characters written (which is always equal to\u000athe length of the string).\u000a
p1117
sg7
g184
sg9
L2L
sa(dp1118
g1
I01
sg17
Nsg7
g186
sg9
L2L
sasg17
VBase class for text I/O.\u000a\u000aThis class provides a character and line based interface to stream\u000aI/O. There is no readinto method because Python's character strings\u000aare immutable. There is no public constructor.\u000a
p1119
sg7
V_TextIOBase
p1120
sg9
L3L
sa(dp1121
g1
I01
sg7
g21
sg9
L5L
sa(dp1122
g1
I01
sg2
(lp1123
(dp1124
g1
I01
sg7
g13
sg9
L5L
sa(dp1125
g1
I01
sg7
g15
sg9
L5L
sa(dp1126
g1
I01
sg17
V__dir__() -> list\u000adefault dir() implementation
p1127
sg7
g19
sg9
L2L
sa(dp1128
g1
I01
sg7
g21
sg9
L5L
sa(dp1129
g1
I01
sg7
g23
sg9
L5L
sa(dp1130
g1
I01
sg17
Vdefault object formatter
p1131
sg7
g26
sg9
L2L
sa(dp1132
g1
I01
sg7
g28
sg9
L5L
sa(dp1133
g1
I01
sg7
g30
sg9
L5L
sa(dp1134
g1
I01
sg7
g32
sg9
L5L
sa(dp1135
g1
I01
sg7
g34
sg9
L5L
sa(dp1136
g1
I01
sg7
g36
sg9
L5L
sa(dp1137
g1
I01
sg7
g38
sg9
L5L
sa(dp1138
g1
I01
sg7
g40
sg9
L5L
sa(dp1139
g1
I01
sg7
g797
sg9
L5L
sa(dp1140
g1
I01
sg7
g42
sg9
L5L
sa(dp1141
g1
I01
sg17
VCreate and return a new object.  See help(type) for accurate signature.
p1142
sg7
g45
sg9
L2L
sa(dp1143
g1
I01
sg17
Vhelper for pickle
p1144
sg7
g47
sg9
L2L
sa(dp1145
g1
I01
sg17
Vhelper for pickle
p1146
sg7
g50
sg9
L2L
sa(dp1147
g1
I01
sg7
g52
sg9
L5L
sa(dp1148
g1
I01
sg7
g54
sg9
L5L
sa(dp1149
g1
I01
sg17
V__sizeof__() -> int\u000asize of object in memory, in bytes
p1150
sg7
g59
sg9
L2L
sa(dp1151
g1
I01
sg7
g61
sg9
L5L
sa(dp1152
g1
I01
sg17
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p1153
sg7
g64
sg9
L2L
sa(dp1154
g1
I01
sg7
g815
sg9
L5L
sa(dp1155
g1
I01
sg7
Vcreate_module
p1156
sg9
L5L
sa(dp1157
g1
I01
sg7
Vexec_module
p1158
sg9
L5L
sa(dp1159
g1
I01
sg7
Vfind_module
p1160
sg9
L5L
sa(dp1161
g1
I01
sg7
Vfind_spec
p1162
sg9
L5L
sa(dp1163
g1
I01
sg7
Vget_code
p1164
sg9
L5L
sa(dp1165
g1
I01
sg7
Vget_source
p1166
sg9
L5L
sa(dp1167
g1
I01
sg7
Vis_package
p1168
sg9
L5L
sa(dp1169
g1
I01
sg7
Vload_module
p1170
sg9
L5L
sa(dp1171
g1
I01
sg7
Vmodule_repr
p1172
sg9
L5L
sasg17
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p1173
sg7
V__loader__
p1174
sg9
L3L
sa(dp1175
g1
I01
sg7
V__name__
p1176
sg9
L5L
sa(dp1177
g1
I01
sg7
V__package__
p1178
sg9
L5L
sa(dp1179
g1
I01
sg7
V__spec__
p1180
sg9
L5L
sa(dp1181
g1
I01
sg17
VOpen file and return a stream.  Raise IOError upon failure.\u000a\u000afile is either a text or byte string giving the name (and the path\u000aif the file isn't in the current working directory) of the file to\u000abe opened or an integer file descriptor of the file to be\u000awrapped. (If a file descriptor is given, it is closed when the\u000areturned I/O object is closed, unless closefd is set to False.)\u000a\u000amode is an optional string that specifies the mode in which the file\u000ais opened. It defaults to 'r' which means open for reading in text\u000amode.  Other common values are 'w' for writing (truncating the file if\u000ait already exists), 'x' for creating and writing to a new file, and\u000a'a' for appending (which on some Unix systems, means that all writes\u000aappend to the end of the file regardless of the current seek position).\u000aIn text mode, if encoding is not specified the encoding used is platform\u000adependent: locale.getpreferredencoding(False) is called to get the\u000acurrent locale encoding. (For reading and writing raw bytes use binary\u000amode and leave encoding unspecified.) The available modes are:\u000a\u000a========= ===============================================================\u000aCharacter Meaning\u000a--------- ---------------------------------------------------------------\u000a'r'       open for reading (default)\u000a'w'       open for writing, truncating the file first\u000a'x'       create a new file and open it for writing\u000a'a'       open for writing, appending to the end of the file if it exists\u000a'b'       binary mode\u000a't'       text mode (default)\u000a'+'       open a disk file for updating (reading and writing)\u000a'U'       universal newline mode (deprecated)\u000a========= ===============================================================\u000a\u000aThe default mode is 'rt' (open for reading text). For binary random\u000aaccess, the mode 'w+b' opens and truncates the file to 0 bytes, while\u000a'r+b' opens the file without truncation. The 'x' mode implies 'w' and\u000araises an `FileExistsError` if the file already exists.\u000a\u000aPython distinguishes between files opened in binary and text modes,\u000aeven when the underlying operating system doesn't. Files opened in\u000abinary mode (appending 'b' to the mode argument) return contents as\u000abytes objects without any decoding. In text mode (the default, or when\u000a't' is appended to the mode argument), the contents of the file are\u000areturned as strings, the bytes having been first decoded using a\u000aplatform-dependent encoding or using the specified encoding if given.\u000a\u000a'U' mode is deprecated and will raise an exception in future versions\u000aof Python.  It has no effect in Python 3.  Use newline to control\u000auniversal newlines mode.\u000a\u000abuffering is an optional integer used to set the buffering policy.\u000aPass 0 to switch buffering off (only allowed in binary mode), 1 to select\u000aline buffering (only usable in text mode), and an integer > 1 to indicate\u000athe size of a fixed-size chunk buffer.  When no buffering argument is\u000agiven, the default buffering policy works as follows:\u000a\u000a* Binary files are buffered in fixed-size chunks; the size of the buffer\u000a  is chosen using a heuristic trying to determine the underlying device's\u000a  "block size" and falling back on `io.DEFAULT_BUFFER_SIZE`.\u000a  On many systems, the buffer will typically be 4096 or 8192 bytes long.\u000a\u000a* "Interactive" text files (files for which isatty() returns True)\u000a  use line buffering.  Other text files use the policy described above\u000a  for binary files.\u000a\u000aencoding is the name of the encoding used to decode or encode the\u000afile. This should only be used in text mode. The default encoding is\u000aplatform dependent, but any encoding supported by Python can be\u000apassed.  See the codecs module for the list of supported encodings.\u000a\u000aerrors is an optional string that specifies how encoding errors are to\u000abe handled---this argument should not be used in binary mode. Pass\u000a'strict' to raise a ValueError exception if there is an encoding error\u000a(the default of None has the same effect), or pass 'ignore' to ignore\u000aerrors. (Note that ignoring encoding errors can lead to data loss.)\u000aSee the documentation for codecs.register or run 'help(codecs.Codec)'\u000afor a list of the permitted encoding error strings.\u000a\u000anewline controls how universal newlines works (it only applies to text\u000amode). It can be None, '', '\u005cn', '\u005cr', and '\u005cr\u005cn'.  It works as\u000afollows:\u000a\u000a* On input, if newline is None, universal newlines mode is\u000a  enabled. Lines in the input can end in '\u005cn', '\u005cr', or '\u005cr\u005cn', and\u000a  these are translated into '\u005cn' before being returned to the\u000a  caller. If it is '', universal newline mode is enabled, but line\u000a  endings are returned to the caller untranslated. If it has any of\u000a  the other legal values, input lines are only terminated by the given\u000a  string, and the line ending is returned to the caller untranslated.\u000a\u000a* On output, if newline is None, any '\u005cn' characters written are\u000a  translated to the system default line separator, os.linesep. If\u000a  newline is '' or '\u005cn', no translation takes place. If newline is any\u000a  of the other legal values, any '\u005cn' characters written are translated\u000a  to the given string.\u000a\u000aIf closefd is False, the underlying file descriptor will be kept open\u000awhen the file is closed. This does not work when a file name is given\u000aand must be True in that case.\u000a\u000aA custom opener can be used by passing a callable as *opener*. The\u000aunderlying file descriptor for the file object is then obtained by\u000acalling *opener* with (*file*, *flags*). *opener* must return an open\u000afile descriptor (passing os.open as *opener* results in functionality\u000asimilar to passing None).\u000a\u000aopen() returns a file object whose type depends on the mode, and\u000athrough which the standard file operations such as reading and writing\u000aare performed. When open() is used to open a file in a text mode ('w',\u000a'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open\u000aa file in a binary mode, the returned class varies: in read binary\u000amode, it returns a BufferedReader; in write binary and append binary\u000amodes, it returns a BufferedWriter, and in read/write mode, it returns\u000aa BufferedRandom.\u000a\u000aIt is also possible to use a string or bytearray as a file for both\u000areading and writing. For strings StringIO can be used like a file\u000aopened in a text mode, and for bytes a BytesIO can be used like a file\u000aopened in a binary mode.
p1182
sg7
Vopen
p1183
sg9
L2L
sasg17
VThe io module provides the Python interfaces to stream handling. The\u000abuiltin open function is defined in this module.\u000a\u000aAt the top of the I/O hierarchy is the abstract base class IOBase. It\u000adefines the basic interface to a stream. Note, however, that there is no\u000aseparation between reading and writing to streams; implementations are\u000aallowed to raise an IOError if they do not support a given operation.\u000a\u000aExtending IOBase is RawIOBase which deals simply with the reading and\u000awriting of raw bytes to a stream. FileIO subclasses RawIOBase to provide\u000aan interface to OS files.\u000a\u000aBufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its\u000asubclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer\u000astreams that are readable, writable, and both respectively.\u000aBufferedRandom provides a buffered interface to random access\u000astreams. BytesIO is a simple stream of in-memory bytes.\u000a\u000aAnother IOBase subclass, TextIOBase, deals with the encoding and decoding\u000aof streams into text. TextIOWrapper, which extends it, is a buffered text\u000ainterface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO\u000ais an in-memory stream for text.\u000a\u000aArgument names are not part of the specification, and only the arguments\u000aof open() are intended to be used as keyword arguments.\u000a\u000adata:\u000a\u000aDEFAULT_BUFFER_SIZE\u000a\u000a   An int containing the default buffer size used by the module's buffered\u000a   I/O classes. open() uses the file's blksize (as obtained by os.stat) if\u000a   possible.\u000a
p1184
sg7
V_io
p1185
sg9
L1L
s.