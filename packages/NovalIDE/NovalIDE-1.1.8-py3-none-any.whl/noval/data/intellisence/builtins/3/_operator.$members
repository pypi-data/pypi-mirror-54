(dp0
Vis_builtin
p1
I01
sVchilds
p2
(lp3
(dp4
g1
I01
sVname
p5
V__doc__
p6
sVtype
p7
L5L
sa(dp8
g1
I01
sg2
(lp9
(dp10
g1
I01
sg5
V__delattr__
p11
sg7
L5L
sa(dp12
g1
I01
sg5
V__dict__
p13
sg7
L5L
sa(dp14
g1
I01
sVdoc
p15
V__dir__() -> list\u000adefault dir() implementation
p16
sg5
V__dir__
p17
sg7
L2L
sa(dp18
g1
I01
sg5
g6
sg7
L5L
sa(dp19
g1
I01
sg5
V__eq__
p20
sg7
L5L
sa(dp21
g1
I01
sg15
Vdefault object formatter
p22
sg5
V__format__
p23
sg7
L2L
sa(dp24
g1
I01
sg5
V__ge__
p25
sg7
L5L
sa(dp26
g1
I01
sg5
V__getattribute__
p27
sg7
L5L
sa(dp28
g1
I01
sg5
V__gt__
p29
sg7
L5L
sa(dp30
g1
I01
sg5
V__hash__
p31
sg7
L5L
sa(dp32
g1
I01
sg5
V__init__
p33
sg7
L5L
sa(dp34
g1
I01
sg5
V__le__
p35
sg7
L5L
sa(dp36
g1
I01
sg5
V__lt__
p37
sg7
L5L
sa(dp38
g1
I01
sg5
V__module__
p39
sg7
L5L
sa(dp40
g1
I01
sg5
V__ne__
p41
sg7
L5L
sa(dp42
g1
I01
sg15
VCreate and return a new object.  See help(type) for accurate signature.
p43
sg5
V__new__
p44
sg7
L2L
sa(dp45
g1
I01
sg15
Vhelper for pickle
p46
sg5
V__reduce__
p47
sg7
L2L
sa(dp48
g1
I01
sg15
Vhelper for pickle
p49
sg5
V__reduce_ex__
p50
sg7
L2L
sa(dp51
g1
I01
sg5
V__repr__
p52
sg7
L5L
sa(dp53
g1
I01
sg5
V__setattr__
p54
sg7
L5L
sa(dp55
g1
I01
sg15
V__sizeof__() -> int\u000asize of object in memory, in bytes
p56
sg5
V__sizeof__
p57
sg7
L2L
sa(dp58
g1
I01
sg5
V__str__
p59
sg7
L5L
sa(dp60
g1
I01
sg15
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p61
sg5
V__subclasshook__
p62
sg7
L2L
sa(dp63
g1
I01
sg5
V__weakref__
p64
sg7
L5L
sa(dp65
g1
I01
sg5
Vcreate_module
p66
sg7
L5L
sa(dp67
g1
I01
sg5
Vexec_module
p68
sg7
L5L
sa(dp69
g1
I01
sg5
Vfind_module
p70
sg7
L5L
sa(dp71
g1
I01
sg5
Vfind_spec
p72
sg7
L5L
sa(dp73
g1
I01
sg5
Vget_code
p74
sg7
L5L
sa(dp75
g1
I01
sg5
Vget_source
p76
sg7
L5L
sa(dp77
g1
I01
sg5
Vis_package
p78
sg7
L5L
sa(dp79
g1
I01
sg5
Vload_module
p80
sg7
L5L
sa(dp81
g1
I01
sg5
Vmodule_repr
p82
sg7
L5L
sasg15
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p83
sg5
V__loader__
p84
sg7
L3L
sa(dp85
g1
I01
sg5
V__name__
p86
sg7
L5L
sa(dp87
g1
I01
sg5
V__package__
p88
sg7
L5L
sa(dp89
g1
I01
sg5
V__spec__
p90
sg7
L5L
sa(dp91
g1
I01
sg15
Vcompare_digest(a, b) -> bool\u000a\u000aReturn 'a == b'.  This function uses an approach designed to prevent\u000atiming analysis, making it appropriate for cryptography.\u000aa and b must both be of the same type: either str (ASCII only),\u000aor any bytes-like object.\u000a\u000aNote: If a and b are of different lengths, or if an error occurs,\u000aa timing attack could theoretically reveal information about the\u000atypes and lengths of a and b--but not their values.\u000a
p92
sg5
V_compare_digest
p93
sg7
L2L
sa(dp94
g1
I01
sg15
Vabs(a) -- Same as abs(a).
p95
sg5
Vabs
p96
sg7
L2L
sa(dp97
g1
I01
sg15
Vadd(a, b) -- Same as a + b.
p98
sg5
Vadd
p99
sg7
L2L
sa(dp100
g1
I01
sg15
Vand_(a, b) -- Same as a & b.
p101
sg5
Vand_
p102
sg7
L2L
sa(dp103
g1
I01
sg2
(lp104
(dp105
g1
I01
sg5
V__call__
p106
sg7
L5L
sa(dp107
g1
I01
sg5
g11
sg7
L5L
sa(dp108
g1
I01
sg15
V__dir__() -> list\u000adefault dir() implementation
p109
sg5
g17
sg7
L2L
sa(dp110
g1
I01
sg5
g6
sg7
L5L
sa(dp111
g1
I01
sg5
g20
sg7
L5L
sa(dp112
g1
I01
sg15
Vdefault object formatter
p113
sg5
g23
sg7
L2L
sa(dp114
g1
I01
sg5
g25
sg7
L5L
sa(dp115
g1
I01
sg5
g27
sg7
L5L
sa(dp116
g1
I01
sg5
g29
sg7
L5L
sa(dp117
g1
I01
sg5
g31
sg7
L5L
sa(dp118
g1
I01
sg5
g33
sg7
L5L
sa(dp119
g1
I01
sg5
g35
sg7
L5L
sa(dp120
g1
I01
sg5
g37
sg7
L5L
sa(dp121
g1
I01
sg5
g41
sg7
L5L
sa(dp122
g1
I01
sg15
VCreate and return a new object.  See help(type) for accurate signature.
p123
sg5
g44
sg7
L2L
sa(dp124
g1
I01
sg15
VReturn state information for pickling
p125
sg5
g47
sg7
L2L
sa(dp126
g1
I01
sg15
Vhelper for pickle
p127
sg5
g50
sg7
L2L
sa(dp128
g1
I01
sg5
g52
sg7
L5L
sa(dp129
g1
I01
sg5
g54
sg7
L5L
sa(dp130
g1
I01
sg15
V__sizeof__() -> int\u000asize of object in memory, in bytes
p131
sg5
g57
sg7
L2L
sa(dp132
g1
I01
sg5
g59
sg7
L5L
sa(dp133
g1
I01
sg15
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p134
sg5
g62
sg7
L2L
sasg15
Vattrgetter(attr, ...) --> attrgetter object\u000a\u000aReturn a callable object that fetches the given attribute(s) from its operand.\u000aAfter f = attrgetter('name'), the call f(r) returns r.name.\u000aAfter g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).\u000aAfter h = attrgetter('name.first', 'name.last'), the call h(r) returns\u000a(r.name.first, r.name.last).
p135
sg5
Vattrgetter
p136
sg7
L3L
sa(dp137
g1
I01
sg15
Vconcat(a, b) -- Same as a + b, for a and b sequences.
p138
sg5
Vconcat
p139
sg7
L2L
sa(dp140
g1
I01
sg15
Vcontains(a, b) -- Same as b in a (note reversed operands).
p141
sg5
Vcontains
p142
sg7
L2L
sa(dp143
g1
I01
sg15
VcountOf(a, b) -- Return the number of times b occurs in a.
p144
sg5
VcountOf
p145
sg7
L2L
sa(dp146
g1
I01
sg15
Vdelitem(a, b) -- Same as del a[b].
p147
sg5
Vdelitem
p148
sg7
L2L
sa(dp149
g1
I01
sg15
Veq(a, b) -- Same as a==b.
p150
sg5
Veq
p151
sg7
L2L
sa(dp152
g1
I01
sg15
Vfloordiv(a, b) -- Same as a // b.
p153
sg5
Vfloordiv
p154
sg7
L2L
sa(dp155
g1
I01
sg15
Vge(a, b) -- Same as a>=b.
p156
sg5
Vge
p157
sg7
L2L
sa(dp158
g1
I01
sg15
Vgetitem(a, b) -- Same as a[b].
p159
sg5
Vgetitem
p160
sg7
L2L
sa(dp161
g1
I01
sg15
Vgt(a, b) -- Same as a>b.
p162
sg5
Vgt
p163
sg7
L2L
sa(dp164
g1
I01
sg15
Va = iadd(a, b) -- Same as a += b.
p165
sg5
Viadd
p166
sg7
L2L
sa(dp167
g1
I01
sg15
Va = iand(a, b) -- Same as a &= b.
p168
sg5
Viand
p169
sg7
L2L
sa(dp170
g1
I01
sg15
Va = iconcat(a, b) -- Same as a += b, for a and b sequences.
p171
sg5
Viconcat
p172
sg7
L2L
sa(dp173
g1
I01
sg15
Va = ifloordiv(a, b) -- Same as a //= b.
p174
sg5
Vifloordiv
p175
sg7
L2L
sa(dp176
g1
I01
sg15
Va = ilshift(a, b) -- Same as a <<= b.
p177
sg5
Vilshift
p178
sg7
L2L
sa(dp179
g1
I01
sg15
Va = imatmul(a, b) -- Same as a @= b.
p180
sg5
Vimatmul
p181
sg7
L2L
sa(dp182
g1
I01
sg15
Va = imod(a, b) -- Same as a %= b.
p183
sg5
Vimod
p184
sg7
L2L
sa(dp185
g1
I01
sg15
Va = imul(a, b) -- Same as a *= b.
p186
sg5
Vimul
p187
sg7
L2L
sa(dp188
g1
I01
sg15
Vindex(a) -- Same as a.__index__()
p189
sg5
Vindex
p190
sg7
L2L
sa(dp191
g1
I01
sg15
VindexOf(a, b) -- Return the first index of b in a.
p192
sg5
VindexOf
p193
sg7
L2L
sa(dp194
g1
I01
sg15
Vinv(a) -- Same as ~a.
p195
sg5
Vinv
p196
sg7
L2L
sa(dp197
g1
I01
sg15
Vinvert(a) -- Same as ~a.
p198
sg5
Vinvert
p199
sg7
L2L
sa(dp200
g1
I01
sg15
Va = ior(a, b) -- Same as a |= b.
p201
sg5
Vior
p202
sg7
L2L
sa(dp203
g1
I01
sg15
Va = ipow(a, b) -- Same as a **= b.
p204
sg5
Vipow
p205
sg7
L2L
sa(dp206
g1
I01
sg15
Va = irshift(a, b) -- Same as a >>= b.
p207
sg5
Virshift
p208
sg7
L2L
sa(dp209
g1
I01
sg15
Vis_(a, b) -- Same as a is b.
p210
sg5
Vis_
p211
sg7
L2L
sa(dp212
g1
I01
sg15
Vis_not(a, b) -- Same as a is not b.
p213
sg5
Vis_not
p214
sg7
L2L
sa(dp215
g1
I01
sg15
Va = isub(a, b) -- Same as a -= b.
p216
sg5
Visub
p217
sg7
L2L
sa(dp218
g1
I01
sg2
(lp219
(dp220
g1
I01
sg5
g106
sg7
L5L
sa(dp221
g1
I01
sg5
g11
sg7
L5L
sa(dp222
g1
I01
sg15
V__dir__() -> list\u000adefault dir() implementation
p223
sg5
g17
sg7
L2L
sa(dp224
g1
I01
sg5
g6
sg7
L5L
sa(dp225
g1
I01
sg5
g20
sg7
L5L
sa(dp226
g1
I01
sg15
Vdefault object formatter
p227
sg5
g23
sg7
L2L
sa(dp228
g1
I01
sg5
g25
sg7
L5L
sa(dp229
g1
I01
sg5
g27
sg7
L5L
sa(dp230
g1
I01
sg5
g29
sg7
L5L
sa(dp231
g1
I01
sg5
g31
sg7
L5L
sa(dp232
g1
I01
sg5
g33
sg7
L5L
sa(dp233
g1
I01
sg5
g35
sg7
L5L
sa(dp234
g1
I01
sg5
g37
sg7
L5L
sa(dp235
g1
I01
sg5
g41
sg7
L5L
sa(dp236
g1
I01
sg15
VCreate and return a new object.  See help(type) for accurate signature.
p237
sg5
g44
sg7
L2L
sa(dp238
g1
I01
sg15
VReturn state information for pickling
p239
sg5
g47
sg7
L2L
sa(dp240
g1
I01
sg15
Vhelper for pickle
p241
sg5
g50
sg7
L2L
sa(dp242
g1
I01
sg5
g52
sg7
L5L
sa(dp243
g1
I01
sg5
g54
sg7
L5L
sa(dp244
g1
I01
sg15
V__sizeof__() -> int\u000asize of object in memory, in bytes
p245
sg5
g57
sg7
L2L
sa(dp246
g1
I01
sg5
g59
sg7
L5L
sa(dp247
g1
I01
sg15
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p248
sg5
g62
sg7
L2L
sasg15
Vitemgetter(item, ...) --> itemgetter object\u000a\u000aReturn a callable object that fetches the given item(s) from its operand.\u000aAfter f = itemgetter(2), the call f(r) returns r[2].\u000aAfter g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])
p249
sg5
Vitemgetter
p250
sg7
L3L
sa(dp251
g1
I01
sg15
Va = itruediv(a, b) -- Same as a /= b
p252
sg5
Vitruediv
p253
sg7
L2L
sa(dp254
g1
I01
sg15
Va = ixor(a, b) -- Same as a ^= b.
p255
sg5
Vixor
p256
sg7
L2L
sa(dp257
g1
I01
sg15
Vle(a, b) -- Same as a<=b.
p258
sg5
Vle
p259
sg7
L2L
sa(dp260
g1
I01
sg15
Vlength_hint(obj, default=0) -> int\u000aReturn an estimate of the number of items in obj.\u000aThis is useful for presizing containers when building from an\u000aiterable.\u000a\u000aIf the object supports len(), the result will be\u000aexact. Otherwise, it may over- or under-estimate by an\u000aarbitrary amount. The result will be an integer >= 0.
p261
sg5
Vlength_hint
p262
sg7
L2L
sa(dp263
g1
I01
sg15
Vlshift(a, b) -- Same as a << b.
p264
sg5
Vlshift
p265
sg7
L2L
sa(dp266
g1
I01
sg15
Vlt(a, b) -- Same as a<b.
p267
sg5
Vlt
p268
sg7
L2L
sa(dp269
g1
I01
sg15
Vmatmul(a, b) -- Same as a @ b.
p270
sg5
Vmatmul
p271
sg7
L2L
sa(dp272
g1
I01
sg2
(lp273
(dp274
g1
I01
sg5
g106
sg7
L5L
sa(dp275
g1
I01
sg5
g11
sg7
L5L
sa(dp276
g1
I01
sg15
V__dir__() -> list\u000adefault dir() implementation
p277
sg5
g17
sg7
L2L
sa(dp278
g1
I01
sg5
g6
sg7
L5L
sa(dp279
g1
I01
sg5
g20
sg7
L5L
sa(dp280
g1
I01
sg15
Vdefault object formatter
p281
sg5
g23
sg7
L2L
sa(dp282
g1
I01
sg5
g25
sg7
L5L
sa(dp283
g1
I01
sg5
g27
sg7
L5L
sa(dp284
g1
I01
sg5
g29
sg7
L5L
sa(dp285
g1
I01
sg5
g31
sg7
L5L
sa(dp286
g1
I01
sg5
g33
sg7
L5L
sa(dp287
g1
I01
sg5
g35
sg7
L5L
sa(dp288
g1
I01
sg5
g37
sg7
L5L
sa(dp289
g1
I01
sg5
g41
sg7
L5L
sa(dp290
g1
I01
sg15
VCreate and return a new object.  See help(type) for accurate signature.
p291
sg5
g44
sg7
L2L
sa(dp292
g1
I01
sg15
VReturn state information for pickling
p293
sg5
g47
sg7
L2L
sa(dp294
g1
I01
sg15
Vhelper for pickle
p295
sg5
g50
sg7
L2L
sa(dp296
g1
I01
sg5
g52
sg7
L5L
sa(dp297
g1
I01
sg5
g54
sg7
L5L
sa(dp298
g1
I01
sg15
V__sizeof__() -> int\u000asize of object in memory, in bytes
p299
sg5
g57
sg7
L2L
sa(dp300
g1
I01
sg5
g59
sg7
L5L
sa(dp301
g1
I01
sg15
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p302
sg5
g62
sg7
L2L
sasg15
Vmethodcaller(name, ...) --> methodcaller object\u000a\u000aReturn a callable object that calls the given method on its operand.\u000aAfter f = methodcaller('name'), the call f(r) returns r.name().\u000aAfter g = methodcaller('name', 'date', foo=1), the call g(r) returns\u000ar.name('date', foo=1).
p303
sg5
Vmethodcaller
p304
sg7
L3L
sa(dp305
g1
I01
sg15
Vmod(a, b) -- Same as a % b.
p306
sg5
Vmod
p307
sg7
L2L
sa(dp308
g1
I01
sg15
Vmul(a, b) -- Same as a * b.
p309
sg5
Vmul
p310
sg7
L2L
sa(dp311
g1
I01
sg15
Vne(a, b) -- Same as a!=b.
p312
sg5
Vne
p313
sg7
L2L
sa(dp314
g1
I01
sg15
Vneg(a) -- Same as -a.
p315
sg5
Vneg
p316
sg7
L2L
sa(dp317
g1
I01
sg15
Vnot_(a) -- Same as not a.
p318
sg5
Vnot_
p319
sg7
L2L
sa(dp320
g1
I01
sg15
Vor_(a, b) -- Same as a | b.
p321
sg5
Vor_
p322
sg7
L2L
sa(dp323
g1
I01
sg15
Vpos(a) -- Same as +a.
p324
sg5
Vpos
p325
sg7
L2L
sa(dp326
g1
I01
sg15
Vpow(a, b) -- Same as a ** b.
p327
sg5
Vpow
p328
sg7
L2L
sa(dp329
g1
I01
sg15
Vrshift(a, b) -- Same as a >> b.
p330
sg5
Vrshift
p331
sg7
L2L
sa(dp332
g1
I01
sg15
Vsetitem(a, b, c) -- Same as a[b] = c.
p333
sg5
Vsetitem
p334
sg7
L2L
sa(dp335
g1
I01
sg15
Vsub(a, b) -- Same as a - b.
p336
sg5
Vsub
p337
sg7
L2L
sa(dp338
g1
I01
sg15
Vtruediv(a, b) -- Same as a / b.
p339
sg5
Vtruediv
p340
sg7
L2L
sa(dp341
g1
I01
sg15
Vtruth(a) -- Return True if a is true, False otherwise.
p342
sg5
Vtruth
p343
sg7
L2L
sa(dp344
g1
I01
sg15
Vxor(a, b) -- Same as a ^ b.
p345
sg5
Vxor
p346
sg7
L2L
sasg15
VOperator interface.\u000a\u000aThis module exports a set of functions implemented in C corresponding\u000ato the intrinsic operators of Python.  For example, operator.add(x, y)\u000ais equivalent to the expression x+y.  The function names are those\u000aused for special methods; variants without leading and trailing\u000a'__' are also provided for convenience.
p347
sg5
V_operator
p348
sg7
L1L
s.