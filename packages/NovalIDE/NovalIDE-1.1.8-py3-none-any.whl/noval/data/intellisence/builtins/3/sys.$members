(dp0
Vis_builtin
p1
I01
sVchilds
p2
(lp3
(dp4
g1
I01
sVdoc
p5
Vdisplayhook(object) -> None\u000a\u000aPrint an object to sys.stdout and also save it in builtins._\u000a
p6
sVname
p7
V__displayhook__
p8
sVtype
p9
L2L
sa(dp10
g1
I01
sg7
V__doc__
p11
sg9
L5L
sa(dp12
g1
I01
sg5
Vexcepthook(exctype, value, traceback) -> None\u000a\u000aHandle an exception by displaying it with a traceback on sys.stderr.\u000a
p13
sg7
V__excepthook__
p14
sg9
L2L
sa(dp15
g1
I01
sg7
V__interactivehook__
p16
sg9
L5L
sa(dp17
g1
I01
sg2
(lp18
(dp19
g1
I01
sg7
V__delattr__
p20
sg9
L5L
sa(dp21
g1
I01
sg7
V__dict__
p22
sg9
L5L
sa(dp23
g1
I01
sg5
V__dir__() -> list\u000adefault dir() implementation
p24
sg7
V__dir__
p25
sg9
L2L
sa(dp26
g1
I01
sg7
g11
sg9
L5L
sa(dp27
g1
I01
sg7
V__eq__
p28
sg9
L5L
sa(dp29
g1
I01
sg5
Vdefault object formatter
p30
sg7
V__format__
p31
sg9
L2L
sa(dp32
g1
I01
sg7
V__ge__
p33
sg9
L5L
sa(dp34
g1
I01
sg7
V__getattribute__
p35
sg9
L5L
sa(dp36
g1
I01
sg7
V__gt__
p37
sg9
L5L
sa(dp38
g1
I01
sg7
V__hash__
p39
sg9
L5L
sa(dp40
g1
I01
sg7
V__init__
p41
sg9
L5L
sa(dp42
g1
I01
sg7
V__le__
p43
sg9
L5L
sa(dp44
g1
I01
sg7
V__lt__
p45
sg9
L5L
sa(dp46
g1
I01
sg7
V__module__
p47
sg9
L5L
sa(dp48
g1
I01
sg7
V__ne__
p49
sg9
L5L
sa(dp50
g1
I01
sg5
VCreate and return a new object.  See help(type) for accurate signature.
p51
sg7
V__new__
p52
sg9
L2L
sa(dp53
g1
I01
sg5
Vhelper for pickle
p54
sg7
V__reduce__
p55
sg9
L2L
sa(dp56
g1
I01
sg5
Vhelper for pickle
p57
sg7
V__reduce_ex__
p58
sg9
L2L
sa(dp59
g1
I01
sg7
V__repr__
p60
sg9
L5L
sa(dp61
g1
I01
sg7
V__setattr__
p62
sg9
L5L
sa(dp63
g1
I01
sg5
V__sizeof__() -> int\u000asize of object in memory, in bytes
p64
sg7
V__sizeof__
p65
sg9
L2L
sa(dp66
g1
I01
sg7
V__str__
p67
sg9
L5L
sa(dp68
g1
I01
sg5
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p69
sg7
V__subclasshook__
p70
sg9
L2L
sa(dp71
g1
I01
sg7
V__weakref__
p72
sg9
L5L
sa(dp73
g1
I01
sg7
Vcreate_module
p74
sg9
L5L
sa(dp75
g1
I01
sg7
Vexec_module
p76
sg9
L5L
sa(dp77
g1
I01
sg7
Vfind_module
p78
sg9
L5L
sa(dp79
g1
I01
sg7
Vfind_spec
p80
sg9
L5L
sa(dp81
g1
I01
sg7
Vget_code
p82
sg9
L5L
sa(dp83
g1
I01
sg7
Vget_source
p84
sg9
L5L
sa(dp85
g1
I01
sg7
Vis_package
p86
sg9
L5L
sa(dp87
g1
I01
sg7
Vload_module
p88
sg9
L5L
sa(dp89
g1
I01
sg7
Vmodule_repr
p90
sg9
L5L
sasg5
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p91
sg7
V__loader__
p92
sg9
L3L
sa(dp93
g1
I01
sg7
V__name__
p94
sg9
L5L
sa(dp95
g1
I01
sg7
V__package__
p96
sg9
L5L
sa(dp97
g1
I01
sg7
V__spec__
p98
sg9
L5L
sa(dp99
g1
I01
sg7
V__stderr__
p100
sg9
L5L
sa(dp101
g1
I01
sg7
V__stdin__
p102
sg9
L5L
sa(dp103
g1
I01
sg7
V__stdout__
p104
sg9
L5L
sa(dp105
g1
I01
sg5
V_clear_type_cache() -> None\u000aClear the internal type lookup cache.
p106
sg7
V_clear_type_cache
p107
sg9
L2L
sa(dp108
g1
I01
sg5
V_current_frames() -> dictionary\u000a\u000aReturn a dictionary mapping each current thread T's thread id to T's\u000acurrent stack frame.\u000a\u000aThis function should be used for specialized purposes only.
p109
sg7
V_current_frames
p110
sg9
L2L
sa(dp111
g1
I01
sg5
V_debugmallocstats()\u000a\u000aPrint summary info to stderr about the state of\u000apymalloc's structures.\u000a\u000aIn Py_DEBUG mode, also perform some expensive internal consistency\u000achecks.\u000a
p112
sg7
V_debugmallocstats
p113
sg9
L2L
sa(dp114
g1
I01
sg5
V_getframe([depth]) -> frameobject\u000a\u000aReturn a frame object from the call stack.  If optional integer depth is\u000agiven, return the frame object that many calls below the top of the stack.\u000aIf that is deeper than the call stack, ValueError is raised.  The default\u000afor depth is zero, returning the frame at the top of the call stack.\u000a\u000aThis function should be used for internal and specialized\u000apurposes only.
p115
sg7
V_getframe
p116
sg9
L2L
sa(dp117
g1
I01
sg7
V_home
p118
sg9
L5L
sa(dp119
g1
I01
sg7
V_mercurial
p120
sg9
L5L
sa(dp121
g1
I01
sg7
V_xoptions
p122
sg9
L5L
sa(dp123
g1
I01
sg7
Vabiflags
p124
sg9
L5L
sa(dp125
g1
I01
sg7
Vapi_version
p126
sg9
L5L
sa(dp127
g1
I01
sg7
Vargv
p128
sg9
L5L
sa(dp129
g1
I01
sg7
Vbase_exec_prefix
p130
sg9
L5L
sa(dp131
g1
I01
sg7
Vbase_prefix
p132
sg9
L5L
sa(dp133
g1
I01
sg7
Vbuiltin_module_names
p134
sg9
L5L
sa(dp135
g1
I01
sg7
Vbyteorder
p136
sg9
L5L
sa(dp137
g1
I01
sg5
Vcall_tracing(func, args) -> object\u000a\u000aCall func(*args), while tracing is enabled.  The tracing state is\u000asaved, and restored afterwards.  This is intended to be called from\u000aa debugger from a checkpoint, to recursively debug some other code.
p138
sg7
Vcall_tracing
p139
sg9
L2L
sa(dp140
g1
I01
sg5
Vcallstats() -> tuple of integers\u000a\u000aReturn a tuple of function call statistics, if CALL_PROFILE was defined\u000awhen Python was built.  Otherwise, return None.\u000a\u000aWhen enabled, this function returns detailed, implementation-specific\u000adetails about the number of function calls executed. The return value is\u000aa 11-tuple where the entries in the tuple are counts of:\u000a0. all function calls\u000a1. calls to PyFunction_Type objects\u000a2. PyFunction calls that do not create an argument tuple\u000a3. PyFunction calls that do not create an argument tuple\u000a   and bypass PyEval_EvalCodeEx()\u000a4. PyMethod calls\u000a5. PyMethod calls on bound methods\u000a6. PyType calls\u000a7. PyCFunction calls\u000a8. generator calls\u000a9. All other calls\u000a10. Number of stack pops performed by call_function()
p141
sg7
Vcallstats
p142
sg9
L2L
sa(dp143
g1
I01
sg7
Vcopyright
p144
sg9
L5L
sa(dp145
g1
I01
sg5
Vdisplayhook(object) -> None\u000a\u000aPrint an object to sys.stdout and also save it in builtins._\u000a
p146
sg7
Vdisplayhook
p147
sg9
L2L
sa(dp148
g1
I01
sg7
Vdont_write_bytecode
p149
sg9
L5L
sa(dp150
g1
I01
sg5
Vexc_info() -> (type, value, traceback)\u000a\u000aReturn information about the most recent exception caught by an except\u000aclause in the current stack frame or in an older stack frame.
p151
sg7
Vexc_info
p152
sg9
L2L
sa(dp153
g1
I01
sg7
Vexcepthook
p154
sg9
L5L
sa(dp155
g1
I01
sg7
Vexec_prefix
p156
sg9
L5L
sa(dp157
g1
I01
sg7
Vexecutable
p158
sg9
L5L
sa(dp159
g1
I01
sg5
Vexit([status])\u000a\u000aExit the interpreter by raising SystemExit(status).\u000aIf the status is omitted or None, it defaults to zero (i.e., success).\u000aIf the status is an integer, it will be used as the system exit status.\u000aIf it is another kind of object, it will be printed and the system\u000aexit status will be one (i.e., failure).
p160
sg7
Vexit
p161
sg9
L2L
sa(dp162
g1
I01
sg7
Vflags
p163
sg9
L5L
sa(dp164
g1
I01
sg7
Vfloat_info
p165
sg9
L5L
sa(dp166
g1
I01
sg7
Vfloat_repr_style
p167
sg9
L5L
sa(dp168
g1
I01
sg5
Vget_coroutine_wrapper()\u000a\u000aReturn the wrapper for coroutine objects set by sys.set_coroutine_wrapper.
p169
sg7
Vget_coroutine_wrapper
p170
sg9
L2L
sa(dp171
g1
I01
sg5
Vgetallocatedblocks() -> integer\u000a\u000aReturn the number of memory blocks currently allocated, regardless of their\u000asize.
p172
sg7
Vgetallocatedblocks
p173
sg9
L2L
sa(dp174
g1
I01
sg5
Vgetcheckinterval() -> current check interval; see setcheckinterval().
p175
sg7
Vgetcheckinterval
p176
sg9
L2L
sa(dp177
g1
I01
sg5
Vgetdefaultencoding() -> string\u000a\u000aReturn the current default string encoding used by the Unicode \u000aimplementation.
p178
sg7
Vgetdefaultencoding
p179
sg9
L2L
sa(dp180
g1
I01
sg5
Vgetdlopenflags() -> int\u000a\u000aReturn the current value of the flags that are used for dlopen calls.\u000aThe flag constants are defined in the os module.
p181
sg7
Vgetdlopenflags
p182
sg9
L2L
sa(dp183
g1
I01
sg5
Vgetfilesystemencoding() -> string\u000a\u000aReturn the encoding used to convert Unicode filenames in\u000aoperating system filenames.
p184
sg7
Vgetfilesystemencoding
p185
sg9
L2L
sa(dp186
g1
I01
sg5
Vgetprofile()\u000a\u000aReturn the profiling function set with sys.setprofile.\u000aSee the profiler chapter in the library manual.
p187
sg7
Vgetprofile
p188
sg9
L2L
sa(dp189
g1
I01
sg5
Vgetrecursionlimit()\u000a\u000aReturn the current value of the recursion limit, the maximum depth\u000aof the Python interpreter stack.  This limit prevents infinite\u000arecursion from causing an overflow of the C stack and crashing Python.
p190
sg7
Vgetrecursionlimit
p191
sg9
L2L
sa(dp192
g1
I01
sg5
Vgetrefcount(object) -> integer\u000a\u000aReturn the reference count of object.  The count returned is generally\u000aone higher than you might expect, because it includes the (temporary)\u000areference as an argument to getrefcount().
p193
sg7
Vgetrefcount
p194
sg9
L2L
sa(dp195
g1
I01
sg5
Vgetsizeof(object, default) -> int\u000a\u000aReturn the size of object in bytes.
p196
sg7
Vgetsizeof
p197
sg9
L2L
sa(dp198
g1
I01
sg5
Vgetswitchinterval() -> current thread switch interval; see setswitchinterval().
p199
sg7
Vgetswitchinterval
p200
sg9
L2L
sa(dp201
g1
I01
sg5
Vgettrace()\u000a\u000aReturn the global debug tracing function set with sys.settrace.\u000aSee the debugger chapter in the library manual.
p202
sg7
Vgettrace
p203
sg9
L2L
sa(dp204
g1
I01
sg7
Vhash_info
p205
sg9
L5L
sa(dp206
g1
I01
sg7
Vhexversion
p207
sg9
L5L
sa(dp208
g1
I01
sg7
Vimplementation
p209
sg9
L5L
sa(dp210
g1
I01
sg7
Vint_info
p211
sg9
L5L
sa(dp212
g1
I01
sg5
Vintern(string) -> string\u000a\u000a``Intern'' the given string.  This enters the string in the (global)\u000atable of interned strings whose purpose is to speed up dictionary lookups.\u000aReturn the string itself or the previously interned string object with the\u000asame value.
p213
sg7
Vintern
p214
sg9
L2L
sa(dp215
g1
I01
sg5
Vis_finalizing()\u000aReturn True if Python is exiting.
p216
sg7
Vis_finalizing
p217
sg9
L2L
sa(dp218
g1
I01
sg7
Vmaxsize
p219
sg9
L5L
sa(dp220
g1
I01
sg7
Vmaxunicode
p221
sg9
L5L
sa(dp222
g1
I01
sg7
Vmeta_path
p223
sg9
L5L
sa(dp224
g1
I01
sg7
Vmodules
p225
sg9
L5L
sa(dp226
g1
I01
sg7
Vpath
p227
sg9
L5L
sa(dp228
g1
I01
sg7
Vpath_hooks
p229
sg9
L5L
sa(dp230
g1
I01
sg7
Vpath_importer_cache
p231
sg9
L5L
sa(dp232
g1
I01
sg7
Vplatform
p233
sg9
L5L
sa(dp234
g1
I01
sg7
Vprefix
p235
sg9
L5L
sa(dp236
g1
I01
sg5
Vset_coroutine_wrapper(wrapper)\u000a\u000aSet a wrapper for coroutine objects.
p237
sg7
Vset_coroutine_wrapper
p238
sg9
L2L
sa(dp239
g1
I01
sg5
Vsetcheckinterval(n)\u000a\u000aTell the Python interpreter to check for asynchronous events every\u000an instructions.  This also affects how often thread switches occur.
p240
sg7
Vsetcheckinterval
p241
sg9
L2L
sa(dp242
g1
I01
sg5
Vsetdlopenflags(n) -> None\u000a\u000aSet the flags used by the interpreter for dlopen calls, such as when the\u000ainterpreter loads extension modules.  Among other things, this will enable\u000aa lazy resolving of symbols when importing a module, if called as\u000asys.setdlopenflags(0).  To share symbols across extension modules, call as\u000asys.setdlopenflags(os.RTLD_GLOBAL).  Symbolic names for the flag modules\u000acan be found in the os module (RTLD_xxx constants, e.g. os.RTLD_LAZY).
p243
sg7
Vsetdlopenflags
p244
sg9
L2L
sa(dp245
g1
I01
sg5
Vsetprofile(function)\u000a\u000aSet the profiling function.  It will be called on each function call\u000aand return.  See the profiler chapter in the library manual.
p246
sg7
Vsetprofile
p247
sg9
L2L
sa(dp248
g1
I01
sg5
Vsetrecursionlimit(n)\u000a\u000aSet the maximum depth of the Python interpreter stack to n.  This\u000alimit prevents infinite recursion from causing an overflow of the C\u000astack and crashing Python.  The highest possible limit is platform-\u000adependent.
p249
sg7
Vsetrecursionlimit
p250
sg9
L2L
sa(dp251
g1
I01
sg5
Vsetswitchinterval(n)\u000a\u000aSet the ideal thread switching delay inside the Python interpreter\u000aThe actual frequency of switching threads can be lower if the\u000ainterpreter executes long sequences of uninterruptible code\u000a(this is implementation-specific and workload-dependent).\u000a\u000aThe parameter must represent the desired switching delay in seconds\u000aA typical value is 0.005 (5 milliseconds).
p252
sg7
Vsetswitchinterval
p253
sg9
L2L
sa(dp254
g1
I01
sg5
Vsettrace(function)\u000a\u000aSet the global debug tracing function.  It will be called on each\u000afunction call.  See the debugger chapter in the library manual.
p255
sg7
Vsettrace
p256
sg9
L2L
sa(dp257
g1
I01
sg7
Vstderr
p258
sg9
L5L
sa(dp259
g1
I01
sg7
Vstdin
p260
sg9
L5L
sa(dp261
g1
I01
sg7
Vstdout
p262
sg9
L5L
sa(dp263
g1
I01
sg7
Vthread_info
p264
sg9
L5L
sa(dp265
g1
I01
sg7
Vversion
p266
sg9
L5L
sa(dp267
g1
I01
sg7
Vversion_info
p268
sg9
L5L
sa(dp269
g1
I01
sg7
Vwarnoptions
p270
sg9
L5L
sasg5
VThis module provides access to some objects used or maintained by the\u000ainterpreter and to functions that interact strongly with the interpreter.\u000a\u000aDynamic objects:\u000a\u000aargv -- command line arguments; argv[0] is the script pathname if known\u000apath -- module search path; path[0] is the script directory, else ''\u000amodules -- dictionary of loaded modules\u000a\u000adisplayhook -- called to show results in an interactive session\u000aexcepthook -- called to handle any uncaught exception other than SystemExit\u000a  To customize printing in an interactive session or to install a custom\u000a  top-level exception handler, assign other functions to replace these.\u000a\u000astdin -- standard input file object; used by input()\u000astdout -- standard output file object; used by print()\u000astderr -- standard error object; used for error messages\u000a  By assigning other file objects (or objects that behave like files)\u000a  to these, it is possible to redirect all of the interpreter's I/O.\u000a\u000alast_type -- type of last uncaught exception\u000alast_value -- value of last uncaught exception\u000alast_traceback -- traceback of last uncaught exception\u000a  These three are only available in an interactive session after a\u000a  traceback has been printed.\u000a\u000aStatic objects:\u000a\u000abuiltin_module_names -- tuple of module names built into this interpreter\u000acopyright -- copyright notice pertaining to this interpreter\u000aexec_prefix -- prefix used to find the machine-specific Python library\u000aexecutable -- absolute path of the executable binary of the Python interpreter\u000afloat_info -- a struct sequence with information about the float implementation.\u000afloat_repr_style -- string indicating the style of repr() output for floats\u000ahash_info -- a struct sequence with information about the hash algorithm.\u000ahexversion -- version information encoded as a single integer\u000aimplementation -- Python implementation information.\u000aint_info -- a struct sequence with information about the int implementation.\u000amaxsize -- the largest supported length of containers.\u000amaxunicode -- the value of the largest Unicode code point\u000aplatform -- platform identifier\u000aprefix -- prefix used to find the Python library\u000athread_info -- a struct sequence with information about the thread implementation.\u000aversion -- the version of this interpreter as a string\u000aversion_info -- version information as a named tuple\u000a__stdin__ -- the original stdin; don't touch!\u000a__stdout__ -- the original stdout; don't touch!\u000a__stderr__ -- the original stderr; don't touch!\u000a__displayhook__ -- the original displayhook; don't touch!\u000a__excepthook__ -- the original excepthook; don't touch!\u000a\u000aFunctions:\u000a\u000adisplayhook() -- print an object to the screen, and save it in builtins._\u000aexcepthook() -- print an exception and its traceback to sys.stderr\u000aexc_info() -- return thread-safe information about the current exception\u000aexit() -- exit the interpreter by raising SystemExit\u000agetdlopenflags() -- returns flags to be used for dlopen() calls\u000agetprofile() -- get the global profiling function\u000agetrefcount() -- return the reference count for an object (plus one :-)\u000agetrecursionlimit() -- return the max recursion depth for the interpreter\u000agetsizeof() -- return the size of an object in bytes\u000agettrace() -- get the global debug tracing function\u000asetcheckinterval() -- control how often the interpreter checks for events\u000asetdlopenflags() -- set the flags to be used for dlopen() calls\u000asetprofile() -- set the global profiling function\u000asetrecursionlimit() -- set the max recursion depth for the interpreter\u000asettrace() -- set the global debug tracing function\u000a
p271
sg7
Vsys
p272
sg9
L1L
s.