(dp0
Vis_builtin
p1
I01
sVchilds
p2
(lp3
(dp4
g1
I01
sVname
p5
VCLD_CONTINUED
p6
sVtype
p7
L5L
sa(dp8
g1
I01
sg5
VCLD_DUMPED
p9
sg7
L5L
sa(dp10
g1
I01
sg5
VCLD_EXITED
p11
sg7
L5L
sa(dp12
g1
I01
sg5
VCLD_TRAPPED
p13
sg7
L5L
sa(dp14
g1
I01
sg5
VEX_CANTCREAT
p15
sg7
L5L
sa(dp16
g1
I01
sg5
VEX_CONFIG
p17
sg7
L5L
sa(dp18
g1
I01
sg5
VEX_DATAERR
p19
sg7
L5L
sa(dp20
g1
I01
sg5
VEX_IOERR
p21
sg7
L5L
sa(dp22
g1
I01
sg5
VEX_NOHOST
p23
sg7
L5L
sa(dp24
g1
I01
sg5
VEX_NOINPUT
p25
sg7
L5L
sa(dp26
g1
I01
sg5
VEX_NOPERM
p27
sg7
L5L
sa(dp28
g1
I01
sg5
VEX_NOUSER
p29
sg7
L5L
sa(dp30
g1
I01
sg5
VEX_OK
p31
sg7
L5L
sa(dp32
g1
I01
sg5
VEX_OSERR
p33
sg7
L5L
sa(dp34
g1
I01
sg5
VEX_OSFILE
p35
sg7
L5L
sa(dp36
g1
I01
sg5
VEX_PROTOCOL
p37
sg7
L5L
sa(dp38
g1
I01
sg5
VEX_SOFTWARE
p39
sg7
L5L
sa(dp40
g1
I01
sg5
VEX_TEMPFAIL
p41
sg7
L5L
sa(dp42
g1
I01
sg5
VEX_UNAVAILABLE
p43
sg7
L5L
sa(dp44
g1
I01
sg5
VEX_USAGE
p45
sg7
L5L
sa(dp46
g1
I01
sg5
VF_LOCK
p47
sg7
L5L
sa(dp48
g1
I01
sg5
VF_OK
p49
sg7
L5L
sa(dp50
g1
I01
sg5
VF_TEST
p51
sg7
L5L
sa(dp52
g1
I01
sg5
VF_TLOCK
p53
sg7
L5L
sa(dp54
g1
I01
sg5
VF_ULOCK
p55
sg7
L5L
sa(dp56
g1
I01
sg5
VNGROUPS_MAX
p57
sg7
L5L
sa(dp58
g1
I01
sg5
VO_ACCMODE
p59
sg7
L5L
sa(dp60
g1
I01
sg5
VO_APPEND
p61
sg7
L5L
sa(dp62
g1
I01
sg5
VO_ASYNC
p63
sg7
L5L
sa(dp64
g1
I01
sg5
VO_CLOEXEC
p65
sg7
L5L
sa(dp66
g1
I01
sg5
VO_CREAT
p67
sg7
L5L
sa(dp68
g1
I01
sg5
VO_DIRECT
p69
sg7
L5L
sa(dp70
g1
I01
sg5
VO_DIRECTORY
p71
sg7
L5L
sa(dp72
g1
I01
sg5
VO_DSYNC
p73
sg7
L5L
sa(dp74
g1
I01
sg5
VO_EXCL
p75
sg7
L5L
sa(dp76
g1
I01
sg5
VO_LARGEFILE
p77
sg7
L5L
sa(dp78
g1
I01
sg5
VO_NDELAY
p79
sg7
L5L
sa(dp80
g1
I01
sg5
VO_NOATIME
p81
sg7
L5L
sa(dp82
g1
I01
sg5
VO_NOCTTY
p83
sg7
L5L
sa(dp84
g1
I01
sg5
VO_NOFOLLOW
p85
sg7
L5L
sa(dp86
g1
I01
sg5
VO_NONBLOCK
p87
sg7
L5L
sa(dp88
g1
I01
sg5
VO_PATH
p89
sg7
L5L
sa(dp90
g1
I01
sg5
VO_RDONLY
p91
sg7
L5L
sa(dp92
g1
I01
sg5
VO_RDWR
p93
sg7
L5L
sa(dp94
g1
I01
sg5
VO_RSYNC
p95
sg7
L5L
sa(dp96
g1
I01
sg5
VO_SYNC
p97
sg7
L5L
sa(dp98
g1
I01
sg5
VO_TMPFILE
p99
sg7
L5L
sa(dp100
g1
I01
sg5
VO_TRUNC
p101
sg7
L5L
sa(dp102
g1
I01
sg5
VO_WRONLY
p103
sg7
L5L
sa(dp104
g1
I01
sg5
VPOSIX_FADV_DONTNEED
p105
sg7
L5L
sa(dp106
g1
I01
sg5
VPOSIX_FADV_NOREUSE
p107
sg7
L5L
sa(dp108
g1
I01
sg5
VPOSIX_FADV_NORMAL
p109
sg7
L5L
sa(dp110
g1
I01
sg5
VPOSIX_FADV_RANDOM
p111
sg7
L5L
sa(dp112
g1
I01
sg5
VPOSIX_FADV_SEQUENTIAL
p113
sg7
L5L
sa(dp114
g1
I01
sg5
VPOSIX_FADV_WILLNEED
p115
sg7
L5L
sa(dp116
g1
I01
sg5
VPRIO_PGRP
p117
sg7
L5L
sa(dp118
g1
I01
sg5
VPRIO_PROCESS
p119
sg7
L5L
sa(dp120
g1
I01
sg5
VPRIO_USER
p121
sg7
L5L
sa(dp122
g1
I01
sg5
VP_ALL
p123
sg7
L5L
sa(dp124
g1
I01
sg5
VP_PGID
p125
sg7
L5L
sa(dp126
g1
I01
sg5
VP_PID
p127
sg7
L5L
sa(dp128
g1
I01
sg5
VRTLD_DEEPBIND
p129
sg7
L5L
sa(dp130
g1
I01
sg5
VRTLD_GLOBAL
p131
sg7
L5L
sa(dp132
g1
I01
sg5
VRTLD_LAZY
p133
sg7
L5L
sa(dp134
g1
I01
sg5
VRTLD_LOCAL
p135
sg7
L5L
sa(dp136
g1
I01
sg5
VRTLD_NODELETE
p137
sg7
L5L
sa(dp138
g1
I01
sg5
VRTLD_NOLOAD
p139
sg7
L5L
sa(dp140
g1
I01
sg5
VRTLD_NOW
p141
sg7
L5L
sa(dp142
g1
I01
sg5
VR_OK
p143
sg7
L5L
sa(dp144
g1
I01
sg5
VSCHED_BATCH
p145
sg7
L5L
sa(dp146
g1
I01
sg5
VSCHED_FIFO
p147
sg7
L5L
sa(dp148
g1
I01
sg5
VSCHED_IDLE
p149
sg7
L5L
sa(dp150
g1
I01
sg5
VSCHED_OTHER
p151
sg7
L5L
sa(dp152
g1
I01
sg5
VSCHED_RESET_ON_FORK
p153
sg7
L5L
sa(dp154
g1
I01
sg5
VSCHED_RR
p155
sg7
L5L
sa(dp156
g1
I01
sg5
VSEEK_DATA
p157
sg7
L5L
sa(dp158
g1
I01
sg5
VSEEK_HOLE
p159
sg7
L5L
sa(dp160
g1
I01
sg5
VST_APPEND
p161
sg7
L5L
sa(dp162
g1
I01
sg5
VST_MANDLOCK
p163
sg7
L5L
sa(dp164
g1
I01
sg5
VST_NOATIME
p165
sg7
L5L
sa(dp166
g1
I01
sg5
VST_NODEV
p167
sg7
L5L
sa(dp168
g1
I01
sg5
VST_NODIRATIME
p169
sg7
L5L
sa(dp170
g1
I01
sg5
VST_NOEXEC
p171
sg7
L5L
sa(dp172
g1
I01
sg5
VST_NOSUID
p173
sg7
L5L
sa(dp174
g1
I01
sg5
VST_RDONLY
p175
sg7
L5L
sa(dp176
g1
I01
sg5
VST_RELATIME
p177
sg7
L5L
sa(dp178
g1
I01
sg5
VST_SYNCHRONOUS
p179
sg7
L5L
sa(dp180
g1
I01
sg5
VST_WRITE
p181
sg7
L5L
sa(dp182
g1
I01
sg5
VTMP_MAX
p183
sg7
L5L
sa(dp184
g1
I01
sg5
VWCONTINUED
p185
sg7
L5L
sa(dp186
g1
I01
sVdoc
p187
VReturn True if the process returning status was dumped to a core file.
p188
sg5
VWCOREDUMP
p189
sg7
L2L
sa(dp190
g1
I01
sg5
VWEXITED
p191
sg7
L5L
sa(dp192
g1
I01
sg187
VReturn the process return code from status.
p193
sg5
VWEXITSTATUS
p194
sg7
L2L
sa(dp195
g1
I01
sg187
VReturn True if a particular process was continued from a job control stop.\u000a\u000aReturn True if the process returning status was continued from a\u000ajob control stop.
p196
sg5
VWIFCONTINUED
p197
sg7
L2L
sa(dp198
g1
I01
sg187
VReturn True if the process returning status exited via the exit() system call.
p199
sg5
VWIFEXITED
p200
sg7
L2L
sa(dp201
g1
I01
sg187
VReturn True if the process returning status was terminated by a signal.
p202
sg5
VWIFSIGNALED
p203
sg7
L2L
sa(dp204
g1
I01
sg187
VReturn True if the process returning status was stopped.
p205
sg5
VWIFSTOPPED
p206
sg7
L2L
sa(dp207
g1
I01
sg5
VWNOHANG
p208
sg7
L5L
sa(dp209
g1
I01
sg5
VWNOWAIT
p210
sg7
L5L
sa(dp211
g1
I01
sg5
VWSTOPPED
p212
sg7
L5L
sa(dp213
g1
I01
sg187
VReturn the signal that stopped the process that provided the status value.
p214
sg5
VWSTOPSIG
p215
sg7
L2L
sa(dp216
g1
I01
sg187
VReturn the signal that terminated the process that provided the status value.
p217
sg5
VWTERMSIG
p218
sg7
L2L
sa(dp219
g1
I01
sg5
VWUNTRACED
p220
sg7
L5L
sa(dp221
g1
I01
sg5
VW_OK
p222
sg7
L5L
sa(dp223
g1
I01
sg5
VXATTR_CREATE
p224
sg7
L5L
sa(dp225
g1
I01
sg5
VXATTR_REPLACE
p226
sg7
L5L
sa(dp227
g1
I01
sg5
VXATTR_SIZE_MAX
p228
sg7
L5L
sa(dp229
g1
I01
sg5
VX_OK
p230
sg7
L5L
sa(dp231
g1
I01
sg5
V__doc__
p232
sg7
L5L
sa(dp233
g1
I01
sg2
(lp234
(dp235
g1
I01
sg5
V__delattr__
p236
sg7
L5L
sa(dp237
g1
I01
sg5
V__dict__
p238
sg7
L5L
sa(dp239
g1
I01
sg187
V__dir__() -> list\u000adefault dir() implementation
p240
sg5
V__dir__
p241
sg7
L2L
sa(dp242
g1
I01
sg5
g232
sg7
L5L
sa(dp243
g1
I01
sg5
V__eq__
p244
sg7
L5L
sa(dp245
g1
I01
sg187
Vdefault object formatter
p246
sg5
V__format__
p247
sg7
L2L
sa(dp248
g1
I01
sg5
V__ge__
p249
sg7
L5L
sa(dp250
g1
I01
sg5
V__getattribute__
p251
sg7
L5L
sa(dp252
g1
I01
sg5
V__gt__
p253
sg7
L5L
sa(dp254
g1
I01
sg5
V__hash__
p255
sg7
L5L
sa(dp256
g1
I01
sg5
V__init__
p257
sg7
L5L
sa(dp258
g1
I01
sg5
V__le__
p259
sg7
L5L
sa(dp260
g1
I01
sg5
V__lt__
p261
sg7
L5L
sa(dp262
g1
I01
sg5
V__module__
p263
sg7
L5L
sa(dp264
g1
I01
sg5
V__ne__
p265
sg7
L5L
sa(dp266
g1
I01
sg187
VCreate and return a new object.  See help(type) for accurate signature.
p267
sg5
V__new__
p268
sg7
L2L
sa(dp269
g1
I01
sg187
Vhelper for pickle
p270
sg5
V__reduce__
p271
sg7
L2L
sa(dp272
g1
I01
sg187
Vhelper for pickle
p273
sg5
V__reduce_ex__
p274
sg7
L2L
sa(dp275
g1
I01
sg5
V__repr__
p276
sg7
L5L
sa(dp277
g1
I01
sg5
V__setattr__
p278
sg7
L5L
sa(dp279
g1
I01
sg187
V__sizeof__() -> int\u000asize of object in memory, in bytes
p280
sg5
V__sizeof__
p281
sg7
L2L
sa(dp282
g1
I01
sg5
V__str__
p283
sg7
L5L
sa(dp284
g1
I01
sg187
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p285
sg5
V__subclasshook__
p286
sg7
L2L
sa(dp287
g1
I01
sg5
V__weakref__
p288
sg7
L5L
sa(dp289
g1
I01
sg5
Vcreate_module
p290
sg7
L5L
sa(dp291
g1
I01
sg5
Vexec_module
p292
sg7
L5L
sa(dp293
g1
I01
sg5
Vfind_module
p294
sg7
L5L
sa(dp295
g1
I01
sg5
Vfind_spec
p296
sg7
L5L
sa(dp297
g1
I01
sg5
Vget_code
p298
sg7
L5L
sa(dp299
g1
I01
sg5
Vget_source
p300
sg7
L5L
sa(dp301
g1
I01
sg5
Vis_package
p302
sg7
L5L
sa(dp303
g1
I01
sg5
Vload_module
p304
sg7
L5L
sa(dp305
g1
I01
sg5
Vmodule_repr
p306
sg7
L5L
sasg187
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p307
sg5
V__loader__
p308
sg7
L3L
sa(dp309
g1
I01
sg5
V__name__
p310
sg7
L5L
sa(dp311
g1
I01
sg5
V__package__
p312
sg7
L5L
sa(dp313
g1
I01
sg5
V__spec__
p314
sg7
L5L
sa(dp315
g1
I01
sg187
VExit to the system with specified status, without normal exit processing.
p316
sg5
V_exit
p317
sg7
L2L
sa(dp318
g1
I01
sg5
V_have_functions
p319
sg7
L5L
sa(dp320
g1
I01
sg187
VAbort the interpreter immediately.\u000a\u000aThis function 'dumps core' or otherwise fails in the hardest way possible\u000aon the hosting operating system.  This function never returns.
p321
sg5
Vabort
p322
sg7
L2L
sa(dp323
g1
I01
sg187
VUse the real uid/gid to test for access to a path.\u000a\u000a  path\u000a    Path to be tested; can be string, bytes, or open-file-descriptor int.\u000a  mode\u000a    Operating-system mode bitfield.  Can be F_OK to test existence,\u000a    or the inclusive-OR of R_OK, W_OK, and X_OK.\u000a  dir_fd\u000a    If not None, it should be a file descriptor open to a directory,\u000a    and path should be relative; path will then be relative to that\u000a    directory.\u000a  effective_ids\u000a    If True, access will use the effective uid/gid instead of\u000a    the real uid/gid.\u000a  follow_symlinks\u000a    If False, and the last element of the path is a symbolic link,\u000a    access will examine the symbolic link itself instead of the file\u000a    the link points to.\u000a\u000adir_fd, effective_ids, and follow_symlinks may not be implemented\u000a  on your platform.  If they are unavailable, using them will raise a\u000a  NotImplementedError.\u000a\u000aNote that most operations will use the effective uid/gid, therefore this\u000a  routine can be used in a suid/sgid environment to test if the invoking user\u000a  has the specified access to the path.
p324
sg5
Vaccess
p325
sg7
L2L
sa(dp326
g1
I01
sg187
VChange the current working directory to the specified path.\u000a\u000apath may always be specified as a string.\u000aOn some platforms, path may also be specified as an open file descriptor.\u000a  If this functionality is unavailable, using it raises an exception.
p327
sg5
Vchdir
p328
sg7
L2L
sa(dp329
g1
I01
sg187
VChange the access permissions of a file.\u000a\u000a  path\u000a    Path to be modified.  May always be specified as a str or bytes.\u000a    On some platforms, path may also be specified as an open file descriptor.\u000a    If this functionality is unavailable, using it raises an exception.\u000a  mode\u000a    Operating-system mode bitfield.\u000a  dir_fd\u000a    If not None, it should be a file descriptor open to a directory,\u000a    and path should be relative; path will then be relative to that\u000a    directory.\u000a  follow_symlinks\u000a    If False, and the last element of the path is a symbolic link,\u000a    chmod will modify the symbolic link itself instead of the file\u000a    the link points to.\u000a\u000aIt is an error to use dir_fd or follow_symlinks when specifying path as\u000a  an open file descriptor.\u000adir_fd and follow_symlinks may not be implemented on your platform.\u000a  If they are unavailable, using them will raise a NotImplementedError.
p330
sg5
Vchmod
p331
sg7
L2L
sa(dp332
g1
I01
sg187
VChange the owner and group id of path to the numeric uid and gid.\u005c\u000a\u000a  path\u000a    Path to be examined; can be string, bytes, or open-file-descriptor int.\u000a  dir_fd\u000a    If not None, it should be a file descriptor open to a directory,\u000a    and path should be relative; path will then be relative to that\u000a    directory.\u000a  follow_symlinks\u000a    If False, and the last element of the path is a symbolic link,\u000a    stat will examine the symbolic link itself instead of the file\u000a    the link points to.\u000a\u000apath may always be specified as a string.\u000aOn some platforms, path may also be specified as an open file descriptor.\u000a  If this functionality is unavailable, using it raises an exception.\u000aIf dir_fd is not None, it should be a file descriptor open to a directory,\u000a  and path should be relative; path will then be relative to that directory.\u000aIf follow_symlinks is False, and the last element of the path is a symbolic\u000a  link, chown will modify the symbolic link itself instead of the file the\u000a  link points to.\u000aIt is an error to use dir_fd or follow_symlinks when specifying path as\u000a  an open file descriptor.\u000adir_fd and follow_symlinks may not be implemented on your platform.\u000a  If they are unavailable, using them will raise a NotImplementedError.
p333
sg5
Vchown
p334
sg7
L2L
sa(dp335
g1
I01
sg187
VChange root directory to path.
p336
sg5
Vchroot
p337
sg7
L2L
sa(dp338
g1
I01
sg187
VClose a file descriptor.
p339
sg5
Vclose
p340
sg7
L2L
sa(dp341
g1
I01
sg187
VCloses all file descriptors in [fd_low, fd_high), ignoring errors.
p342
sg5
Vcloserange
p343
sg7
L2L
sa(dp344
g1
I01
sg187
VReturn a string-valued system configuration variable.
p345
sg5
Vconfstr
p346
sg7
L2L
sa(dp347
g1
I01
sg5
Vconfstr_names
p348
sg7
L5L
sa(dp349
g1
I01
sg187
VReturn the number of CPUs in the system; return None if indeterminable.
p350
sg5
Vcpu_count
p351
sg7
L2L
sa(dp352
g1
I01
sg187
VReturn the name of the controlling terminal for this process.
p353
sg5
Vctermid
p354
sg7
L2L
sa(dp355
g1
I01
sg187
VReturn a string describing the encoding of a terminal's file descriptor.\u000a\u000aThe file descriptor must be attached to a terminal.\u000aIf the device is not a terminal, return None.
p356
sg5
Vdevice_encoding
p357
sg7
L2L
sa(dp358
g1
I01
sg187
VReturn a duplicate of a file descriptor.
p359
sg5
Vdup
p360
sg7
L2L
sa(dp361
g1
I01
sg187
VDuplicate file descriptor.
p362
sg5
Vdup2
p363
sg7
L2L
sa(dp364
g1
I01
sg5
Venviron
p365
sg7
L5L
sa(dp366
g1
I01
sg2
(lp367
(dp368
g1
I01
sg5
V__cause__
p369
sg7
L5L
sa(dp370
g1
I01
sg5
V__context__
p371
sg7
L5L
sa(dp372
g1
I01
sg5
g236
sg7
L5L
sa(dp373
g1
I01
sg5
g238
sg7
L5L
sa(dp374
g1
I01
sg187
V__dir__() -> list\u000adefault dir() implementation
p375
sg5
g241
sg7
L2L
sa(dp376
g1
I01
sg5
g232
sg7
L5L
sa(dp377
g1
I01
sg5
g244
sg7
L5L
sa(dp378
g1
I01
sg187
Vdefault object formatter
p379
sg5
g247
sg7
L2L
sa(dp380
g1
I01
sg5
g249
sg7
L5L
sa(dp381
g1
I01
sg5
g251
sg7
L5L
sa(dp382
g1
I01
sg5
g253
sg7
L5L
sa(dp383
g1
I01
sg5
g255
sg7
L5L
sa(dp384
g1
I01
sg5
g257
sg7
L5L
sa(dp385
g1
I01
sg5
g259
sg7
L5L
sa(dp386
g1
I01
sg5
g261
sg7
L5L
sa(dp387
g1
I01
sg5
g265
sg7
L5L
sa(dp388
g1
I01
sg187
VCreate and return a new object.  See help(type) for accurate signature.
p389
sg5
g268
sg7
L2L
sa(dp390
g1
I01
sg187
Nsg5
g271
sg7
L2L
sa(dp391
g1
I01
sg187
Vhelper for pickle
p392
sg5
g274
sg7
L2L
sa(dp393
g1
I01
sg5
g276
sg7
L5L
sa(dp394
g1
I01
sg5
g278
sg7
L5L
sa(dp395
g1
I01
sg187
Nsg5
V__setstate__
p396
sg7
L2L
sa(dp397
g1
I01
sg187
V__sizeof__() -> int\u000asize of object in memory, in bytes
p398
sg5
g281
sg7
L2L
sa(dp399
g1
I01
sg5
g283
sg7
L5L
sa(dp400
g1
I01
sg187
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p401
sg5
g286
sg7
L2L
sa(dp402
g1
I01
sg5
V__suppress_context__
p403
sg7
L5L
sa(dp404
g1
I01
sg5
V__traceback__
p405
sg7
L5L
sa(dp406
g1
I01
sg5
Vargs
p407
sg7
L5L
sa(dp408
g1
I01
sg5
Vcharacters_written
p409
sg7
L5L
sa(dp410
g1
I01
sg5
Verrno
p411
sg7
L5L
sa(dp412
g1
I01
sg5
Vfilename
p413
sg7
L5L
sa(dp414
g1
I01
sg5
Vfilename2
p415
sg7
L5L
sa(dp416
g1
I01
sg5
Vstrerror
p417
sg7
L5L
sa(dp418
g1
I01
sg187
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p419
sg5
Vwith_traceback
p420
sg7
L2L
sasg187
VBase class for I/O related errors.
p421
sg5
Verror
p422
sg7
L3L
sa(dp423
g1
I01
sg187
VExecute an executable path with arguments, replacing current process.\u000a\u000a  path\u000a    Path of executable file.\u000a  argv\u000a    Tuple or list of strings.
p424
sg5
Vexecv
p425
sg7
L2L
sa(dp426
g1
I01
sg187
VExecute an executable path with arguments, replacing current process.\u000a\u000a  path\u000a    Path of executable file.\u000a  argv\u000a    Tuple or list of strings.\u000a  env\u000a    Dictionary of strings mapping to strings.
p427
sg5
Vexecve
p428
sg7
L2L
sa(dp429
g1
I01
sg187
VChange to the directory of the given file descriptor.\u000a\u000afd must be opened on a directory, not a file.\u000aEquivalent to os.chdir(fd).
p430
sg5
Vfchdir
p431
sg7
L2L
sa(dp432
g1
I01
sg187
VChange the access permissions of the file given by file descriptor fd.\u000a\u000aEquivalent to os.chmod(fd, mode).
p433
sg5
Vfchmod
p434
sg7
L2L
sa(dp435
g1
I01
sg187
VChange the owner and group id of the file specified by file descriptor.\u000a\u000aEquivalent to os.chown(fd, uid, gid).
p436
sg5
Vfchown
p437
sg7
L2L
sa(dp438
g1
I01
sg187
VForce write of fd to disk without forcing update of metadata.
p439
sg5
Vfdatasync
p440
sg7
L2L
sa(dp441
g1
I01
sg187
VFork a child process.\u000a\u000aReturn 0 to child process and PID of child to parent process.
p442
sg5
Vfork
p443
sg7
L2L
sa(dp444
g1
I01
sg187
VFork a new process with a new pseudo-terminal as controlling tty.\u000a\u000aReturns a tuple of (pid, master_fd).\u000aLike fork(), return pid of 0 to the child process,\u000aand pid of child to the parent process.\u000aTo both, return fd of newly opened pseudo-terminal.
p445
sg5
Vforkpty
p446
sg7
L2L
sa(dp447
g1
I01
sg187
VReturn the configuration limit name for the file descriptor fd.\u000a\u000aIf there is no limit, return -1.
p448
sg5
Vfpathconf
p449
sg7
L2L
sa(dp450
g1
I01
sg187
VPerform a stat system call on the given file descriptor.\u000a\u000aLike stat(), but for an open file descriptor.\u000aEquivalent to os.stat(fd).
p451
sg5
Vfstat
p452
sg7
L2L
sa(dp453
g1
I01
sg187
VPerform an fstatvfs system call on the given fd.\u000a\u000aEquivalent to statvfs(fd).
p454
sg5
Vfstatvfs
p455
sg7
L2L
sa(dp456
g1
I01
sg187
VForce write of fd to disk.
p457
sg5
Vfsync
p458
sg7
L2L
sa(dp459
g1
I01
sg187
VTruncate a file, specified by file descriptor, to a specific length.
p460
sg5
Vftruncate
p461
sg7
L2L
sa(dp462
g1
I01
sg187
Vget_blocking(fd) -> bool\u000a\u000aGet the blocking mode of the file descriptor:\u000aFalse if the O_NONBLOCK flag is set, True if the flag is cleared.
p463
sg5
Vget_blocking
p464
sg7
L2L
sa(dp465
g1
I01
sg187
VGet the close-on-exe flag of the specified file descriptor.
p466
sg5
Vget_inheritable
p467
sg7
L2L
sa(dp468
g1
I01
sg187
VReturn the size of the terminal window as (columns, lines).\u000a\u000aThe optional argument fd (default standard output) specifies\u000awhich file descriptor should be queried.\u000a\u000aIf the file descriptor is not connected to a terminal, an OSError\u000ais thrown.\u000a\u000aThis function will only be defined if an implementation is\u000aavailable for this system.\u000a\u000ashutil.get_terminal_size is the high-level function which should \u000anormally be used, os.get_terminal_size is the low-level implementation.
p469
sg5
Vget_terminal_size
p470
sg7
L2L
sa(dp471
g1
I01
sg187
VReturn a unicode string representing the current working directory.
p472
sg5
Vgetcwd
p473
sg7
L2L
sa(dp474
g1
I01
sg187
VReturn a bytes string representing the current working directory.
p475
sg5
Vgetcwdb
p476
sg7
L2L
sa(dp477
g1
I01
sg187
VReturn the current process's effective group id.
p478
sg5
Vgetegid
p479
sg7
L2L
sa(dp480
g1
I01
sg187
VReturn the current process's effective user id.
p481
sg5
Vgeteuid
p482
sg7
L2L
sa(dp483
g1
I01
sg187
VReturn the current process's group id.
p484
sg5
Vgetgid
p485
sg7
L2L
sa(dp486
g1
I01
sg187
Vgetgrouplist(user, group) -> list of groups to which a user belongs\u000a\u000aReturns a list of groups to which a user belongs.\u000a\u000a    user: username to lookup\u000a    group: base group id of the user
p487
sg5
Vgetgrouplist
p488
sg7
L2L
sa(dp489
g1
I01
sg187
VReturn list of supplemental group IDs for the process.
p490
sg5
Vgetgroups
p491
sg7
L2L
sa(dp492
g1
I01
sg187
VReturn average recent system load information.\u000a\u000aReturn the number of processes in the system run queue averaged over\u000athe last 1, 5, and 15 minutes as a tuple of three floats.\u000aRaises OSError if the load average was unobtainable.
p493
sg5
Vgetloadavg
p494
sg7
L2L
sa(dp495
g1
I01
sg187
VReturn the actual login name.
p496
sg5
Vgetlogin
p497
sg7
L2L
sa(dp498
g1
I01
sg187
VCall the system call getpgid(), and return the result.
p499
sg5
Vgetpgid
p500
sg7
L2L
sa(dp501
g1
I01
sg187
VReturn the current process group id.
p502
sg5
Vgetpgrp
p503
sg7
L2L
sa(dp504
g1
I01
sg187
VReturn the current process id.
p505
sg5
Vgetpid
p506
sg7
L2L
sa(dp507
g1
I01
sg187
VReturn the parent's process id.\u000a\u000aIf the parent process has already exited, Windows machines will still\u000areturn its id; others systems will return the id of the 'init' process (1).
p508
sg5
Vgetppid
p509
sg7
L2L
sa(dp510
g1
I01
sg187
VReturn program scheduling priority.
p511
sg5
Vgetpriority
p512
sg7
L2L
sa(dp513
g1
I01
sg187
VReturn a tuple of the current process's real, effective, and saved group ids.
p514
sg5
Vgetresgid
p515
sg7
L2L
sa(dp516
g1
I01
sg187
VReturn a tuple of the current process's real, effective, and saved user ids.
p517
sg5
Vgetresuid
p518
sg7
L2L
sa(dp519
g1
I01
sg187
VCall the system call getsid(pid) and return the result.
p520
sg5
Vgetsid
p521
sg7
L2L
sa(dp522
g1
I01
sg187
VReturn the current process's user id.
p523
sg5
Vgetuid
p524
sg7
L2L
sa(dp525
g1
I01
sg187
VReturn the value of extended attribute attribute on path.\u000a\u000apath may be either a string or an open file descriptor.\u000aIf follow_symlinks is False, and the last element of the path is a symbolic\u000a  link, getxattr will examine the symbolic link itself instead of the file\u000a  the link points to.
p526
sg5
Vgetxattr
p527
sg7
L2L
sa(dp528
g1
I01
sg187
Vinitgroups(username, gid) -> None\u000a\u000aCall the system initgroups() to initialize the group access list with all of\u000athe groups of which the specified username is a member, plus the specified\u000agroup id.
p529
sg5
Vinitgroups
p530
sg7
L2L
sa(dp531
g1
I01
sg187
VReturn True if the fd is connected to a terminal.\u000a\u000aReturn True if the file descriptor is an open file descriptor\u000aconnected to the slave end of a terminal.
p532
sg5
Visatty
p533
sg7
L2L
sa(dp534
g1
I01
sg187
VKill a process with a signal.
p535
sg5
Vkill
p536
sg7
L2L
sa(dp537
g1
I01
sg187
VKill a process group with a signal.
p538
sg5
Vkillpg
p539
sg7
L2L
sa(dp540
g1
I01
sg187
VChange the owner and group id of path to the numeric uid and gid.\u000a\u000aThis function will not follow symbolic links.\u000aEquivalent to os.chown(path, uid, gid, follow_symlinks=False).
p541
sg5
Vlchown
p542
sg7
L2L
sa(dp543
g1
I01
sg187
VCreate a hard link to a file.\u000a\u000aIf either src_dir_fd or dst_dir_fd is not None, it should be a file\u000a  descriptor open to a directory, and the respective path string (src or dst)\u000a  should be relative; the path will then be relative to that directory.\u000aIf follow_symlinks is False, and the last element of src is a symbolic\u000a  link, link will create a link to the symbolic link itself instead of the\u000a  file the link points to.\u000asrc_dir_fd, dst_dir_fd, and follow_symlinks may not be implemented on your\u000a  platform.  If they are unavailable, using them will raise a\u000a  NotImplementedError.
p544
sg5
Vlink
p545
sg7
L2L
sa(dp546
g1
I01
sg187
VReturn a list containing the names of the files in the directory.\u000a\u000apath can be specified as either str or bytes.  If path is bytes,\u000a  the filenames returned will also be bytes; in all other circumstances\u000a  the filenames returned will be str.\u000aIf path is None, uses the path='.'.\u000aOn some platforms, path may also be specified as an open file descriptor;\u005c\u000a  the file descriptor must refer to a directory.\u000a  If this functionality is unavailable, using it raises NotImplementedError.\u000a\u000aThe list is in arbitrary order.  It does not include the special\u000aentries '.' and '..' even if they are present in the directory.
p547
sg5
Vlistdir
p548
sg7
L2L
sa(dp549
g1
I01
sg187
VReturn a list of extended attributes on path.\u000a\u000apath may be either None, a string, or an open file descriptor.\u000aif path is None, listxattr will examine the current directory.\u000aIf follow_symlinks is False, and the last element of the path is a symbolic\u000a  link, listxattr will examine the symbolic link itself instead of the file\u000a  the link points to.
p550
sg5
Vlistxattr
p551
sg7
L2L
sa(dp552
g1
I01
sg187
VApply, test or remove a POSIX lock on an open file descriptor.\u000a\u000a  fd\u000a    An open file descriptor.\u000a  command\u000a    One of F_LOCK, F_TLOCK, F_ULOCK or F_TEST.\u000a  length\u000a    The number of bytes to lock, starting at the current position.
p553
sg5
Vlockf
p554
sg7
L2L
sa(dp555
g1
I01
sg187
VSet the position of a file descriptor.  Return the new position.\u000a\u000aReturn the new cursor position in number of bytes\u000arelative to the beginning of the file.
p556
sg5
Vlseek
p557
sg7
L2L
sa(dp558
g1
I01
sg187
VPerform a stat system call on the given path, without following symbolic links.\u000a\u000aLike stat(), but do not follow symbolic links.\u000aEquivalent to stat(path, follow_symlinks=False).
p559
sg5
Vlstat
p560
sg7
L2L
sa(dp561
g1
I01
sg187
VExtracts a device major number from a raw device number.
p562
sg5
Vmajor
p563
sg7
L2L
sa(dp564
g1
I01
sg187
VComposes a raw device number from the major and minor device numbers.
p565
sg5
Vmakedev
p566
sg7
L2L
sa(dp567
g1
I01
sg187
VExtracts a device minor number from a raw device number.
p568
sg5
Vminor
p569
sg7
L2L
sa(dp570
g1
I01
sg187
VCreate a directory.\u000a\u000aIf dir_fd is not None, it should be a file descriptor open to a directory,\u000a  and path should be relative; path will then be relative to that directory.\u000adir_fd may not be implemented on your platform.\u000a  If it is unavailable, using it will raise a NotImplementedError.\u000a\u000aThe mode argument is ignored on Windows.
p571
sg5
Vmkdir
p572
sg7
L2L
sa(dp573
g1
I01
sg187
VCreate a "fifo" (a POSIX named pipe).\u000a\u000aIf dir_fd is not None, it should be a file descriptor open to a directory,\u000a  and path should be relative; path will then be relative to that directory.\u000adir_fd may not be implemented on your platform.\u000a  If it is unavailable, using it will raise a NotImplementedError.
p574
sg5
Vmkfifo
p575
sg7
L2L
sa(dp576
g1
I01
sg187
VCreate a node in the file system.\u000a\u000aCreate a node in the file system (file, device special file or named pipe)\u000aat path.  mode specifies both the permissions to use and the\u000atype of node to be created, being combined (bitwise OR) with one of\u000aS_IFREG, S_IFCHR, S_IFBLK, and S_IFIFO.  If S_IFCHR or S_IFBLK is set on mode,\u000adevice defines the newly created device special file (probably using\u000aos.makedev()).  Otherwise device is ignored.\u000a\u000aIf dir_fd is not None, it should be a file descriptor open to a directory,\u000a  and path should be relative; path will then be relative to that directory.\u000adir_fd may not be implemented on your platform.\u000a  If it is unavailable, using it will raise a NotImplementedError.
p577
sg5
Vmknod
p578
sg7
L2L
sa(dp579
g1
I01
sg187
VAdd increment to the priority of process and return the new priority.
p580
sg5
Vnice
p581
sg7
L2L
sa(dp582
g1
I01
sg187
VOpen a file for low level IO.  Returns a file descriptor (integer).\u000a\u000aIf dir_fd is not None, it should be a file descriptor open to a directory,\u000a  and path should be relative; path will then be relative to that directory.\u000adir_fd may not be implemented on your platform.\u000a  If it is unavailable, using it will raise a NotImplementedError.
p583
sg5
Vopen
p584
sg7
L2L
sa(dp585
g1
I01
sg187
VOpen a pseudo-terminal.\u000a\u000aReturn a tuple of (master_fd, slave_fd) containing open file descriptors\u000afor both the master and slave ends.
p586
sg5
Vopenpty
p587
sg7
L2L
sa(dp588
g1
I01
sg187
VReturn the configuration limit name for the file or directory path.\u000a\u000aIf there is no limit, return -1.\u000aOn some platforms, path may also be specified as an open file descriptor.\u000a  If this functionality is unavailable, using it raises an exception.
p589
sg5
Vpathconf
p590
sg7
L2L
sa(dp591
g1
I01
sg5
Vpathconf_names
p592
sg7
L5L
sa(dp593
g1
I01
sg187
VCreate a pipe.\u000a\u000aReturns a tuple of two file descriptors:\u000a  (read_fd, write_fd)
p594
sg5
Vpipe
p595
sg7
L2L
sa(dp596
g1
I01
sg187
VCreate a pipe with flags set atomically.\u000a\u000aReturns a tuple of two file descriptors:\u000a  (read_fd, write_fd)\u000a\u000aflags can be constructed by ORing together one or more of these values:\u000aO_NONBLOCK, O_CLOEXEC.
p597
sg5
Vpipe2
p598
sg7
L2L
sa(dp599
g1
I01
sg187
VAnnounce an intention to access data in a specific pattern.\u000a\u000aAnnounce an intention to access data in a specific pattern, thus allowing\u000athe kernel to make optimizations.\u000aThe advice applies to the region of the file specified by fd starting at\u000aoffset and continuing for length bytes.\u000aadvice is one of POSIX_FADV_NORMAL, POSIX_FADV_SEQUENTIAL,\u000aPOSIX_FADV_RANDOM, POSIX_FADV_NOREUSE, POSIX_FADV_WILLNEED, or\u000aPOSIX_FADV_DONTNEED.
p600
sg5
Vposix_fadvise
p601
sg7
L2L
sa(dp602
g1
I01
sg187
VEnsure a file has allocated at least a particular number of bytes on disk.\u000a\u000aEnsure that the file specified by fd encompasses a range of bytes\u000astarting at offset bytes from the beginning and continuing for length bytes.
p603
sg5
Vposix_fallocate
p604
sg7
L2L
sa(dp605
g1
I01
sg187
VRead a number of bytes from a file descriptor starting at a particular offset.\u000a\u000aRead length bytes from file descriptor fd, starting at offset bytes from\u000athe beginning of the file.  The file offset remains unchanged.
p606
sg5
Vpread
p607
sg7
L2L
sa(dp608
g1
I01
sg187
VChange or add an environment variable.
p609
sg5
Vputenv
p610
sg7
L2L
sa(dp611
g1
I01
sg187
VWrite bytes to a file descriptor starting at a particular offset.\u000a\u000aWrite buffer to fd, starting at offset bytes from the beginning of\u000athe file.  Returns the number of bytes writte.  Does not change the\u000acurrent file offset.
p612
sg5
Vpwrite
p613
sg7
L2L
sa(dp614
g1
I01
sg187
VRead from a file descriptor.  Returns a bytes object.
p615
sg5
Vread
p616
sg7
L2L
sa(dp617
g1
I01
sg187
Vreadlink(path, *, dir_fd=None) -> path\u000a\u000aReturn a string representing the path to which the symbolic link points.\u000a\u000aIf dir_fd is not None, it should be a file descriptor open to a directory,\u000a  and path should be relative; path will then be relative to that directory.\u000adir_fd may not be implemented on your platform.\u000a  If it is unavailable, using it will raise a NotImplementedError.
p618
sg5
Vreadlink
p619
sg7
L2L
sa(dp620
g1
I01
sg187
VRead from a file descriptor fd into an iterable of buffers.\u000a\u000aThe buffers should be mutable buffers accepting bytes.\u000areadv will transfer data into each buffer until it is full\u000aand then move on to the next buffer in the sequence to hold\u000athe rest of the data.\u000a\u000areadv returns the total number of bytes read,\u000awhich may be less than the total capacity of all the buffers.
p621
sg5
Vreadv
p622
sg7
L2L
sa(dp623
g1
I01
sg187
VRemove a file (same as unlink()).\u000a\u000aIf dir_fd is not None, it should be a file descriptor open to a directory,\u000a  and path should be relative; path will then be relative to that directory.\u000adir_fd may not be implemented on your platform.\u000a  If it is unavailable, using it will raise a NotImplementedError.
p624
sg5
Vremove
p625
sg7
L2L
sa(dp626
g1
I01
sg187
VRemove extended attribute attribute on path.\u000a\u000apath may be either a string or an open file descriptor.\u000aIf follow_symlinks is False, and the last element of the path is a symbolic\u000a  link, removexattr will modify the symbolic link itself instead of the file\u000a  the link points to.
p627
sg5
Vremovexattr
p628
sg7
L2L
sa(dp629
g1
I01
sg187
VRename a file or directory.\u000a\u000aIf either src_dir_fd or dst_dir_fd is not None, it should be a file\u000a  descriptor open to a directory, and the respective path string (src or dst)\u000a  should be relative; the path will then be relative to that directory.\u000asrc_dir_fd and dst_dir_fd, may not be implemented on your platform.\u000a  If they are unavailable, using them will raise a NotImplementedError.
p630
sg5
Vrename
p631
sg7
L2L
sa(dp632
g1
I01
sg187
VRename a file or directory, overwriting the destination.\u000a\u000aIf either src_dir_fd or dst_dir_fd is not None, it should be a file\u000a  descriptor open to a directory, and the respective path string (src or dst)\u000a  should be relative; the path will then be relative to that directory.\u000asrc_dir_fd and dst_dir_fd, may not be implemented on your platform.\u000a  If they are unavailable, using them will raise a NotImplementedError."
p633
sg5
Vreplace
p634
sg7
L2L
sa(dp635
g1
I01
sg187
VRemove a directory.\u000a\u000aIf dir_fd is not None, it should be a file descriptor open to a directory,\u000a  and path should be relative; path will then be relative to that directory.\u000adir_fd may not be implemented on your platform.\u000a  If it is unavailable, using it will raise a NotImplementedError.
p636
sg5
Vrmdir
p637
sg7
L2L
sa(dp638
g1
I01
sg187
Vscandir(path='.') -> iterator of DirEntry objects for given path
p639
sg5
Vscandir
p640
sg7
L2L
sa(dp641
g1
I01
sg187
VGet the maximum scheduling priority for policy.
p642
sg5
Vsched_get_priority_max
p643
sg7
L2L
sa(dp644
g1
I01
sg187
VGet the minimum scheduling priority for policy.
p645
sg5
Vsched_get_priority_min
p646
sg7
L2L
sa(dp647
g1
I01
sg187
VReturn the affinity of the process identified by pid.\u000a\u000aThe affinity is returned as a set of CPU identifiers.
p648
sg5
Vsched_getaffinity
p649
sg7
L2L
sa(dp650
g1
I01
sg187
VReturns scheduling parameters for the process identified by pid.\u000a\u000aIf pid is 0, returns parameters for the calling process.\u000aReturn value is an instance of sched_param.
p651
sg5
Vsched_getparam
p652
sg7
L2L
sa(dp653
g1
I01
sg187
VGet the scheduling policy for the process identifiedy by pid.\u000a\u000aPassing 0 for pid returns the scheduling policy for the calling process.
p654
sg5
Vsched_getscheduler
p655
sg7
L2L
sa(dp656
g1
I01
sg2
(lp657
(dp658
g1
I01
sg5
V__add__
p659
sg7
L5L
sa(dp660
g1
I01
sg5
V__contains__
p661
sg7
L5L
sa(dp662
g1
I01
sg5
g236
sg7
L5L
sa(dp663
g1
I01
sg187
V__dir__() -> list\u000adefault dir() implementation
p664
sg5
g241
sg7
L2L
sa(dp665
g1
I01
sg5
g232
sg7
L5L
sa(dp666
g1
I01
sg5
g244
sg7
L5L
sa(dp667
g1
I01
sg187
Vdefault object formatter
p668
sg5
g247
sg7
L2L
sa(dp669
g1
I01
sg5
g249
sg7
L5L
sa(dp670
g1
I01
sg5
g251
sg7
L5L
sa(dp671
g1
I01
sg5
V__getitem__
p672
sg7
L5L
sa(dp673
g1
I01
sg187
Nsg5
V__getnewargs__
p674
sg7
L2L
sa(dp675
g1
I01
sg5
g253
sg7
L5L
sa(dp676
g1
I01
sg5
g255
sg7
L5L
sa(dp677
g1
I01
sg5
g257
sg7
L5L
sa(dp678
g1
I01
sg5
V__iter__
p679
sg7
L5L
sa(dp680
g1
I01
sg5
g259
sg7
L5L
sa(dp681
g1
I01
sg5
V__len__
p682
sg7
L5L
sa(dp683
g1
I01
sg5
g261
sg7
L5L
sa(dp684
g1
I01
sg5
V__mul__
p685
sg7
L5L
sa(dp686
g1
I01
sg5
g265
sg7
L5L
sa(dp687
g1
I01
sg187
VCreate and return a new object.  See help(type) for accurate signature.
p688
sg5
g268
sg7
L2L
sa(dp689
g1
I01
sg187
Nsg5
g271
sg7
L2L
sa(dp690
g1
I01
sg187
Vhelper for pickle
p691
sg5
g274
sg7
L2L
sa(dp692
g1
I01
sg5
g276
sg7
L5L
sa(dp693
g1
I01
sg5
V__rmul__
p694
sg7
L5L
sa(dp695
g1
I01
sg5
g278
sg7
L5L
sa(dp696
g1
I01
sg187
V__sizeof__() -> int\u000asize of object in memory, in bytes
p697
sg5
g281
sg7
L2L
sa(dp698
g1
I01
sg5
g283
sg7
L5L
sa(dp699
g1
I01
sg187
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p700
sg5
g286
sg7
L2L
sa(dp701
g1
I01
sg187
VT.count(value) -> integer -- return number of occurrences of value
p702
sg5
Vcount
p703
sg7
L2L
sa(dp704
g1
I01
sg187
VT.index(value, [start, [stop]]) -> integer -- return first index of value.\u000aRaises ValueError if the value is not present.
p705
sg5
Vindex
p706
sg7
L2L
sa(dp707
g1
I01
sg5
Vn_fields
p708
sg7
L5L
sa(dp709
g1
I01
sg5
Vn_sequence_fields
p710
sg7
L5L
sa(dp711
g1
I01
sg5
Vn_unnamed_fields
p712
sg7
L5L
sa(dp713
g1
I01
sg5
Vsched_priority
p714
sg7
L5L
sasg187
VCurrent has only one field: sched_priority");\u000a\u000a  sched_priority\u000a    A scheduling parameter.
p715
sg5
Vsched_param
p716
sg7
L3L
sa(dp717
g1
I01
sg187
VReturn the round-robin quantum for the process identified by pid, in seconds.\u000a\u000aValue returned is a float.
p718
sg5
Vsched_rr_get_interval
p719
sg7
L2L
sa(dp720
g1
I01
sg187
VSet the CPU affinity of the process identified by pid to mask.\u000a\u000amask should be an iterable of integers identifying CPUs.
p721
sg5
Vsched_setaffinity
p722
sg7
L2L
sa(dp723
g1
I01
sg187
VSet scheduling parameters for the process identified by pid.\u000a\u000aIf pid is 0, sets parameters for the calling process.\u000aparam should be an instance of sched_param.
p724
sg5
Vsched_setparam
p725
sg7
L2L
sa(dp726
g1
I01
sg187
VSet the scheduling policy for the process identified by pid.\u000a\u000aIf pid is 0, the calling process is changed.\u000aparam is an instance of sched_param.
p727
sg5
Vsched_setscheduler
p728
sg7
L2L
sa(dp729
g1
I01
sg187
VVoluntarily relinquish the CPU.
p730
sg5
Vsched_yield
p731
sg7
L2L
sa(dp732
g1
I01
sg187
Vsendfile(out, in, offset, count) -> byteswritten\u000asendfile(out, in, offset, count[, headers][, trailers], flags=0)\u000a            -> byteswritten\u000aCopy count bytes from file descriptor in to file descriptor out.
p733
sg5
Vsendfile
p734
sg7
L2L
sa(dp735
g1
I01
sg187
Vset_blocking(fd, blocking)\u000a\u000aSet the blocking mode of the specified file descriptor.\u000aSet the O_NONBLOCK flag if blocking is False,\u000aclear the O_NONBLOCK flag otherwise.
p736
sg5
Vset_blocking
p737
sg7
L2L
sa(dp738
g1
I01
sg187
VSet the inheritable flag of the specified file descriptor.
p739
sg5
Vset_inheritable
p740
sg7
L2L
sa(dp741
g1
I01
sg187
VSet the current process's effective group id.
p742
sg5
Vsetegid
p743
sg7
L2L
sa(dp744
g1
I01
sg187
VSet the current process's effective user id.
p745
sg5
Vseteuid
p746
sg7
L2L
sa(dp747
g1
I01
sg187
VSet the current process's group id.
p748
sg5
Vsetgid
p749
sg7
L2L
sa(dp750
g1
I01
sg187
VSet the groups of the current process to list.
p751
sg5
Vsetgroups
p752
sg7
L2L
sa(dp753
g1
I01
sg187
VCall the system call setpgid(pid, pgrp).
p754
sg5
Vsetpgid
p755
sg7
L2L
sa(dp756
g1
I01
sg187
VMake the current process the leader of its process group.
p757
sg5
Vsetpgrp
p758
sg7
L2L
sa(dp759
g1
I01
sg187
VSet program scheduling priority.
p760
sg5
Vsetpriority
p761
sg7
L2L
sa(dp762
g1
I01
sg187
VSet the current process's real and effective group ids.
p763
sg5
Vsetregid
p764
sg7
L2L
sa(dp765
g1
I01
sg187
VSet the current process's real, effective, and saved group ids.
p766
sg5
Vsetresgid
p767
sg7
L2L
sa(dp768
g1
I01
sg187
VSet the current process's real, effective, and saved user ids.
p769
sg5
Vsetresuid
p770
sg7
L2L
sa(dp771
g1
I01
sg187
VSet the current process's real and effective user ids.
p772
sg5
Vsetreuid
p773
sg7
L2L
sa(dp774
g1
I01
sg187
VCall the system call setsid().
p775
sg5
Vsetsid
p776
sg7
L2L
sa(dp777
g1
I01
sg187
VSet the current process's user id.
p778
sg5
Vsetuid
p779
sg7
L2L
sa(dp780
g1
I01
sg187
VSet extended attribute attribute on path to value.\u000a\u000apath may be either a string or an open file descriptor.\u000aIf follow_symlinks is False, and the last element of the path is a symbolic\u000a  link, setxattr will modify the symbolic link itself instead of the file\u000a  the link points to.
p781
sg5
Vsetxattr
p782
sg7
L2L
sa(dp783
g1
I01
sg187
VPerform a stat system call on the given path.\u000a\u000a  path\u000a    Path to be examined; can be string, bytes, or open-file-descriptor int.\u000a  dir_fd\u000a    If not None, it should be a file descriptor open to a directory,\u000a    and path should be a relative string; path will then be relative to\u000a    that directory.\u000a  follow_symlinks\u000a    If False, and the last element of the path is a symbolic link,\u000a    stat will examine the symbolic link itself instead of the file\u000a    the link points to.\u000a\u000adir_fd and follow_symlinks may not be implemented\u000a  on your platform.  If they are unavailable, using them will raise a\u000a  NotImplementedError.\u000a\u000aIt's an error to use dir_fd or follow_symlinks when specifying path as\u000a  an open file descriptor.
p784
sg5
Vstat
p785
sg7
L2L
sa(dp786
g1
I01
sg187
Vstat_float_times([newval]) -> oldval\u000a\u000aDetermine whether os.[lf]stat represents time stamps as float objects.\u000a\u000aIf value is True, future calls to stat() return floats; if it is False,\u000afuture calls return ints.\u000aIf value is omitted, return the current setting.\u000a
p787
sg5
Vstat_float_times
p788
sg7
L2L
sa(dp789
g1
I01
sg2
(lp790
(dp791
g1
I01
sg5
g659
sg7
L5L
sa(dp792
g1
I01
sg5
g661
sg7
L5L
sa(dp793
g1
I01
sg5
g236
sg7
L5L
sa(dp794
g1
I01
sg187
V__dir__() -> list\u000adefault dir() implementation
p795
sg5
g241
sg7
L2L
sa(dp796
g1
I01
sg5
g232
sg7
L5L
sa(dp797
g1
I01
sg5
g244
sg7
L5L
sa(dp798
g1
I01
sg187
Vdefault object formatter
p799
sg5
g247
sg7
L2L
sa(dp800
g1
I01
sg5
g249
sg7
L5L
sa(dp801
g1
I01
sg5
g251
sg7
L5L
sa(dp802
g1
I01
sg5
g672
sg7
L5L
sa(dp803
g1
I01
sg187
Nsg5
g674
sg7
L2L
sa(dp804
g1
I01
sg5
g253
sg7
L5L
sa(dp805
g1
I01
sg5
g255
sg7
L5L
sa(dp806
g1
I01
sg5
g257
sg7
L5L
sa(dp807
g1
I01
sg5
g679
sg7
L5L
sa(dp808
g1
I01
sg5
g259
sg7
L5L
sa(dp809
g1
I01
sg5
g682
sg7
L5L
sa(dp810
g1
I01
sg5
g261
sg7
L5L
sa(dp811
g1
I01
sg5
g685
sg7
L5L
sa(dp812
g1
I01
sg5
g265
sg7
L5L
sa(dp813
g1
I01
sg187
VCreate and return a new object.  See help(type) for accurate signature.
p814
sg5
g268
sg7
L2L
sa(dp815
g1
I01
sg187
Nsg5
g271
sg7
L2L
sa(dp816
g1
I01
sg187
Vhelper for pickle
p817
sg5
g274
sg7
L2L
sa(dp818
g1
I01
sg5
g276
sg7
L5L
sa(dp819
g1
I01
sg5
g694
sg7
L5L
sa(dp820
g1
I01
sg5
g278
sg7
L5L
sa(dp821
g1
I01
sg187
V__sizeof__() -> int\u000asize of object in memory, in bytes
p822
sg5
g281
sg7
L2L
sa(dp823
g1
I01
sg5
g283
sg7
L5L
sa(dp824
g1
I01
sg187
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p825
sg5
g286
sg7
L2L
sa(dp826
g1
I01
sg187
VT.count(value) -> integer -- return number of occurrences of value
p827
sg5
g703
sg7
L2L
sa(dp828
g1
I01
sg187
VT.index(value, [start, [stop]]) -> integer -- return first index of value.\u000aRaises ValueError if the value is not present.
p829
sg5
g706
sg7
L2L
sa(dp830
g1
I01
sg5
g708
sg7
L5L
sa(dp831
g1
I01
sg5
g710
sg7
L5L
sa(dp832
g1
I01
sg5
g712
sg7
L5L
sa(dp833
g1
I01
sg5
Vst_atime
p834
sg7
L5L
sa(dp835
g1
I01
sg5
Vst_atime_ns
p836
sg7
L5L
sa(dp837
g1
I01
sg5
Vst_blksize
p838
sg7
L5L
sa(dp839
g1
I01
sg5
Vst_blocks
p840
sg7
L5L
sa(dp841
g1
I01
sg5
Vst_ctime
p842
sg7
L5L
sa(dp843
g1
I01
sg5
Vst_ctime_ns
p844
sg7
L5L
sa(dp845
g1
I01
sg5
Vst_dev
p846
sg7
L5L
sa(dp847
g1
I01
sg5
Vst_gid
p848
sg7
L5L
sa(dp849
g1
I01
sg5
Vst_ino
p850
sg7
L5L
sa(dp851
g1
I01
sg5
Vst_mode
p852
sg7
L5L
sa(dp853
g1
I01
sg5
Vst_mtime
p854
sg7
L5L
sa(dp855
g1
I01
sg5
Vst_mtime_ns
p856
sg7
L5L
sa(dp857
g1
I01
sg5
Vst_nlink
p858
sg7
L5L
sa(dp859
g1
I01
sg5
Vst_rdev
p860
sg7
L5L
sa(dp861
g1
I01
sg5
Vst_size
p862
sg7
L5L
sa(dp863
g1
I01
sg5
Vst_uid
p864
sg7
L5L
sasg187
Vstat_result: Result from stat, fstat, or lstat.\u000a\u000aThis object may be accessed either as a tuple of\u000a  (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime)\u000aor via the attributes st_mode, st_ino, st_dev, st_nlink, st_uid, and so on.\u000a\u000aPosix/windows: If your platform supports st_blksize, st_blocks, st_rdev,\u000aor st_flags, they are available as attributes only.\u000a\u000aSee os.stat for more information.
p865
sg5
Vstat_result
p866
sg7
L3L
sa(dp867
g1
I01
sg187
VPerform a statvfs system call on the given path.\u000a\u000apath may always be specified as a string.\u000aOn some platforms, path may also be specified as an open file descriptor.\u000a  If this functionality is unavailable, using it raises an exception.
p868
sg5
Vstatvfs
p869
sg7
L2L
sa(dp870
g1
I01
sg2
(lp871
(dp872
g1
I01
sg5
g659
sg7
L5L
sa(dp873
g1
I01
sg5
g661
sg7
L5L
sa(dp874
g1
I01
sg5
g236
sg7
L5L
sa(dp875
g1
I01
sg187
V__dir__() -> list\u000adefault dir() implementation
p876
sg5
g241
sg7
L2L
sa(dp877
g1
I01
sg5
g232
sg7
L5L
sa(dp878
g1
I01
sg5
g244
sg7
L5L
sa(dp879
g1
I01
sg187
Vdefault object formatter
p880
sg5
g247
sg7
L2L
sa(dp881
g1
I01
sg5
g249
sg7
L5L
sa(dp882
g1
I01
sg5
g251
sg7
L5L
sa(dp883
g1
I01
sg5
g672
sg7
L5L
sa(dp884
g1
I01
sg187
Nsg5
g674
sg7
L2L
sa(dp885
g1
I01
sg5
g253
sg7
L5L
sa(dp886
g1
I01
sg5
g255
sg7
L5L
sa(dp887
g1
I01
sg5
g257
sg7
L5L
sa(dp888
g1
I01
sg5
g679
sg7
L5L
sa(dp889
g1
I01
sg5
g259
sg7
L5L
sa(dp890
g1
I01
sg5
g682
sg7
L5L
sa(dp891
g1
I01
sg5
g261
sg7
L5L
sa(dp892
g1
I01
sg5
g685
sg7
L5L
sa(dp893
g1
I01
sg5
g265
sg7
L5L
sa(dp894
g1
I01
sg187
VCreate and return a new object.  See help(type) for accurate signature.
p895
sg5
g268
sg7
L2L
sa(dp896
g1
I01
sg187
Nsg5
g271
sg7
L2L
sa(dp897
g1
I01
sg187
Vhelper for pickle
p898
sg5
g274
sg7
L2L
sa(dp899
g1
I01
sg5
g276
sg7
L5L
sa(dp900
g1
I01
sg5
g694
sg7
L5L
sa(dp901
g1
I01
sg5
g278
sg7
L5L
sa(dp902
g1
I01
sg187
V__sizeof__() -> int\u000asize of object in memory, in bytes
p903
sg5
g281
sg7
L2L
sa(dp904
g1
I01
sg5
g283
sg7
L5L
sa(dp905
g1
I01
sg187
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p906
sg5
g286
sg7
L2L
sa(dp907
g1
I01
sg187
VT.count(value) -> integer -- return number of occurrences of value
p908
sg5
g703
sg7
L2L
sa(dp909
g1
I01
sg5
Vf_bavail
p910
sg7
L5L
sa(dp911
g1
I01
sg5
Vf_bfree
p912
sg7
L5L
sa(dp913
g1
I01
sg5
Vf_blocks
p914
sg7
L5L
sa(dp915
g1
I01
sg5
Vf_bsize
p916
sg7
L5L
sa(dp917
g1
I01
sg5
Vf_favail
p918
sg7
L5L
sa(dp919
g1
I01
sg5
Vf_ffree
p920
sg7
L5L
sa(dp921
g1
I01
sg5
Vf_files
p922
sg7
L5L
sa(dp923
g1
I01
sg5
Vf_flag
p924
sg7
L5L
sa(dp925
g1
I01
sg5
Vf_frsize
p926
sg7
L5L
sa(dp927
g1
I01
sg5
Vf_namemax
p928
sg7
L5L
sa(dp929
g1
I01
sg187
VT.index(value, [start, [stop]]) -> integer -- return first index of value.\u000aRaises ValueError if the value is not present.
p930
sg5
g706
sg7
L2L
sa(dp931
g1
I01
sg5
g708
sg7
L5L
sa(dp932
g1
I01
sg5
g710
sg7
L5L
sa(dp933
g1
I01
sg5
g712
sg7
L5L
sasg187
Vstatvfs_result: Result from statvfs or fstatvfs.\u000a\u000aThis object may be accessed either as a tuple of\u000a  (bsize, frsize, blocks, bfree, bavail, files, ffree, favail, flag, namemax),\u000aor via the attributes f_bsize, f_frsize, f_blocks, f_bfree, and so on.\u000a\u000aSee os.statvfs for more information.
p934
sg5
Vstatvfs_result
p935
sg7
L3L
sa(dp936
g1
I01
sg187
VTranslate an error code to a message string.
p937
sg5
g417
sg7
L2L
sa(dp938
g1
I01
sg187
VCreate a symbolic link pointing to src named dst.\u000a\u000atarget_is_directory is required on Windows if the target is to be\u000a  interpreted as a directory.  (On Windows, symlink requires\u000a  Windows 6.0 or greater, and raises a NotImplementedError otherwise.)\u000a  target_is_directory is ignored on non-Windows platforms.\u000a\u000aIf dir_fd is not None, it should be a file descriptor open to a directory,\u000a  and path should be relative; path will then be relative to that directory.\u000adir_fd may not be implemented on your platform.\u000a  If it is unavailable, using it will raise a NotImplementedError.
p939
sg5
Vsymlink
p940
sg7
L2L
sa(dp941
g1
I01
sg187
VForce write of everything to disk.
p942
sg5
Vsync
p943
sg7
L2L
sa(dp944
g1
I01
sg187
VReturn an integer-valued system configuration variable.
p945
sg5
Vsysconf
p946
sg7
L2L
sa(dp947
g1
I01
sg5
Vsysconf_names
p948
sg7
L5L
sa(dp949
g1
I01
sg187
VExecute the command in a subshell.
p950
sg5
Vsystem
p951
sg7
L2L
sa(dp952
g1
I01
sg187
VReturn the process group associated with the terminal specified by fd.
p953
sg5
Vtcgetpgrp
p954
sg7
L2L
sa(dp955
g1
I01
sg187
VSet the process group associated with the terminal specified by fd.
p956
sg5
Vtcsetpgrp
p957
sg7
L2L
sa(dp958
g1
I01
sg2
(lp959
(dp960
g1
I01
sg5
g659
sg7
L5L
sa(dp961
g1
I01
sg5
g661
sg7
L5L
sa(dp962
g1
I01
sg5
g236
sg7
L5L
sa(dp963
g1
I01
sg187
V__dir__() -> list\u000adefault dir() implementation
p964
sg5
g241
sg7
L2L
sa(dp965
g1
I01
sg5
g232
sg7
L5L
sa(dp966
g1
I01
sg5
g244
sg7
L5L
sa(dp967
g1
I01
sg187
Vdefault object formatter
p968
sg5
g247
sg7
L2L
sa(dp969
g1
I01
sg5
g249
sg7
L5L
sa(dp970
g1
I01
sg5
g251
sg7
L5L
sa(dp971
g1
I01
sg5
g672
sg7
L5L
sa(dp972
g1
I01
sg187
Nsg5
g674
sg7
L2L
sa(dp973
g1
I01
sg5
g253
sg7
L5L
sa(dp974
g1
I01
sg5
g255
sg7
L5L
sa(dp975
g1
I01
sg5
g257
sg7
L5L
sa(dp976
g1
I01
sg5
g679
sg7
L5L
sa(dp977
g1
I01
sg5
g259
sg7
L5L
sa(dp978
g1
I01
sg5
g682
sg7
L5L
sa(dp979
g1
I01
sg5
g261
sg7
L5L
sa(dp980
g1
I01
sg5
g685
sg7
L5L
sa(dp981
g1
I01
sg5
g265
sg7
L5L
sa(dp982
g1
I01
sg187
VCreate and return a new object.  See help(type) for accurate signature.
p983
sg5
g268
sg7
L2L
sa(dp984
g1
I01
sg187
Nsg5
g271
sg7
L2L
sa(dp985
g1
I01
sg187
Vhelper for pickle
p986
sg5
g274
sg7
L2L
sa(dp987
g1
I01
sg5
g276
sg7
L5L
sa(dp988
g1
I01
sg5
g694
sg7
L5L
sa(dp989
g1
I01
sg5
g278
sg7
L5L
sa(dp990
g1
I01
sg187
V__sizeof__() -> int\u000asize of object in memory, in bytes
p991
sg5
g281
sg7
L2L
sa(dp992
g1
I01
sg5
g283
sg7
L5L
sa(dp993
g1
I01
sg187
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p994
sg5
g286
sg7
L2L
sa(dp995
g1
I01
sg5
Vcolumns
p996
sg7
L5L
sa(dp997
g1
I01
sg187
VT.count(value) -> integer -- return number of occurrences of value
p998
sg5
g703
sg7
L2L
sa(dp999
g1
I01
sg187
VT.index(value, [start, [stop]]) -> integer -- return first index of value.\u000aRaises ValueError if the value is not present.
p1000
sg5
g706
sg7
L2L
sa(dp1001
g1
I01
sg5
Vlines
p1002
sg7
L5L
sa(dp1003
g1
I01
sg5
g708
sg7
L5L
sa(dp1004
g1
I01
sg5
g710
sg7
L5L
sa(dp1005
g1
I01
sg5
g712
sg7
L5L
sasg187
VA tuple of (columns, lines) for holding terminal window size
p1006
sg5
Vterminal_size
p1007
sg7
L3L
sa(dp1008
g1
I01
sg187
VReturn a collection containing process timing information.\u000a\u000aThe object returned behaves like a named tuple with these fields:\u000a  (utime, stime, cutime, cstime, elapsed_time)\u000aAll fields are floating point numbers.
p1009
sg5
Vtimes
p1010
sg7
L2L
sa(dp1011
g1
I01
sg2
(lp1012
(dp1013
g1
I01
sg5
g659
sg7
L5L
sa(dp1014
g1
I01
sg5
g661
sg7
L5L
sa(dp1015
g1
I01
sg5
g236
sg7
L5L
sa(dp1016
g1
I01
sg187
V__dir__() -> list\u000adefault dir() implementation
p1017
sg5
g241
sg7
L2L
sa(dp1018
g1
I01
sg5
g232
sg7
L5L
sa(dp1019
g1
I01
sg5
g244
sg7
L5L
sa(dp1020
g1
I01
sg187
Vdefault object formatter
p1021
sg5
g247
sg7
L2L
sa(dp1022
g1
I01
sg5
g249
sg7
L5L
sa(dp1023
g1
I01
sg5
g251
sg7
L5L
sa(dp1024
g1
I01
sg5
g672
sg7
L5L
sa(dp1025
g1
I01
sg187
Nsg5
g674
sg7
L2L
sa(dp1026
g1
I01
sg5
g253
sg7
L5L
sa(dp1027
g1
I01
sg5
g255
sg7
L5L
sa(dp1028
g1
I01
sg5
g257
sg7
L5L
sa(dp1029
g1
I01
sg5
g679
sg7
L5L
sa(dp1030
g1
I01
sg5
g259
sg7
L5L
sa(dp1031
g1
I01
sg5
g682
sg7
L5L
sa(dp1032
g1
I01
sg5
g261
sg7
L5L
sa(dp1033
g1
I01
sg5
g685
sg7
L5L
sa(dp1034
g1
I01
sg5
g265
sg7
L5L
sa(dp1035
g1
I01
sg187
VCreate and return a new object.  See help(type) for accurate signature.
p1036
sg5
g268
sg7
L2L
sa(dp1037
g1
I01
sg187
Nsg5
g271
sg7
L2L
sa(dp1038
g1
I01
sg187
Vhelper for pickle
p1039
sg5
g274
sg7
L2L
sa(dp1040
g1
I01
sg5
g276
sg7
L5L
sa(dp1041
g1
I01
sg5
g694
sg7
L5L
sa(dp1042
g1
I01
sg5
g278
sg7
L5L
sa(dp1043
g1
I01
sg187
V__sizeof__() -> int\u000asize of object in memory, in bytes
p1044
sg5
g281
sg7
L2L
sa(dp1045
g1
I01
sg5
g283
sg7
L5L
sa(dp1046
g1
I01
sg187
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p1047
sg5
g286
sg7
L2L
sa(dp1048
g1
I01
sg5
Vchildren_system
p1049
sg7
L5L
sa(dp1050
g1
I01
sg5
Vchildren_user
p1051
sg7
L5L
sa(dp1052
g1
I01
sg187
VT.count(value) -> integer -- return number of occurrences of value
p1053
sg5
g703
sg7
L2L
sa(dp1054
g1
I01
sg5
Velapsed
p1055
sg7
L5L
sa(dp1056
g1
I01
sg187
VT.index(value, [start, [stop]]) -> integer -- return first index of value.\u000aRaises ValueError if the value is not present.
p1057
sg5
g706
sg7
L2L
sa(dp1058
g1
I01
sg5
g708
sg7
L5L
sa(dp1059
g1
I01
sg5
g710
sg7
L5L
sa(dp1060
g1
I01
sg5
g712
sg7
L5L
sa(dp1061
g1
I01
sg5
g951
sg7
L5L
sa(dp1062
g1
I01
sg5
Vuser
p1063
sg7
L5L
sasg187
Vtimes_result: Result from os.times().\u000a\u000aThis object may be accessed either as a tuple of\u000a  (user, system, children_user, children_system, elapsed),\u000aor via the attributes user, system, children_user, children_system,\u000aand elapsed.\u000a\u000aSee os.times for more information.
p1064
sg5
Vtimes_result
p1065
sg7
L3L
sa(dp1066
g1
I01
sg187
VTruncate a file, specified by path, to a specific length.\u000a\u000aOn some platforms, path may also be specified as an open file descriptor.\u000a  If this functionality is unavailable, using it raises an exception.
p1067
sg5
Vtruncate
p1068
sg7
L2L
sa(dp1069
g1
I01
sg187
VReturn the name of the terminal device connected to 'fd'.\u000a\u000a  fd\u000a    Integer file descriptor handle.
p1070
sg5
Vttyname
p1071
sg7
L2L
sa(dp1072
g1
I01
sg187
VSet the current numeric umask and return the previous umask.
p1073
sg5
Vumask
p1074
sg7
L2L
sa(dp1075
g1
I01
sg187
VReturn an object identifying the current operating system.\u000a\u000aThe object behaves like a named tuple with the following fields:\u000a  (sysname, nodename, release, version, machine)
p1076
sg5
Vuname
p1077
sg7
L2L
sa(dp1078
g1
I01
sg2
(lp1079
(dp1080
g1
I01
sg5
g659
sg7
L5L
sa(dp1081
g1
I01
sg5
g661
sg7
L5L
sa(dp1082
g1
I01
sg5
g236
sg7
L5L
sa(dp1083
g1
I01
sg187
V__dir__() -> list\u000adefault dir() implementation
p1084
sg5
g241
sg7
L2L
sa(dp1085
g1
I01
sg5
g232
sg7
L5L
sa(dp1086
g1
I01
sg5
g244
sg7
L5L
sa(dp1087
g1
I01
sg187
Vdefault object formatter
p1088
sg5
g247
sg7
L2L
sa(dp1089
g1
I01
sg5
g249
sg7
L5L
sa(dp1090
g1
I01
sg5
g251
sg7
L5L
sa(dp1091
g1
I01
sg5
g672
sg7
L5L
sa(dp1092
g1
I01
sg187
Nsg5
g674
sg7
L2L
sa(dp1093
g1
I01
sg5
g253
sg7
L5L
sa(dp1094
g1
I01
sg5
g255
sg7
L5L
sa(dp1095
g1
I01
sg5
g257
sg7
L5L
sa(dp1096
g1
I01
sg5
g679
sg7
L5L
sa(dp1097
g1
I01
sg5
g259
sg7
L5L
sa(dp1098
g1
I01
sg5
g682
sg7
L5L
sa(dp1099
g1
I01
sg5
g261
sg7
L5L
sa(dp1100
g1
I01
sg5
g685
sg7
L5L
sa(dp1101
g1
I01
sg5
g265
sg7
L5L
sa(dp1102
g1
I01
sg187
VCreate and return a new object.  See help(type) for accurate signature.
p1103
sg5
g268
sg7
L2L
sa(dp1104
g1
I01
sg187
Nsg5
g271
sg7
L2L
sa(dp1105
g1
I01
sg187
Vhelper for pickle
p1106
sg5
g274
sg7
L2L
sa(dp1107
g1
I01
sg5
g276
sg7
L5L
sa(dp1108
g1
I01
sg5
g694
sg7
L5L
sa(dp1109
g1
I01
sg5
g278
sg7
L5L
sa(dp1110
g1
I01
sg187
V__sizeof__() -> int\u000asize of object in memory, in bytes
p1111
sg5
g281
sg7
L2L
sa(dp1112
g1
I01
sg5
g283
sg7
L5L
sa(dp1113
g1
I01
sg187
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p1114
sg5
g286
sg7
L2L
sa(dp1115
g1
I01
sg187
VT.count(value) -> integer -- return number of occurrences of value
p1116
sg5
g703
sg7
L2L
sa(dp1117
g1
I01
sg187
VT.index(value, [start, [stop]]) -> integer -- return first index of value.\u000aRaises ValueError if the value is not present.
p1118
sg5
g706
sg7
L2L
sa(dp1119
g1
I01
sg5
Vmachine
p1120
sg7
L5L
sa(dp1121
g1
I01
sg5
g708
sg7
L5L
sa(dp1122
g1
I01
sg5
g710
sg7
L5L
sa(dp1123
g1
I01
sg5
g712
sg7
L5L
sa(dp1124
g1
I01
sg5
Vnodename
p1125
sg7
L5L
sa(dp1126
g1
I01
sg5
Vrelease
p1127
sg7
L5L
sa(dp1128
g1
I01
sg5
Vsysname
p1129
sg7
L5L
sa(dp1130
g1
I01
sg5
Vversion
p1131
sg7
L5L
sasg187
Vuname_result: Result from os.uname().\u000a\u000aThis object may be accessed either as a tuple of\u000a  (sysname, nodename, release, version, machine),\u000aor via the attributes sysname, nodename, release, version, and machine.\u000a\u000aSee os.uname for more information.
p1132
sg5
Vuname_result
p1133
sg7
L3L
sa(dp1134
g1
I01
sg187
VRemove a file (same as remove()).\u000a\u000aIf dir_fd is not None, it should be a file descriptor open to a directory,\u000a  and path should be relative; path will then be relative to that directory.\u000adir_fd may not be implemented on your platform.\u000a  If it is unavailable, using it will raise a NotImplementedError.
p1135
sg5
Vunlink
p1136
sg7
L2L
sa(dp1137
g1
I01
sg187
VDelete an environment variable.
p1138
sg5
Vunsetenv
p1139
sg7
L2L
sa(dp1140
g1
I01
sg187
VReturn a bytes object containing random bytes suitable for cryptographic use.
p1141
sg5
Vurandom
p1142
sg7
L2L
sa(dp1143
g1
I01
sg187
VSet the access and modified time of path.\u000a\u000apath may always be specified as a string.\u000aOn some platforms, path may also be specified as an open file descriptor.\u000a  If this functionality is unavailable, using it raises an exception.\u000a\u000aIf times is not None, it must be a tuple (atime, mtime);\u000a    atime and mtime should be expressed as float seconds since the epoch.\u000aIf ns is specified, it must be a tuple (atime_ns, mtime_ns);\u000a    atime_ns and mtime_ns should be expressed as integer nanoseconds\u000a    since the epoch.\u000aIf times is None and ns is unspecified, utime uses the current time.\u000aSpecifying tuples for both times and ns is an error.\u000a\u000aIf dir_fd is not None, it should be a file descriptor open to a directory,\u000a  and path should be relative; path will then be relative to that directory.\u000aIf follow_symlinks is False, and the last element of the path is a symbolic\u000a  link, utime will modify the symbolic link itself instead of the file the\u000a  link points to.\u000aIt is an error to use dir_fd or follow_symlinks when specifying path\u000a  as an open file descriptor.\u000adir_fd and follow_symlinks may not be available on your platform.\u000a  If they are unavailable, using them will raise a NotImplementedError.
p1144
sg5
Vutime
p1145
sg7
L2L
sa(dp1146
g1
I01
sg187
VWait for completion of a child process.\u000a\u000aReturns a tuple of information about the child process:\u000a    (pid, status)
p1147
sg5
Vwait
p1148
sg7
L2L
sa(dp1149
g1
I01
sg187
VWait for completion of a child process.\u000a\u000aReturns a tuple of information about the child process:\u000a  (pid, status, rusage)
p1150
sg5
Vwait3
p1151
sg7
L2L
sa(dp1152
g1
I01
sg187
VWait for completion of a specific child process.\u000a\u000aReturns a tuple of information about the child process:\u000a  (pid, status, rusage)
p1153
sg5
Vwait4
p1154
sg7
L2L
sa(dp1155
g1
I01
sg187
VReturns the result of waiting for a process or processes.\u000a\u000a  idtype\u000a    Must be one of be P_PID, P_PGID or P_ALL.\u000a  id\u000a    The id to wait on.\u000a  options\u000a    Constructed from the ORing of one or more of WEXITED, WSTOPPED\u000a    or WCONTINUED and additionally may be ORed with WNOHANG or WNOWAIT.\u000a\u000aReturns either waitid_result or None if WNOHANG is specified and there are\u000ano children in a waitable state.
p1156
sg5
Vwaitid
p1157
sg7
L2L
sa(dp1158
g1
I01
sg2
(lp1159
(dp1160
g1
I01
sg5
g659
sg7
L5L
sa(dp1161
g1
I01
sg5
g661
sg7
L5L
sa(dp1162
g1
I01
sg5
g236
sg7
L5L
sa(dp1163
g1
I01
sg187
V__dir__() -> list\u000adefault dir() implementation
p1164
sg5
g241
sg7
L2L
sa(dp1165
g1
I01
sg5
g232
sg7
L5L
sa(dp1166
g1
I01
sg5
g244
sg7
L5L
sa(dp1167
g1
I01
sg187
Vdefault object formatter
p1168
sg5
g247
sg7
L2L
sa(dp1169
g1
I01
sg5
g249
sg7
L5L
sa(dp1170
g1
I01
sg5
g251
sg7
L5L
sa(dp1171
g1
I01
sg5
g672
sg7
L5L
sa(dp1172
g1
I01
sg187
Nsg5
g674
sg7
L2L
sa(dp1173
g1
I01
sg5
g253
sg7
L5L
sa(dp1174
g1
I01
sg5
g255
sg7
L5L
sa(dp1175
g1
I01
sg5
g257
sg7
L5L
sa(dp1176
g1
I01
sg5
g679
sg7
L5L
sa(dp1177
g1
I01
sg5
g259
sg7
L5L
sa(dp1178
g1
I01
sg5
g682
sg7
L5L
sa(dp1179
g1
I01
sg5
g261
sg7
L5L
sa(dp1180
g1
I01
sg5
g685
sg7
L5L
sa(dp1181
g1
I01
sg5
g265
sg7
L5L
sa(dp1182
g1
I01
sg187
VCreate and return a new object.  See help(type) for accurate signature.
p1183
sg5
g268
sg7
L2L
sa(dp1184
g1
I01
sg187
Nsg5
g271
sg7
L2L
sa(dp1185
g1
I01
sg187
Vhelper for pickle
p1186
sg5
g274
sg7
L2L
sa(dp1187
g1
I01
sg5
g276
sg7
L5L
sa(dp1188
g1
I01
sg5
g694
sg7
L5L
sa(dp1189
g1
I01
sg5
g278
sg7
L5L
sa(dp1190
g1
I01
sg187
V__sizeof__() -> int\u000asize of object in memory, in bytes
p1191
sg5
g281
sg7
L2L
sa(dp1192
g1
I01
sg5
g283
sg7
L5L
sa(dp1193
g1
I01
sg187
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p1194
sg5
g286
sg7
L2L
sa(dp1195
g1
I01
sg187
VT.count(value) -> integer -- return number of occurrences of value
p1196
sg5
g703
sg7
L2L
sa(dp1197
g1
I01
sg187
VT.index(value, [start, [stop]]) -> integer -- return first index of value.\u000aRaises ValueError if the value is not present.
p1198
sg5
g706
sg7
L2L
sa(dp1199
g1
I01
sg5
g708
sg7
L5L
sa(dp1200
g1
I01
sg5
g710
sg7
L5L
sa(dp1201
g1
I01
sg5
g712
sg7
L5L
sa(dp1202
g1
I01
sg5
Vsi_code
p1203
sg7
L5L
sa(dp1204
g1
I01
sg5
Vsi_pid
p1205
sg7
L5L
sa(dp1206
g1
I01
sg5
Vsi_signo
p1207
sg7
L5L
sa(dp1208
g1
I01
sg5
Vsi_status
p1209
sg7
L5L
sa(dp1210
g1
I01
sg5
Vsi_uid
p1211
sg7
L5L
sasg187
Vwaitid_result: Result from waitid.\u000a\u000aThis object may be accessed either as a tuple of\u000a  (si_pid, si_uid, si_signo, si_status, si_code),\u000aor via the attributes si_pid, si_uid, and so on.\u000a\u000aSee os.waitid for more information.
p1212
sg5
Vwaitid_result
p1213
sg7
L3L
sa(dp1214
g1
I01
sg187
VWait for completion of a given child process.\u000a\u000aReturns a tuple of information regarding the child process:\u000a    (pid, status)\u000a\u000aThe options argument is ignored on Windows.
p1215
sg5
Vwaitpid
p1216
sg7
L2L
sa(dp1217
g1
I01
sg187
VWrite a bytes object to a file descriptor.
p1218
sg5
Vwrite
p1219
sg7
L2L
sa(dp1220
g1
I01
sg187
VIterate over buffers, and write the contents of each to a file descriptor.\u000a\u000aReturns the total number of bytes written.\u000abuffers must be a sequence of bytes-like objects.
p1221
sg5
Vwritev
p1222
sg7
L2L
sasg187
VThis module provides access to operating system functionality that is\u000astandardized by the C Standard and the POSIX standard (a thinly\u000adisguised Unix interface).  Refer to the library manual and\u000acorresponding Unix manual entries for more information on calls.
p1223
sg5
Vposix
p1224
sg7
L1L
s.