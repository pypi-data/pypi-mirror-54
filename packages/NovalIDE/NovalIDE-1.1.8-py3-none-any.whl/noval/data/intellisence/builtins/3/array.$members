(dp0
Vis_builtin
p1
I01
sVchilds
p2
(lp3
(dp4
g1
I01
sg2
(lp5
(dp6
g1
I01
sVname
p7
V__add__
p8
sVtype
p9
L5L
sa(dp10
g1
I01
sg7
V__contains__
p11
sg9
L5L
sa(dp12
g1
I01
sVdoc
p13
VReturn a copy of the array.
p14
sg7
V__copy__
p15
sg9
L2L
sa(dp16
g1
I01
sg13
VReturn a copy of the array.
p17
sg7
V__deepcopy__
p18
sg9
L2L
sa(dp19
g1
I01
sg7
V__delattr__
p20
sg9
L5L
sa(dp21
g1
I01
sg7
V__delitem__
p22
sg9
L5L
sa(dp23
g1
I01
sg13
V__dir__() -> list\u000adefault dir() implementation
p24
sg7
V__dir__
p25
sg9
L2L
sa(dp26
g1
I01
sg7
V__doc__
p27
sg9
L5L
sa(dp28
g1
I01
sg7
V__eq__
p29
sg9
L5L
sa(dp30
g1
I01
sg13
Vdefault object formatter
p31
sg7
V__format__
p32
sg9
L2L
sa(dp33
g1
I01
sg7
V__ge__
p34
sg9
L5L
sa(dp35
g1
I01
sg7
V__getattribute__
p36
sg9
L5L
sa(dp37
g1
I01
sg7
V__getitem__
p38
sg9
L5L
sa(dp39
g1
I01
sg7
V__gt__
p40
sg9
L5L
sa(dp41
g1
I01
sg7
V__hash__
p42
sg9
L5L
sa(dp43
g1
I01
sg7
V__iadd__
p44
sg9
L5L
sa(dp45
g1
I01
sg7
V__imul__
p46
sg9
L5L
sa(dp47
g1
I01
sg7
V__init__
p48
sg9
L5L
sa(dp49
g1
I01
sg7
V__iter__
p50
sg9
L5L
sa(dp51
g1
I01
sg7
V__le__
p52
sg9
L5L
sa(dp53
g1
I01
sg7
V__len__
p54
sg9
L5L
sa(dp55
g1
I01
sg7
V__lt__
p56
sg9
L5L
sa(dp57
g1
I01
sg7
V__mul__
p58
sg9
L5L
sa(dp59
g1
I01
sg7
V__ne__
p60
sg9
L5L
sa(dp61
g1
I01
sg13
VCreate and return a new object.  See help(type) for accurate signature.
p62
sg7
V__new__
p63
sg9
L2L
sa(dp64
g1
I01
sg13
Vhelper for pickle
p65
sg7
V__reduce__
p66
sg9
L2L
sa(dp67
g1
I01
sg13
VReturn state information for pickling.
p68
sg7
V__reduce_ex__
p69
sg9
L2L
sa(dp70
g1
I01
sg7
V__repr__
p71
sg9
L5L
sa(dp72
g1
I01
sg7
V__rmul__
p73
sg9
L5L
sa(dp74
g1
I01
sg7
V__setattr__
p75
sg9
L5L
sa(dp76
g1
I01
sg7
V__setitem__
p77
sg9
L5L
sa(dp78
g1
I01
sg13
VSize of the array in memory, in bytes.
p79
sg7
V__sizeof__
p80
sg9
L2L
sa(dp81
g1
I01
sg7
V__str__
p82
sg9
L5L
sa(dp83
g1
I01
sg13
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p84
sg7
V__subclasshook__
p85
sg9
L2L
sa(dp86
g1
I01
sg13
VAppend new value v to the end of the array.
p87
sg7
Vappend
p88
sg9
L2L
sa(dp89
g1
I01
sg13
VReturn a tuple (address, length) giving the current memory address and the length in items of the buffer used to hold array's contents.\u000a\u000aThe length should be multiplied by the itemsize attribute to calculate\u000athe buffer length in bytes.
p90
sg7
Vbuffer_info
p91
sg9
L2L
sa(dp92
g1
I01
sg13
VByteswap all items of the array.\u000a\u000aIf the items in the array are not 1, 2, 4, or 8 bytes in size, RuntimeError is\u000araised.
p93
sg7
Vbyteswap
p94
sg9
L2L
sa(dp95
g1
I01
sg13
VReturn number of occurrences of v in the array.
p96
sg7
Vcount
p97
sg9
L2L
sa(dp98
g1
I01
sg13
VAppend items to the end of the array.
p99
sg7
Vextend
p100
sg9
L2L
sa(dp101
g1
I01
sg13
VAppends items from the string, interpreting it as an array of machine values, as if it had been read from a file using the fromfile() method).
p102
sg7
Vfrombytes
p103
sg9
L2L
sa(dp104
g1
I01
sg13
VRead n objects from the file object f and append them to the end of the array.
p105
sg7
Vfromfile
p106
sg9
L2L
sa(dp107
g1
I01
sg13
VAppend items to array from list.
p108
sg7
Vfromlist
p109
sg9
L2L
sa(dp110
g1
I01
sg13
VAppends items from the string, interpreting it as an array of machine values, as if it had been read from a file using the fromfile() method).\u000a\u000aThis method is deprecated. Use frombytes instead.
p111
sg7
Vfromstring
p112
sg9
L2L
sa(dp113
g1
I01
sg13
VExtends this array with data from the unicode string ustr.\u000a\u000aThe array must be a unicode type array; otherwise a ValueError is raised.\u000aUse array.frombytes(ustr.encode(...)) to append Unicode data to an array of\u000asome other type.
p114
sg7
Vfromunicode
p115
sg9
L2L
sa(dp116
g1
I01
sg13
VReturn index of first occurrence of v in the array.
p117
sg7
Vindex
p118
sg9
L2L
sa(dp119
g1
I01
sg13
VInsert a new item v into the array before position i.
p120
sg7
Vinsert
p121
sg9
L2L
sa(dp122
g1
I01
sg7
Vitemsize
p123
sg9
L5L
sa(dp124
g1
I01
sg13
VReturn the i-th element and delete it from the array.\u000a\u000ai defaults to -1.
p125
sg7
Vpop
p126
sg9
L2L
sa(dp127
g1
I01
sg13
VRemove the first occurrence of v in the array.
p128
sg7
Vremove
p129
sg9
L2L
sa(dp130
g1
I01
sg13
VReverse the order of the items in the array.
p131
sg7
Vreverse
p132
sg9
L2L
sa(dp133
g1
I01
sg13
VConvert the array to an array of machine values and return the bytes representation.
p134
sg7
Vtobytes
p135
sg9
L2L
sa(dp136
g1
I01
sg13
VWrite all items (as machine values) to the file object f.
p137
sg7
Vtofile
p138
sg9
L2L
sa(dp139
g1
I01
sg13
VConvert array to an ordinary list with the same items.
p140
sg7
Vtolist
p141
sg9
L2L
sa(dp142
g1
I01
sg13
VConvert the array to an array of machine values and return the bytes representation.\u000a\u000aThis method is deprecated. Use tobytes instead.
p143
sg7
Vtostring
p144
sg9
L2L
sa(dp145
g1
I01
sg13
VExtends this array with data from the unicode string ustr.\u000a\u000aConvert the array to a unicode string.  The array must be a unicode type array;\u000aotherwise a ValueError is raised.  Use array.tobytes().decode() to obtain a\u000aunicode string from an array of some other type.
p146
sg7
Vtounicode
p147
sg9
L2L
sa(dp148
g1
I01
sg7
Vtypecode
p149
sg9
L5L
sasg13
Varray(typecode [, initializer]) -> array\u000a\u000aReturn a new array whose items are restricted by typecode, and\u000ainitialized from the optional initializer value, which must be a list,\u000astring or iterable over elements of the appropriate type.\u000a\u000aArrays represent basic values and behave very much like lists, except\u000athe type of objects stored in them is constrained. The type is specified\u000aat object creation time by using a type code, which is a single character.\u000aThe following type codes are defined:\u000a\u000a    Type code   C Type             Minimum size in bytes \u000a    'b'         signed integer     1 \u000a    'B'         unsigned integer   1 \u000a    'u'         Unicode character  2 (see note) \u000a    'h'         signed integer     2 \u000a    'H'         unsigned integer   2 \u000a    'i'         signed integer     2 \u000a    'I'         unsigned integer   2 \u000a    'l'         signed integer     4 \u000a    'L'         unsigned integer   4 \u000a    'q'         signed integer     8 (see note) \u000a    'Q'         unsigned integer   8 (see note) \u000a    'f'         floating point     4 \u000a    'd'         floating point     8 \u000a\u000aNOTE: The 'u' typecode corresponds to Python's unicode character. On \u000anarrow builds this is 2-bytes on wide builds this is 4-bytes.\u000a\u000aNOTE: The 'q' and 'Q' type codes are only available if the platform \u000aC compiler used to build Python supports 'long long', or, on Windows, \u000a'__int64'.\u000a\u000aMethods:\u000a\u000aappend() -- append a new item to the end of the array\u000abuffer_info() -- return information giving the current memory info\u000abyteswap() -- byteswap all the items of the array\u000acount() -- return number of occurrences of an object\u000aextend() -- extend array by appending multiple elements from an iterable\u000afromfile() -- read items from a file object\u000afromlist() -- append items from the list\u000afrombytes() -- append items from the string\u000aindex() -- return index of first occurrence of an object\u000ainsert() -- insert a new item into the array at a provided position\u000apop() -- remove and return item (default last)\u000aremove() -- remove first occurrence of an object\u000areverse() -- reverse the order of the items in the array\u000atofile() -- write all items to a file object\u000atolist() -- return the array converted to an ordinary list\u000atobytes() -- return the array converted to a string\u000a\u000aAttributes:\u000a\u000atypecode -- the typecode character used to create the array\u000aitemsize -- the length in bytes of one array item\u000a
p150
sg7
VArrayType
p151
sg9
L3L
sa(dp152
g1
I01
sg7
g27
sg9
L5L
sa(dp153
g1
I01
sg2
(lp154
(dp155
g1
I01
sg7
g20
sg9
L5L
sa(dp156
g1
I01
sg7
V__dict__
p157
sg9
L5L
sa(dp158
g1
I01
sg13
V__dir__() -> list\u000adefault dir() implementation
p159
sg7
g25
sg9
L2L
sa(dp160
g1
I01
sg7
g27
sg9
L5L
sa(dp161
g1
I01
sg7
g29
sg9
L5L
sa(dp162
g1
I01
sg13
Vdefault object formatter
p163
sg7
g32
sg9
L2L
sa(dp164
g1
I01
sg7
g34
sg9
L5L
sa(dp165
g1
I01
sg7
g36
sg9
L5L
sa(dp166
g1
I01
sg7
g40
sg9
L5L
sa(dp167
g1
I01
sg7
g42
sg9
L5L
sa(dp168
g1
I01
sg7
g48
sg9
L5L
sa(dp169
g1
I01
sg7
g52
sg9
L5L
sa(dp170
g1
I01
sg7
g56
sg9
L5L
sa(dp171
g1
I01
sg7
V__module__
p172
sg9
L5L
sa(dp173
g1
I01
sg7
g60
sg9
L5L
sa(dp174
g1
I01
sg13
VCreate and return a new object.  See help(type) for accurate signature.
p175
sg7
g63
sg9
L2L
sa(dp176
g1
I01
sg13
Vhelper for pickle
p177
sg7
g66
sg9
L2L
sa(dp178
g1
I01
sg13
Vhelper for pickle
p179
sg7
g69
sg9
L2L
sa(dp180
g1
I01
sg7
g71
sg9
L5L
sa(dp181
g1
I01
sg7
g75
sg9
L5L
sa(dp182
g1
I01
sg13
V__sizeof__() -> int\u000asize of object in memory, in bytes
p183
sg7
g80
sg9
L2L
sa(dp184
g1
I01
sg7
g82
sg9
L5L
sa(dp185
g1
I01
sg13
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p186
sg7
g85
sg9
L2L
sa(dp187
g1
I01
sg7
V__weakref__
p188
sg9
L5L
sa(dp189
g1
I01
sg7
Vcreate_module
p190
sg9
L5L
sa(dp191
g1
I01
sg7
Vexec_module
p192
sg9
L5L
sa(dp193
g1
I01
sg7
Vfind_module
p194
sg9
L5L
sa(dp195
g1
I01
sg7
Vfind_spec
p196
sg9
L5L
sa(dp197
g1
I01
sg7
Vget_code
p198
sg9
L5L
sa(dp199
g1
I01
sg7
Vget_source
p200
sg9
L5L
sa(dp201
g1
I01
sg7
Vis_package
p202
sg9
L5L
sa(dp203
g1
I01
sg7
Vload_module
p204
sg9
L5L
sa(dp205
g1
I01
sg7
Vmodule_repr
p206
sg9
L5L
sasg13
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p207
sg7
V__loader__
p208
sg9
L3L
sa(dp209
g1
I01
sg7
V__name__
p210
sg9
L5L
sa(dp211
g1
I01
sg7
V__package__
p212
sg9
L5L
sa(dp213
g1
I01
sg7
V__spec__
p214
sg9
L5L
sa(dp215
g1
I01
sg13
VInternal. Used for pickling support.
p216
sg7
V_array_reconstructor
p217
sg9
L2L
sa(dp218
g1
I01
sg2
(lp219
(dp220
g1
I01
sg7
g8
sg9
L5L
sa(dp221
g1
I01
sg7
g11
sg9
L5L
sa(dp222
g1
I01
sg13
VReturn a copy of the array.
p223
sg7
g15
sg9
L2L
sa(dp224
g1
I01
sg13
VReturn a copy of the array.
p225
sg7
g18
sg9
L2L
sa(dp226
g1
I01
sg7
g20
sg9
L5L
sa(dp227
g1
I01
sg7
g22
sg9
L5L
sa(dp228
g1
I01
sg13
V__dir__() -> list\u000adefault dir() implementation
p229
sg7
g25
sg9
L2L
sa(dp230
g1
I01
sg7
g27
sg9
L5L
sa(dp231
g1
I01
sg7
g29
sg9
L5L
sa(dp232
g1
I01
sg13
Vdefault object formatter
p233
sg7
g32
sg9
L2L
sa(dp234
g1
I01
sg7
g34
sg9
L5L
sa(dp235
g1
I01
sg7
g36
sg9
L5L
sa(dp236
g1
I01
sg7
g38
sg9
L5L
sa(dp237
g1
I01
sg7
g40
sg9
L5L
sa(dp238
g1
I01
sg7
g42
sg9
L5L
sa(dp239
g1
I01
sg7
g44
sg9
L5L
sa(dp240
g1
I01
sg7
g46
sg9
L5L
sa(dp241
g1
I01
sg7
g48
sg9
L5L
sa(dp242
g1
I01
sg7
g50
sg9
L5L
sa(dp243
g1
I01
sg7
g52
sg9
L5L
sa(dp244
g1
I01
sg7
g54
sg9
L5L
sa(dp245
g1
I01
sg7
g56
sg9
L5L
sa(dp246
g1
I01
sg7
g58
sg9
L5L
sa(dp247
g1
I01
sg7
g60
sg9
L5L
sa(dp248
g1
I01
sg13
VCreate and return a new object.  See help(type) for accurate signature.
p249
sg7
g63
sg9
L2L
sa(dp250
g1
I01
sg13
Vhelper for pickle
p251
sg7
g66
sg9
L2L
sa(dp252
g1
I01
sg13
VReturn state information for pickling.
p253
sg7
g69
sg9
L2L
sa(dp254
g1
I01
sg7
g71
sg9
L5L
sa(dp255
g1
I01
sg7
g73
sg9
L5L
sa(dp256
g1
I01
sg7
g75
sg9
L5L
sa(dp257
g1
I01
sg7
g77
sg9
L5L
sa(dp258
g1
I01
sg13
VSize of the array in memory, in bytes.
p259
sg7
g80
sg9
L2L
sa(dp260
g1
I01
sg7
g82
sg9
L5L
sa(dp261
g1
I01
sg13
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p262
sg7
g85
sg9
L2L
sa(dp263
g1
I01
sg13
VAppend new value v to the end of the array.
p264
sg7
g88
sg9
L2L
sa(dp265
g1
I01
sg13
VReturn a tuple (address, length) giving the current memory address and the length in items of the buffer used to hold array's contents.\u000a\u000aThe length should be multiplied by the itemsize attribute to calculate\u000athe buffer length in bytes.
p266
sg7
g91
sg9
L2L
sa(dp267
g1
I01
sg13
VByteswap all items of the array.\u000a\u000aIf the items in the array are not 1, 2, 4, or 8 bytes in size, RuntimeError is\u000araised.
p268
sg7
g94
sg9
L2L
sa(dp269
g1
I01
sg13
VReturn number of occurrences of v in the array.
p270
sg7
g97
sg9
L2L
sa(dp271
g1
I01
sg13
VAppend items to the end of the array.
p272
sg7
g100
sg9
L2L
sa(dp273
g1
I01
sg13
VAppends items from the string, interpreting it as an array of machine values, as if it had been read from a file using the fromfile() method).
p274
sg7
g103
sg9
L2L
sa(dp275
g1
I01
sg13
VRead n objects from the file object f and append them to the end of the array.
p276
sg7
g106
sg9
L2L
sa(dp277
g1
I01
sg13
VAppend items to array from list.
p278
sg7
g109
sg9
L2L
sa(dp279
g1
I01
sg13
VAppends items from the string, interpreting it as an array of machine values, as if it had been read from a file using the fromfile() method).\u000a\u000aThis method is deprecated. Use frombytes instead.
p280
sg7
g112
sg9
L2L
sa(dp281
g1
I01
sg13
VExtends this array with data from the unicode string ustr.\u000a\u000aThe array must be a unicode type array; otherwise a ValueError is raised.\u000aUse array.frombytes(ustr.encode(...)) to append Unicode data to an array of\u000asome other type.
p282
sg7
g115
sg9
L2L
sa(dp283
g1
I01
sg13
VReturn index of first occurrence of v in the array.
p284
sg7
g118
sg9
L2L
sa(dp285
g1
I01
sg13
VInsert a new item v into the array before position i.
p286
sg7
g121
sg9
L2L
sa(dp287
g1
I01
sg7
g123
sg9
L5L
sa(dp288
g1
I01
sg13
VReturn the i-th element and delete it from the array.\u000a\u000ai defaults to -1.
p289
sg7
g126
sg9
L2L
sa(dp290
g1
I01
sg13
VRemove the first occurrence of v in the array.
p291
sg7
g129
sg9
L2L
sa(dp292
g1
I01
sg13
VReverse the order of the items in the array.
p293
sg7
g132
sg9
L2L
sa(dp294
g1
I01
sg13
VConvert the array to an array of machine values and return the bytes representation.
p295
sg7
g135
sg9
L2L
sa(dp296
g1
I01
sg13
VWrite all items (as machine values) to the file object f.
p297
sg7
g138
sg9
L2L
sa(dp298
g1
I01
sg13
VConvert array to an ordinary list with the same items.
p299
sg7
g141
sg9
L2L
sa(dp300
g1
I01
sg13
VConvert the array to an array of machine values and return the bytes representation.\u000a\u000aThis method is deprecated. Use tobytes instead.
p301
sg7
g144
sg9
L2L
sa(dp302
g1
I01
sg13
VExtends this array with data from the unicode string ustr.\u000a\u000aConvert the array to a unicode string.  The array must be a unicode type array;\u000aotherwise a ValueError is raised.  Use array.tobytes().decode() to obtain a\u000aunicode string from an array of some other type.
p303
sg7
g147
sg9
L2L
sa(dp304
g1
I01
sg7
g149
sg9
L5L
sasg13
Varray(typecode [, initializer]) -> array\u000a\u000aReturn a new array whose items are restricted by typecode, and\u000ainitialized from the optional initializer value, which must be a list,\u000astring or iterable over elements of the appropriate type.\u000a\u000aArrays represent basic values and behave very much like lists, except\u000athe type of objects stored in them is constrained. The type is specified\u000aat object creation time by using a type code, which is a single character.\u000aThe following type codes are defined:\u000a\u000a    Type code   C Type             Minimum size in bytes \u000a    'b'         signed integer     1 \u000a    'B'         unsigned integer   1 \u000a    'u'         Unicode character  2 (see note) \u000a    'h'         signed integer     2 \u000a    'H'         unsigned integer   2 \u000a    'i'         signed integer     2 \u000a    'I'         unsigned integer   2 \u000a    'l'         signed integer     4 \u000a    'L'         unsigned integer   4 \u000a    'q'         signed integer     8 (see note) \u000a    'Q'         unsigned integer   8 (see note) \u000a    'f'         floating point     4 \u000a    'd'         floating point     8 \u000a\u000aNOTE: The 'u' typecode corresponds to Python's unicode character. On \u000anarrow builds this is 2-bytes on wide builds this is 4-bytes.\u000a\u000aNOTE: The 'q' and 'Q' type codes are only available if the platform \u000aC compiler used to build Python supports 'long long', or, on Windows, \u000a'__int64'.\u000a\u000aMethods:\u000a\u000aappend() -- append a new item to the end of the array\u000abuffer_info() -- return information giving the current memory info\u000abyteswap() -- byteswap all the items of the array\u000acount() -- return number of occurrences of an object\u000aextend() -- extend array by appending multiple elements from an iterable\u000afromfile() -- read items from a file object\u000afromlist() -- append items from the list\u000afrombytes() -- append items from the string\u000aindex() -- return index of first occurrence of an object\u000ainsert() -- insert a new item into the array at a provided position\u000apop() -- remove and return item (default last)\u000aremove() -- remove first occurrence of an object\u000areverse() -- reverse the order of the items in the array\u000atofile() -- write all items to a file object\u000atolist() -- return the array converted to an ordinary list\u000atobytes() -- return the array converted to a string\u000a\u000aAttributes:\u000a\u000atypecode -- the typecode character used to create the array\u000aitemsize -- the length in bytes of one array item\u000a
p305
sg7
Varray
p306
sg9
L3L
sa(dp307
g1
I01
sg7
Vtypecodes
p308
sg9
L5L
sasg13
VThis module defines an object type which can efficiently represent\u000aan array of basic values: characters, integers, floating point\u000anumbers.  Arrays are sequence types and behave very much like lists,\u000aexcept that the type of objects stored in them is constrained.\u000a
p309
sg7
Varray
p310
sg9
L1L
s.