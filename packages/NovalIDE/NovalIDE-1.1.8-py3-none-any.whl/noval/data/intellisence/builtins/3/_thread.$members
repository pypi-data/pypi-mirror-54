(dp0
Vis_builtin
p1
I01
sVchilds
p2
(lp3
(dp4
g1
I01
sg2
(lp5
(dp6
g1
I01
sVname
p7
V__delattr__
p8
sVtype
p9
L5L
sa(dp10
g1
I01
sVdoc
p11
V__dir__() -> list\u000adefault dir() implementation
p12
sg7
V__dir__
p13
sg9
L2L
sa(dp14
g1
I01
sg7
V__doc__
p15
sg9
L5L
sa(dp16
g1
I01
sg11
Vacquire(blocking=True, timeout=-1) -> bool\u000a(acquire_lock() is an obsolete synonym)\u000a\u000aLock the lock.  Without argument, this blocks if the lock is already\u000alocked (even by the same thread), waiting for another thread to release\u000athe lock, and return True once the lock is acquired.\u000aWith an argument, this will only block if the argument is true,\u000aand the return value reflects whether the lock is acquired.\u000aThe blocking operation is interruptible.
p17
sg7
V__enter__
p18
sg9
L2L
sa(dp19
g1
I01
sg7
V__eq__
p20
sg9
L5L
sa(dp21
g1
I01
sg11
Vrelease()\u000a(release_lock() is an obsolete synonym)\u000a\u000aRelease the lock, allowing another thread that is blocked waiting for\u000athe lock to acquire the lock.  The lock must be in the locked state,\u000abut it needn't be locked by the same thread that unlocks it.
p22
sg7
V__exit__
p23
sg9
L2L
sa(dp24
g1
I01
sg11
Vdefault object formatter
p25
sg7
V__format__
p26
sg9
L2L
sa(dp27
g1
I01
sg7
V__ge__
p28
sg9
L5L
sa(dp29
g1
I01
sg7
V__getattribute__
p30
sg9
L5L
sa(dp31
g1
I01
sg7
V__gt__
p32
sg9
L5L
sa(dp33
g1
I01
sg7
V__hash__
p34
sg9
L5L
sa(dp35
g1
I01
sg7
V__init__
p36
sg9
L5L
sa(dp37
g1
I01
sg7
V__le__
p38
sg9
L5L
sa(dp39
g1
I01
sg7
V__lt__
p40
sg9
L5L
sa(dp41
g1
I01
sg7
V__ne__
p42
sg9
L5L
sa(dp43
g1
I01
sg11
VCreate and return a new object.  See help(type) for accurate signature.
p44
sg7
V__new__
p45
sg9
L2L
sa(dp46
g1
I01
sg11
Vhelper for pickle
p47
sg7
V__reduce__
p48
sg9
L2L
sa(dp49
g1
I01
sg11
Vhelper for pickle
p50
sg7
V__reduce_ex__
p51
sg9
L2L
sa(dp52
g1
I01
sg7
V__repr__
p53
sg9
L5L
sa(dp54
g1
I01
sg7
V__setattr__
p55
sg9
L5L
sa(dp56
g1
I01
sg11
V__sizeof__() -> int\u000asize of object in memory, in bytes
p57
sg7
V__sizeof__
p58
sg9
L2L
sa(dp59
g1
I01
sg7
V__str__
p60
sg9
L5L
sa(dp61
g1
I01
sg11
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p62
sg7
V__subclasshook__
p63
sg9
L2L
sa(dp64
g1
I01
sg11
Vacquire(blocking=True, timeout=-1) -> bool\u000a(acquire_lock() is an obsolete synonym)\u000a\u000aLock the lock.  Without argument, this blocks if the lock is already\u000alocked (even by the same thread), waiting for another thread to release\u000athe lock, and return True once the lock is acquired.\u000aWith an argument, this will only block if the argument is true,\u000aand the return value reflects whether the lock is acquired.\u000aThe blocking operation is interruptible.
p65
sg7
Vacquire
p66
sg9
L2L
sa(dp67
g1
I01
sg11
Vacquire(blocking=True, timeout=-1) -> bool\u000a(acquire_lock() is an obsolete synonym)\u000a\u000aLock the lock.  Without argument, this blocks if the lock is already\u000alocked (even by the same thread), waiting for another thread to release\u000athe lock, and return True once the lock is acquired.\u000aWith an argument, this will only block if the argument is true,\u000aand the return value reflects whether the lock is acquired.\u000aThe blocking operation is interruptible.
p68
sg7
Vacquire_lock
p69
sg9
L2L
sa(dp70
g1
I01
sg11
Vlocked() -> bool\u000a(locked_lock() is an obsolete synonym)\u000a\u000aReturn whether the lock is in the locked state.
p71
sg7
Vlocked
p72
sg9
L2L
sa(dp73
g1
I01
sg11
Vlocked() -> bool\u000a(locked_lock() is an obsolete synonym)\u000a\u000aReturn whether the lock is in the locked state.
p74
sg7
Vlocked_lock
p75
sg9
L2L
sa(dp76
g1
I01
sg11
Vrelease()\u000a(release_lock() is an obsolete synonym)\u000a\u000aRelease the lock, allowing another thread that is blocked waiting for\u000athe lock to acquire the lock.  The lock must be in the locked state,\u000abut it needn't be locked by the same thread that unlocks it.
p77
sg7
Vrelease
p78
sg9
L2L
sa(dp79
g1
I01
sg11
Vrelease()\u000a(release_lock() is an obsolete synonym)\u000a\u000aRelease the lock, allowing another thread that is blocked waiting for\u000athe lock to acquire the lock.  The lock must be in the locked state,\u000abut it needn't be locked by the same thread that unlocks it.
p80
sg7
Vrelease_lock
p81
sg9
L2L
sasg11
VA lock object is a synchronization primitive.  To create a lock,\u000acall threading.Lock().  Methods are:\u000a\u000aacquire() -- lock the lock, possibly blocking until it can be obtained\u000arelease() -- unlock of the lock\u000alocked() -- test whether the lock is currently locked\u000a\u000aA lock is not owned by the thread that locked it; another thread may\u000aunlock it.  A thread attempting to lock a lock that it has already locked\u000awill block until another thread unlocks it.  Deadlocks may ensue.
p82
sg7
VLockType
p83
sg9
L3L
sa(dp84
g1
I01
sg2
(lp85
(dp86
g1
I01
sg7
g8
sg9
L5L
sa(dp87
g1
I01
sg11
V__dir__() -> list\u000adefault dir() implementation
p88
sg7
g13
sg9
L2L
sa(dp89
g1
I01
sg7
g15
sg9
L5L
sa(dp90
g1
I01
sg11
Vacquire(blocking=True) -> bool\u000a\u000aLock the lock.  `blocking` indicates whether we should wait\u000afor the lock to be available or not.  If `blocking` is False\u000aand another thread holds the lock, the method will return False\u000aimmediately.  If `blocking` is True and another thread holds\u000athe lock, the method will wait for the lock to be released,\u000atake it and then return True.\u000a(note: the blocking operation is interruptible.)\u000a\u000aIn all other cases, the method will return True immediately.\u000aPrecisely, if the current thread already holds the lock, its\u000ainternal counter is simply incremented. If nobody holds the lock,\u000athe lock is taken and its internal counter initialized to 1.
p91
sg7
g18
sg9
L2L
sa(dp92
g1
I01
sg7
g20
sg9
L5L
sa(dp93
g1
I01
sg11
Vrelease()\u000a\u000aRelease the lock, allowing another thread that is blocked waiting for\u000athe lock to acquire the lock.  The lock must be in the locked state,\u000aand must be locked by the same thread that unlocks it; otherwise a\u000a`RuntimeError` is raised.\u000a\u000aDo note that if the lock was acquire()d several times in a row by the\u000acurrent thread, release() needs to be called as many times for the lock\u000ato be available for other threads.
p94
sg7
g23
sg9
L2L
sa(dp95
g1
I01
sg11
Vdefault object formatter
p96
sg7
g26
sg9
L2L
sa(dp97
g1
I01
sg7
g28
sg9
L5L
sa(dp98
g1
I01
sg7
g30
sg9
L5L
sa(dp99
g1
I01
sg7
g32
sg9
L5L
sa(dp100
g1
I01
sg7
g34
sg9
L5L
sa(dp101
g1
I01
sg7
g36
sg9
L5L
sa(dp102
g1
I01
sg7
g38
sg9
L5L
sa(dp103
g1
I01
sg7
g40
sg9
L5L
sa(dp104
g1
I01
sg7
g42
sg9
L5L
sa(dp105
g1
I01
sg11
VCreate and return a new object.  See help(type) for accurate signature.
p106
sg7
g45
sg9
L2L
sa(dp107
g1
I01
sg11
Vhelper for pickle
p108
sg7
g48
sg9
L2L
sa(dp109
g1
I01
sg11
Vhelper for pickle
p110
sg7
g51
sg9
L2L
sa(dp111
g1
I01
sg7
g53
sg9
L5L
sa(dp112
g1
I01
sg7
g55
sg9
L5L
sa(dp113
g1
I01
sg11
V__sizeof__() -> int\u000asize of object in memory, in bytes
p114
sg7
g58
sg9
L2L
sa(dp115
g1
I01
sg7
g60
sg9
L5L
sa(dp116
g1
I01
sg11
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p117
sg7
g63
sg9
L2L
sa(dp118
g1
I01
sg11
V_acquire_restore(state) -> None\u000a\u000aFor internal use by `threading.Condition`.
p119
sg7
V_acquire_restore
p120
sg9
L2L
sa(dp121
g1
I01
sg11
V_is_owned() -> bool\u000a\u000aFor internal use by `threading.Condition`.
p122
sg7
V_is_owned
p123
sg9
L2L
sa(dp124
g1
I01
sg11
V_release_save() -> tuple\u000a\u000aFor internal use by `threading.Condition`.
p125
sg7
V_release_save
p126
sg9
L2L
sa(dp127
g1
I01
sg11
Vacquire(blocking=True) -> bool\u000a\u000aLock the lock.  `blocking` indicates whether we should wait\u000afor the lock to be available or not.  If `blocking` is False\u000aand another thread holds the lock, the method will return False\u000aimmediately.  If `blocking` is True and another thread holds\u000athe lock, the method will wait for the lock to be released,\u000atake it and then return True.\u000a(note: the blocking operation is interruptible.)\u000a\u000aIn all other cases, the method will return True immediately.\u000aPrecisely, if the current thread already holds the lock, its\u000ainternal counter is simply incremented. If nobody holds the lock,\u000athe lock is taken and its internal counter initialized to 1.
p128
sg7
g66
sg9
L2L
sa(dp129
g1
I01
sg11
Vrelease()\u000a\u000aRelease the lock, allowing another thread that is blocked waiting for\u000athe lock to acquire the lock.  The lock must be in the locked state,\u000aand must be locked by the same thread that unlocks it; otherwise a\u000a`RuntimeError` is raised.\u000a\u000aDo note that if the lock was acquire()d several times in a row by the\u000acurrent thread, release() needs to be called as many times for the lock\u000ato be available for other threads.
p130
sg7
g78
sg9
L2L
sasg11
Nsg7
VRLock
p131
sg9
L3L
sa(dp132
g1
I01
sg7
VTIMEOUT_MAX
p133
sg9
L5L
sa(dp134
g1
I01
sg7
g15
sg9
L5L
sa(dp135
g1
I01
sg2
(lp136
(dp137
g1
I01
sg7
g8
sg9
L5L
sa(dp138
g1
I01
sg7
V__dict__
p139
sg9
L5L
sa(dp140
g1
I01
sg11
V__dir__() -> list\u000adefault dir() implementation
p141
sg7
g13
sg9
L2L
sa(dp142
g1
I01
sg7
g15
sg9
L5L
sa(dp143
g1
I01
sg7
g20
sg9
L5L
sa(dp144
g1
I01
sg11
Vdefault object formatter
p145
sg7
g26
sg9
L2L
sa(dp146
g1
I01
sg7
g28
sg9
L5L
sa(dp147
g1
I01
sg7
g30
sg9
L5L
sa(dp148
g1
I01
sg7
g32
sg9
L5L
sa(dp149
g1
I01
sg7
g34
sg9
L5L
sa(dp150
g1
I01
sg7
g36
sg9
L5L
sa(dp151
g1
I01
sg7
g38
sg9
L5L
sa(dp152
g1
I01
sg7
g40
sg9
L5L
sa(dp153
g1
I01
sg7
V__module__
p154
sg9
L5L
sa(dp155
g1
I01
sg7
g42
sg9
L5L
sa(dp156
g1
I01
sg11
VCreate and return a new object.  See help(type) for accurate signature.
p157
sg7
g45
sg9
L2L
sa(dp158
g1
I01
sg11
Vhelper for pickle
p159
sg7
g48
sg9
L2L
sa(dp160
g1
I01
sg11
Vhelper for pickle
p161
sg7
g51
sg9
L2L
sa(dp162
g1
I01
sg7
g53
sg9
L5L
sa(dp163
g1
I01
sg7
g55
sg9
L5L
sa(dp164
g1
I01
sg11
V__sizeof__() -> int\u000asize of object in memory, in bytes
p165
sg7
g58
sg9
L2L
sa(dp166
g1
I01
sg7
g60
sg9
L5L
sa(dp167
g1
I01
sg11
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p168
sg7
g63
sg9
L2L
sa(dp169
g1
I01
sg7
V__weakref__
p170
sg9
L5L
sa(dp171
g1
I01
sg7
Vcreate_module
p172
sg9
L5L
sa(dp173
g1
I01
sg7
Vexec_module
p174
sg9
L5L
sa(dp175
g1
I01
sg7
Vfind_module
p176
sg9
L5L
sa(dp177
g1
I01
sg7
Vfind_spec
p178
sg9
L5L
sa(dp179
g1
I01
sg7
Vget_code
p180
sg9
L5L
sa(dp181
g1
I01
sg7
Vget_source
p182
sg9
L5L
sa(dp183
g1
I01
sg7
Vis_package
p184
sg9
L5L
sa(dp185
g1
I01
sg7
Vload_module
p186
sg9
L5L
sa(dp187
g1
I01
sg7
Vmodule_repr
p188
sg9
L5L
sasg11
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p189
sg7
V__loader__
p190
sg9
L3L
sa(dp191
g1
I01
sg7
V__name__
p192
sg9
L5L
sa(dp193
g1
I01
sg7
V__package__
p194
sg9
L5L
sa(dp195
g1
I01
sg7
V__spec__
p196
sg9
L5L
sa(dp197
g1
I01
sg11
V_count() -> integer\u000a\u000aReturn the number of currently running Python threads, excluding \u000athe main thread. The returned number comprises all threads created\u000athrough `start_new_thread()` as well as `threading.Thread`, and not\u000ayet finished.\u000a\u000aThis function is meant for internal and specialized purposes only.\u000aIn most applications `threading.enumerate()` should be used instead.
p198
sg7
V_count
p199
sg9
L2L
sa(dp200
g1
I01
sg2
(lp201
(dp202
g1
I01
sg7
g8
sg9
L5L
sa(dp203
g1
I01
sg11
V__dir__() -> list\u000adefault dir() implementation
p204
sg7
g13
sg9
L2L
sa(dp205
g1
I01
sg7
g15
sg9
L5L
sa(dp206
g1
I01
sg7
g20
sg9
L5L
sa(dp207
g1
I01
sg11
Vdefault object formatter
p208
sg7
g26
sg9
L2L
sa(dp209
g1
I01
sg7
g28
sg9
L5L
sa(dp210
g1
I01
sg7
g30
sg9
L5L
sa(dp211
g1
I01
sg7
g32
sg9
L5L
sa(dp212
g1
I01
sg7
g34
sg9
L5L
sa(dp213
g1
I01
sg7
g36
sg9
L5L
sa(dp214
g1
I01
sg7
g38
sg9
L5L
sa(dp215
g1
I01
sg7
g40
sg9
L5L
sa(dp216
g1
I01
sg7
g42
sg9
L5L
sa(dp217
g1
I01
sg11
VCreate and return a new object.  See help(type) for accurate signature.
p218
sg7
g45
sg9
L2L
sa(dp219
g1
I01
sg11
Vhelper for pickle
p220
sg7
g48
sg9
L2L
sa(dp221
g1
I01
sg11
Vhelper for pickle
p222
sg7
g51
sg9
L2L
sa(dp223
g1
I01
sg7
g53
sg9
L5L
sa(dp224
g1
I01
sg7
g55
sg9
L5L
sa(dp225
g1
I01
sg11
V__sizeof__() -> int\u000asize of object in memory, in bytes
p226
sg7
g58
sg9
L2L
sa(dp227
g1
I01
sg7
g60
sg9
L5L
sa(dp228
g1
I01
sg11
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p229
sg7
g63
sg9
L2L
sasg11
VThread-local data
p230
sg7
V_local
p231
sg9
L3L
sa(dp232
g1
I01
sg11
V_set_sentinel() -> lock\u000a\u000aSet a sentinel lock that will be released when the current thread\u000astate is finalized (after it is untied from the interpreter).\u000a\u000aThis is a private API for the threading module.
p233
sg7
V_set_sentinel
p234
sg9
L2L
sa(dp235
g1
I01
sg11
Vallocate_lock() -> lock object\u000a(allocate() is an obsolete synonym)\u000a\u000aCreate a new lock object. See help(type(threading.Lock())) for\u000ainformation about locks.
p236
sg7
Vallocate
p237
sg9
L2L
sa(dp238
g1
I01
sg11
Vallocate_lock() -> lock object\u000a(allocate() is an obsolete synonym)\u000a\u000aCreate a new lock object. See help(type(threading.Lock())) for\u000ainformation about locks.
p239
sg7
Vallocate_lock
p240
sg9
L2L
sa(dp241
g1
I01
sg2
(lp242
(dp243
g1
I01
sg7
V__cause__
p244
sg9
L5L
sa(dp245
g1
I01
sg7
V__context__
p246
sg9
L5L
sa(dp247
g1
I01
sg7
g8
sg9
L5L
sa(dp248
g1
I01
sg7
g139
sg9
L5L
sa(dp249
g1
I01
sg11
V__dir__() -> list\u000adefault dir() implementation
p250
sg7
g13
sg9
L2L
sa(dp251
g1
I01
sg7
g15
sg9
L5L
sa(dp252
g1
I01
sg7
g20
sg9
L5L
sa(dp253
g1
I01
sg11
Vdefault object formatter
p254
sg7
g26
sg9
L2L
sa(dp255
g1
I01
sg7
g28
sg9
L5L
sa(dp256
g1
I01
sg7
g30
sg9
L5L
sa(dp257
g1
I01
sg7
g32
sg9
L5L
sa(dp258
g1
I01
sg7
g34
sg9
L5L
sa(dp259
g1
I01
sg7
g36
sg9
L5L
sa(dp260
g1
I01
sg7
g38
sg9
L5L
sa(dp261
g1
I01
sg7
g40
sg9
L5L
sa(dp262
g1
I01
sg7
g42
sg9
L5L
sa(dp263
g1
I01
sg11
VCreate and return a new object.  See help(type) for accurate signature.
p264
sg7
g45
sg9
L2L
sa(dp265
g1
I01
sg11
Nsg7
g48
sg9
L2L
sa(dp266
g1
I01
sg11
Vhelper for pickle
p267
sg7
g51
sg9
L2L
sa(dp268
g1
I01
sg7
g53
sg9
L5L
sa(dp269
g1
I01
sg7
g55
sg9
L5L
sa(dp270
g1
I01
sg11
Nsg7
V__setstate__
p271
sg9
L2L
sa(dp272
g1
I01
sg11
V__sizeof__() -> int\u000asize of object in memory, in bytes
p273
sg7
g58
sg9
L2L
sa(dp274
g1
I01
sg7
g60
sg9
L5L
sa(dp275
g1
I01
sg11
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p276
sg7
g63
sg9
L2L
sa(dp277
g1
I01
sg7
V__suppress_context__
p278
sg9
L5L
sa(dp279
g1
I01
sg7
V__traceback__
p280
sg9
L5L
sa(dp281
g1
I01
sg7
Vargs
p282
sg9
L5L
sa(dp283
g1
I01
sg11
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p284
sg7
Vwith_traceback
p285
sg9
L2L
sasg11
VUnspecified run-time error.
p286
sg7
Verror
p287
sg9
L3L
sa(dp288
g1
I01
sg11
Vexit()\u000a(exit_thread() is an obsolete synonym)\u000a\u000aThis is synonymous to ``raise SystemExit''.  It will cause the current\u000athread to exit silently unless the exception is caught.
p289
sg7
Vexit
p290
sg9
L2L
sa(dp291
g1
I01
sg11
Vexit()\u000a(exit_thread() is an obsolete synonym)\u000a\u000aThis is synonymous to ``raise SystemExit''.  It will cause the current\u000athread to exit silently unless the exception is caught.
p292
sg7
Vexit_thread
p293
sg9
L2L
sa(dp294
g1
I01
sg11
Vget_ident() -> integer\u000a\u000aReturn a non-zero integer that uniquely identifies the current thread\u000aamongst other threads that exist simultaneously.\u000aThis may be used to identify per-thread resources.\u000aEven though on some platforms threads identities may appear to be\u000aallocated consecutive numbers starting at 1, this behavior should not\u000abe relied upon, and the number should be seen purely as a magic cookie.\u000aA thread's identity may be reused for another thread after it exits.
p295
sg7
Vget_ident
p296
sg9
L2L
sa(dp297
g1
I01
sg11
Vinterrupt_main()\u000a\u000aRaise a KeyboardInterrupt in the main thread.\u000aA subthread can use this function to interrupt the main thread.
p298
sg7
Vinterrupt_main
p299
sg9
L2L
sa(dp300
g1
I01
sg11
Vstack_size([size]) -> size\u000a\u000aReturn the thread stack size used when creating new threads.  The\u000aoptional size argument specifies the stack size (in bytes) to be used\u000afor subsequently created threads, and must be 0 (use platform or\u000aconfigured default) or a positive integer value of at least 32,768 (32k).\u000aIf changing the thread stack size is unsupported, a ThreadError\u000aexception is raised.  If the specified size is invalid, a ValueError\u000aexception is raised, and the stack size is unmodified.  32k bytes\u000a currently the minimum supported stack size value to guarantee\u000asufficient stack space for the interpreter itself.\u000a\u000aNote that some platforms may have particular restrictions on values for\u000athe stack size, such as requiring a minimum stack size larger than 32kB or\u000arequiring allocation in multiples of the system memory page size\u000a- platform documentation should be referred to for more information\u000a(4kB pages are common; using multiples of 4096 for the stack size is\u000athe suggested approach in the absence of more specific information).
p301
sg7
Vstack_size
p302
sg9
L2L
sa(dp303
g1
I01
sg11
Vstart_new_thread(function, args[, kwargs])\u000a(start_new() is an obsolete synonym)\u000a\u000aStart a new thread and return its identifier.  The thread will call the\u000afunction with positional arguments from the tuple args and keyword arguments\u000ataken from the optional dictionary kwargs.  The thread exits when the\u000afunction returns; the return value is ignored.  The thread will also exit\u000awhen the function raises an unhandled exception; a stack trace will be\u000aprinted unless the exception is SystemExit.\u000a
p304
sg7
Vstart_new
p305
sg9
L2L
sa(dp306
g1
I01
sg11
Vstart_new_thread(function, args[, kwargs])\u000a(start_new() is an obsolete synonym)\u000a\u000aStart a new thread and return its identifier.  The thread will call the\u000afunction with positional arguments from the tuple args and keyword arguments\u000ataken from the optional dictionary kwargs.  The thread exits when the\u000afunction returns; the return value is ignored.  The thread will also exit\u000awhen the function raises an unhandled exception; a stack trace will be\u000aprinted unless the exception is SystemExit.\u000a
p307
sg7
Vstart_new_thread
p308
sg9
L2L
sasg11
VThis module provides primitive operations to write multi-threaded programs.\u000aThe 'threading' module provides a more convenient interface.
p309
sg7
V_thread
p310
sg9
L1L
s.