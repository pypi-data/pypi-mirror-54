(dp0
S'doc'
p1
S'Conversion between binary data and ASCII'
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g1
Nsg3
I01
sg4
(lp7
(dp8
g3
I01
sS'type'
p9
I5
sS'name'
p10
S'__delattr__'
p11
sa(dp12
g3
I01
sg9
I5
sg10
S'__dict__'
p13
sa(dp14
g3
I01
sg9
I5
sg10
S'__doc__'
p15
sa(dp16
g1
S'default object formatter'
p17
sg3
I01
sg9
I2
sg10
S'__format__'
p18
sa(dp19
g3
I01
sg9
I5
sg10
S'__getattribute__'
p20
sa(dp21
g3
I01
sg9
I5
sg10
S'__getitem__'
p22
sa(dp23
g3
I01
sg9
I5
sg10
S'__getslice__'
p24
sa(dp25
g3
I01
sg9
I5
sg10
S'__hash__'
p26
sa(dp27
g3
I01
sg9
I5
sg10
S'__init__'
p28
sa(dp29
g3
I01
sg9
I5
sg10
S'__module__'
p30
sa(dp31
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p32
sg3
I01
sg9
I2
sg10
S'__new__'
p33
sa(dp34
g1
Nsg3
I01
sg9
I2
sg10
S'__reduce__'
p35
sa(dp36
g1
S'helper for pickle'
p37
sg3
I01
sg9
I2
sg10
S'__reduce_ex__'
p38
sa(dp39
g3
I01
sg9
I5
sg10
S'__repr__'
p40
sa(dp41
g3
I01
sg9
I5
sg10
S'__setattr__'
p42
sa(dp43
g1
Nsg3
I01
sg9
I2
sg10
S'__setstate__'
p44
sa(dp45
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p46
sg3
I01
sg9
I2
sg10
S'__sizeof__'
p47
sa(dp48
g3
I01
sg9
I5
sg10
S'__str__'
p49
sa(dp50
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p51
sg3
I01
sg9
I2
sg10
S'__subclasshook__'
p52
sa(dp53
g1
Nsg3
I01
sg9
I2
sg10
S'__unicode__'
p54
sa(dp55
g3
I01
sg9
I5
sg10
S'__weakref__'
p56
sa(dp57
g3
I01
sg9
I5
sg10
S'args'
p58
sa(dp59
g3
I01
sg9
I5
sg10
S'message'
p60
sasg9
I3
sg10
S'Error'
p61
sa(dp62
g1
Nsg3
I01
sg4
(lp63
(dp64
g3
I01
sg9
I5
sg10
g11
sa(dp65
g3
I01
sg9
I5
sg10
g13
sa(dp66
g3
I01
sg9
I5
sg10
g15
sa(dp67
g1
S'default object formatter'
p68
sg3
I01
sg9
I2
sg10
g18
sa(dp69
g3
I01
sg9
I5
sg10
g20
sa(dp70
g3
I01
sg9
I5
sg10
g22
sa(dp71
g3
I01
sg9
I5
sg10
g24
sa(dp72
g3
I01
sg9
I5
sg10
g26
sa(dp73
g3
I01
sg9
I5
sg10
g28
sa(dp74
g3
I01
sg9
I5
sg10
g30
sa(dp75
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p76
sg3
I01
sg9
I2
sg10
g33
sa(dp77
g1
Nsg3
I01
sg9
I2
sg10
g35
sa(dp78
g1
S'helper for pickle'
p79
sg3
I01
sg9
I2
sg10
g38
sa(dp80
g3
I01
sg9
I5
sg10
g40
sa(dp81
g3
I01
sg9
I5
sg10
g42
sa(dp82
g1
Nsg3
I01
sg9
I2
sg10
g44
sa(dp83
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p84
sg3
I01
sg9
I2
sg10
g47
sa(dp85
g3
I01
sg9
I5
sg10
g49
sa(dp86
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p87
sg3
I01
sg9
I2
sg10
g52
sa(dp88
g1
Nsg3
I01
sg9
I2
sg10
g54
sa(dp89
g3
I01
sg9
I5
sg10
g56
sa(dp90
g3
I01
sg9
I5
sg10
g58
sa(dp91
g3
I01
sg9
I5
sg10
g60
sasg9
I3
sg10
S'Incomplete'
p92
sa(dp93
g3
I01
sg9
I5
sg10
g15
sa(dp94
g3
I01
sg9
I5
sg10
S'__name__'
p95
sa(dp96
g3
I01
sg9
I5
sg10
S'__package__'
p97
sa(dp98
g1
S'(ascii) -> bin. Decode a line of base64 data'
p99
sg3
I01
sg9
I2
sg10
S'a2b_base64'
p100
sa(dp101
g1
S'a2b_hex(hexstr) -> s; Binary data of hexadecimal representation.\n\nhexstr must contain an even number of hex digits (upper or lower case).\nThis function is also available as "unhexlify()"'
p102
sg3
I01
sg9
I2
sg10
S'a2b_hex'
p103
sa(dp104
g1
S'ascii -> bin, done. Decode .hqx coding'
p105
sg3
I01
sg9
I2
sg10
S'a2b_hqx'
p106
sa(dp107
g1
S'Decode a string of qp-encoded data'
p108
sg3
I01
sg9
I2
sg10
S'a2b_qp'
p109
sa(dp110
g1
S'(ascii) -> bin. Decode a line of uuencoded data'
p111
sg3
I01
sg9
I2
sg10
S'a2b_uu'
p112
sa(dp113
g1
S'(bin) -> ascii. Base64-code line of data'
p114
sg3
I01
sg9
I2
sg10
S'b2a_base64'
p115
sa(dp116
g1
S'b2a_hex(data) -> s; Hexadecimal representation of binary data.\n\nThis function is also available as "hexlify()".'
p117
sg3
I01
sg9
I2
sg10
S'b2a_hex'
p118
sa(dp119
g1
S'Encode .hqx data'
p120
sg3
I01
sg9
I2
sg10
S'b2a_hqx'
p121
sa(dp122
g1
S'b2a_qp(data, quotetabs=0, istext=1, header=0) -> s; \n Encode a string using quoted-printable encoding. \n\nOn encoding, when istext is set, newlines are not encoded, and white \nspace at end of lines is.  When istext is not set, \\r and \\n (CR/LF) are \nboth encoded.  When quotetabs is set, space and tabs are encoded.'
p123
sg3
I01
sg9
I2
sg10
S'b2a_qp'
p124
sa(dp125
g1
S'(bin) -> ascii. Uuencode line of data'
p126
sg3
I01
sg9
I2
sg10
S'b2a_uu'
p127
sa(dp128
g1
S'(data, oldcrc = 0) -> newcrc. Compute CRC-32 incrementally'
p129
sg3
I01
sg9
I2
sg10
S'crc32'
p130
sa(dp131
g1
S'(data, oldcrc) -> newcrc. Compute hqx CRC incrementally'
p132
sg3
I01
sg9
I2
sg10
S'crc_hqx'
p133
sa(dp134
g1
S'b2a_hex(data) -> s; Hexadecimal representation of binary data.\n\nThis function is also available as "hexlify()".'
p135
sg3
I01
sg9
I2
sg10
S'hexlify'
p136
sa(dp137
g1
S'Binhex RLE-code binary data'
p138
sg3
I01
sg9
I2
sg10
S'rlecode_hqx'
p139
sa(dp140
g1
S'Decode hexbin RLE-coded string'
p141
sg3
I01
sg9
I2
sg10
S'rledecode_hqx'
p142
sa(dp143
g1
S'a2b_hex(hexstr) -> s; Binary data of hexadecimal representation.\n\nhexstr must contain an even number of hex digits (upper or lower case).\nThis function is also available as "unhexlify()"'
p144
sg3
I01
sg9
I2
sg10
S'unhexlify'
p145
sasg9
I1
sg10
S'binascii'
p146
s.