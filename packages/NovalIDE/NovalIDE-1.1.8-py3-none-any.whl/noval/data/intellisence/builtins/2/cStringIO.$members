(dp0
S'doc'
p1
S'A simple fast partial StringIO replacement.\n\nThis module provides a simple useful replacement for\nthe StringIO module that is written in C.  It does not provide the\nfull generality of StringIO, but it provides enough for most\napplications and is especially useful in conjunction with the\npickle module.\n\nUsage:\n\n  from cStringIO import StringIO\n\n  an_output_stream=StringIO()\n  an_output_stream.write(some_stuff)\n  ...\n  value=an_output_stream.getvalue()\n\n  an_input_stream=StringIO(a_string)\n  spam=an_input_stream.readline()\n  spam=an_input_stream.read(5)\n  an_input_stream.seek(0)           # OK, start over\n  spam=an_input_stream.read()       # and read it all\n  \nIf someone else wants to provide a more complete implementation,\ngo for it. :-)  \n\ncStringIO.c,v 1.29 1999/06/15 14:10:27 jim Exp\n'
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g1
S'Simple type for treating strings as input file streams'
p7
sg3
I01
sg4
(lp8
(dp9
g3
I01
sS'type'
p10
I5
sS'name'
p11
S'__delattr__'
p12
sa(dp13
g3
I01
sg10
I5
sg11
S'__doc__'
p14
sa(dp15
g1
S'default object formatter'
p16
sg3
I01
sg10
I2
sg11
S'__format__'
p17
sa(dp18
g3
I01
sg10
I5
sg11
S'__getattribute__'
p19
sa(dp20
g3
I01
sg10
I5
sg11
S'__hash__'
p21
sa(dp22
g3
I01
sg10
I5
sg11
S'__init__'
p23
sa(dp24
g3
I01
sg10
I5
sg11
S'__iter__'
p25
sa(dp26
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p27
sg3
I01
sg10
I2
sg11
S'__new__'
p28
sa(dp29
g1
S'helper for pickle'
p30
sg3
I01
sg10
I2
sg11
S'__reduce__'
p31
sa(dp32
g1
S'helper for pickle'
p33
sg3
I01
sg10
I2
sg11
S'__reduce_ex__'
p34
sa(dp35
g3
I01
sg10
I5
sg11
S'__repr__'
p36
sa(dp37
g3
I01
sg10
I5
sg11
S'__setattr__'
p38
sa(dp39
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p40
sg3
I01
sg10
I2
sg11
S'__sizeof__'
p41
sa(dp42
g3
I01
sg10
I5
sg11
S'__str__'
p43
sa(dp44
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p45
sg3
I01
sg10
I2
sg11
S'__subclasshook__'
p46
sa(dp47
g1
S'close(): explicitly release resources held.'
p48
sg3
I01
sg10
I2
sg11
S'close'
p49
sa(dp50
g3
I01
sg10
I5
sg11
S'closed'
p51
sa(dp52
g1
S'flush(): does nothing.'
p53
sg3
I01
sg10
I2
sg11
S'flush'
p54
sa(dp55
g1
S'getvalue([use_pos]) -- Get the string value.\nIf use_pos is specified and is a true value, then the string returned\nwill include only the text up to the current file position.\n'
p56
sg3
I01
sg10
I2
sg11
S'getvalue'
p57
sa(dp58
g1
S'isatty(): always returns 0'
p59
sg3
I01
sg10
I2
sg11
S'isatty'
p60
sa(dp61
g3
I01
sg10
I5
sg11
S'next'
p62
sa(dp63
g1
S'read([s]) -- Read s characters, or the rest of the string'
p64
sg3
I01
sg10
I2
sg11
S'read'
p65
sa(dp66
g1
S'readline() -- Read one line'
p67
sg3
I01
sg10
I2
sg11
S'readline'
p68
sa(dp69
g1
S'readlines() -- Read all lines'
p70
sg3
I01
sg10
I2
sg11
S'readlines'
p71
sa(dp72
g1
S'reset() -- Reset the file position to the beginning'
p73
sg3
I01
sg10
I2
sg11
S'reset'
p74
sa(dp75
g1
S'seek(position)       -- set the current position\nseek(position, mode) -- mode 0: absolute; 1: relative; 2: relative to EOF'
p76
sg3
I01
sg10
I2
sg11
S'seek'
p77
sa(dp78
g1
S'tell() -- get the current position.'
p79
sg3
I01
sg10
I2
sg11
S'tell'
p80
sa(dp81
g1
S'truncate(): truncate the file at the current position.'
p82
sg3
I01
sg10
I2
sg11
S'truncate'
p83
sasg10
I3
sg11
S'InputType'
p84
sa(dp85
g1
S'Simple type for output to strings.'
p86
sg3
I01
sg4
(lp87
(dp88
g3
I01
sg10
I5
sg11
g12
sa(dp89
g3
I01
sg10
I5
sg11
g14
sa(dp90
g1
S'default object formatter'
p91
sg3
I01
sg10
I2
sg11
g17
sa(dp92
g3
I01
sg10
I5
sg11
g19
sa(dp93
g3
I01
sg10
I5
sg11
g21
sa(dp94
g3
I01
sg10
I5
sg11
g23
sa(dp95
g3
I01
sg10
I5
sg11
g25
sa(dp96
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p97
sg3
I01
sg10
I2
sg11
g28
sa(dp98
g1
S'helper for pickle'
p99
sg3
I01
sg10
I2
sg11
g31
sa(dp100
g1
S'helper for pickle'
p101
sg3
I01
sg10
I2
sg11
g34
sa(dp102
g3
I01
sg10
I5
sg11
g36
sa(dp103
g3
I01
sg10
I5
sg11
g38
sa(dp104
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p105
sg3
I01
sg10
I2
sg11
g41
sa(dp106
g3
I01
sg10
I5
sg11
g43
sa(dp107
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p108
sg3
I01
sg10
I2
sg11
g46
sa(dp109
g1
S'close(): explicitly release resources held.'
p110
sg3
I01
sg10
I2
sg11
g49
sa(dp111
g3
I01
sg10
I5
sg11
g51
sa(dp112
g1
S'flush(): does nothing.'
p113
sg3
I01
sg10
I2
sg11
g54
sa(dp114
g1
S'getvalue([use_pos]) -- Get the string value.\nIf use_pos is specified and is a true value, then the string returned\nwill include only the text up to the current file position.\n'
p115
sg3
I01
sg10
I2
sg11
g57
sa(dp116
g1
S'isatty(): always returns 0'
p117
sg3
I01
sg10
I2
sg11
g60
sa(dp118
g3
I01
sg10
I5
sg11
g62
sa(dp119
g1
S'read([s]) -- Read s characters, or the rest of the string'
p120
sg3
I01
sg10
I2
sg11
g65
sa(dp121
g1
S'readline() -- Read one line'
p122
sg3
I01
sg10
I2
sg11
g68
sa(dp123
g1
S'readlines() -- Read all lines'
p124
sg3
I01
sg10
I2
sg11
g71
sa(dp125
g1
S'reset() -- Reset the file position to the beginning'
p126
sg3
I01
sg10
I2
sg11
g74
sa(dp127
g1
S'seek(position)       -- set the current position\nseek(position, mode) -- mode 0: absolute; 1: relative; 2: relative to EOF'
p128
sg3
I01
sg10
I2
sg11
g77
sa(dp129
g3
I01
sg10
I5
sg11
S'softspace'
p130
sa(dp131
g1
S'tell() -- get the current position.'
p132
sg3
I01
sg10
I2
sg11
g80
sa(dp133
g1
S'truncate(): truncate the file at the current position.'
p134
sg3
I01
sg10
I2
sg11
g83
sa(dp135
g1
S'write(s) -- Write a string to the file\n\nNote (hack:) writing None resets the buffer'
p136
sg3
I01
sg10
I2
sg11
S'write'
p137
sa(dp138
g1
S'writelines(sequence_of_strings) -> None.  Write the strings to the file.\n\nNote that newlines are not added.  The sequence can be any iterable object\nproducing strings. This is equivalent to calling write() for each string.'
p139
sg3
I01
sg10
I2
sg11
S'writelines'
p140
sasg10
I3
sg11
S'OutputType'
p141
sa(dp142
g1
S'StringIO([s]) -- Return a StringIO-like stream for reading or writing'
p143
sg3
I01
sg10
I2
sg11
S'StringIO'
p144
sa(dp145
g3
I01
sg10
I5
sg11
g14
sa(dp146
g3
I01
sg10
I5
sg11
S'__name__'
p147
sa(dp148
g3
I01
sg10
I5
sg11
S'__package__'
p149
sa(dp150
g3
I01
sg10
I5
sg11
S'cStringIO_CAPI'
p151
sasg10
I1
sg11
S'cStringIO'
p152
s.