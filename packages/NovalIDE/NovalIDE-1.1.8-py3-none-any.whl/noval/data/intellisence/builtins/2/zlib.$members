(dp0
S'doc'
p1
S"The functions in this module allow compression and decompression using the\nzlib library, which is based on GNU zip.\n\nadler32(string[, start]) -- Compute an Adler-32 checksum.\ncompress(string[, level]) -- Compress string, with compression level in 0-9.\ncompressobj([level]) -- Return a compressor object.\ncrc32(string[, start]) -- Compute a CRC-32 checksum.\ndecompress(string,[wbits],[bufsize]) -- Decompresses a compressed string.\ndecompressobj([wbits]) -- Return a decompressor object.\n\n'wbits' is window buffer size and container format.\nCompressor objects support compress() and flush() methods; decompressor\nobjects support decompress() and flush()."
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g3
I01
sS'type'
p7
I5
sS'name'
p8
S'DEFLATED'
p9
sa(dp10
g3
I01
sg7
I5
sg8
S'DEF_MEM_LEVEL'
p11
sa(dp12
g3
I01
sg7
I5
sg8
S'MAX_WBITS'
p13
sa(dp14
g3
I01
sg7
I5
sg8
S'ZLIB_VERSION'
p15
sa(dp16
g3
I01
sg7
I5
sg8
S'Z_BEST_COMPRESSION'
p17
sa(dp18
g3
I01
sg7
I5
sg8
S'Z_BEST_SPEED'
p19
sa(dp20
g3
I01
sg7
I5
sg8
S'Z_DEFAULT_COMPRESSION'
p21
sa(dp22
g3
I01
sg7
I5
sg8
S'Z_DEFAULT_STRATEGY'
p23
sa(dp24
g3
I01
sg7
I5
sg8
S'Z_FILTERED'
p25
sa(dp26
g3
I01
sg7
I5
sg8
S'Z_FINISH'
p27
sa(dp28
g3
I01
sg7
I5
sg8
S'Z_FULL_FLUSH'
p29
sa(dp30
g3
I01
sg7
I5
sg8
S'Z_HUFFMAN_ONLY'
p31
sa(dp32
g3
I01
sg7
I5
sg8
S'Z_NO_FLUSH'
p33
sa(dp34
g3
I01
sg7
I5
sg8
S'Z_SYNC_FLUSH'
p35
sa(dp36
g3
I01
sg7
I5
sg8
S'__doc__'
p37
sa(dp38
g3
I01
sg7
I5
sg8
S'__name__'
p39
sa(dp40
g3
I01
sg7
I5
sg8
S'__package__'
p41
sa(dp42
g3
I01
sg7
I5
sg8
S'__version__'
p43
sa(dp44
g1
S'adler32(string[, start]) -- Compute an Adler-32 checksum of string.\n\nAn optional starting value can be specified.  The returned checksum is\na signed integer.'
p45
sg3
I01
sg7
I2
sg8
S'adler32'
p46
sa(dp47
g1
S'compress(string[, level]) -- Returned compressed string.\n\nOptional arg level is the compression level, in 0-9.'
p48
sg3
I01
sg7
I2
sg8
S'compress'
p49
sa(dp50
g1
S'compressobj([level]) -- Return a compressor object.\n\nOptional arg level is the compression level, in 0-9 or -1.'
p51
sg3
I01
sg7
I2
sg8
S'compressobj'
p52
sa(dp53
g1
S'crc32(string[, start]) -- Compute a CRC-32 checksum of string.\n\nAn optional starting value can be specified.  The returned checksum is\na signed integer.'
p54
sg3
I01
sg7
I2
sg8
S'crc32'
p55
sa(dp56
g1
S'decompress(string[, wbits[, bufsize]]) -- Return decompressed string.\n\nOptional arg wbits indicates the window buffer size and container format.\nOptional arg bufsize is the initial output buffer size.'
p57
sg3
I01
sg7
I2
sg8
S'decompress'
p58
sa(dp59
g1
S'decompressobj([wbits]) -- Return a decompressor object.\n\nOptional arg wbits indicates the window buffer size and container format.'
p60
sg3
I01
sg7
I2
sg8
S'decompressobj'
p61
sa(dp62
g1
Nsg3
I01
sg4
(lp63
(dp64
g3
I01
sg7
I5
sg8
S'__delattr__'
p65
sa(dp66
g3
I01
sg7
I5
sg8
S'__dict__'
p67
sa(dp68
g3
I01
sg7
I5
sg8
g37
sa(dp69
g1
S'default object formatter'
p70
sg3
I01
sg7
I2
sg8
S'__format__'
p71
sa(dp72
g3
I01
sg7
I5
sg8
S'__getattribute__'
p73
sa(dp74
g3
I01
sg7
I5
sg8
S'__getitem__'
p75
sa(dp76
g3
I01
sg7
I5
sg8
S'__getslice__'
p77
sa(dp78
g3
I01
sg7
I5
sg8
S'__hash__'
p79
sa(dp80
g3
I01
sg7
I5
sg8
S'__init__'
p81
sa(dp82
g3
I01
sg7
I5
sg8
S'__module__'
p83
sa(dp84
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p85
sg3
I01
sg7
I2
sg8
S'__new__'
p86
sa(dp87
g1
Nsg3
I01
sg7
I2
sg8
S'__reduce__'
p88
sa(dp89
g1
S'helper for pickle'
p90
sg3
I01
sg7
I2
sg8
S'__reduce_ex__'
p91
sa(dp92
g3
I01
sg7
I5
sg8
S'__repr__'
p93
sa(dp94
g3
I01
sg7
I5
sg8
S'__setattr__'
p95
sa(dp96
g1
Nsg3
I01
sg7
I2
sg8
S'__setstate__'
p97
sa(dp98
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p99
sg3
I01
sg7
I2
sg8
S'__sizeof__'
p100
sa(dp101
g3
I01
sg7
I5
sg8
S'__str__'
p102
sa(dp103
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p104
sg3
I01
sg7
I2
sg8
S'__subclasshook__'
p105
sa(dp106
g1
Nsg3
I01
sg7
I2
sg8
S'__unicode__'
p107
sa(dp108
g3
I01
sg7
I5
sg8
S'__weakref__'
p109
sa(dp110
g3
I01
sg7
I5
sg8
S'args'
p111
sa(dp112
g3
I01
sg7
I5
sg8
S'message'
p113
sasg7
I3
sg8
S'error'
p114
sasg7
I1
sg8
S'zlib'
p115
s.