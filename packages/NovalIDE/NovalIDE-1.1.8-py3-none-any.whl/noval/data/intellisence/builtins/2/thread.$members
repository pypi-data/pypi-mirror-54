(dp0
S'doc'
p1
S"This module provides primitive operations to write multi-threaded programs.\nThe 'threading' module provides a more convenient interface."
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g1
S'A lock object is a synchronization primitive.  To create a lock,\ncall the PyThread_allocate_lock() function.  Methods are:\n\nacquire() -- lock the lock, possibly blocking until it can be obtained\nrelease() -- unlock of the lock\nlocked() -- test whether the lock is currently locked\n\nA lock is not owned by the thread that locked it; another thread may\nunlock it.  A thread attempting to lock a lock that it has already locked\nwill block until another thread unlocks it.  Deadlocks may ensue.'
p7
sg3
I01
sg4
(lp8
(dp9
g3
I01
sS'type'
p10
I5
sS'name'
p11
S'__delattr__'
p12
sa(dp13
g3
I01
sg10
I5
sg11
S'__doc__'
p14
sa(dp15
g1
S'acquire([wait]) -> bool\n(acquire_lock() is an obsolete synonym)\n\nLock the lock.  Without argument, this blocks if the lock is already\nlocked (even by the same thread), waiting for another thread to release\nthe lock, and return True once the lock is acquired.\nWith an argument, this will only block if the argument is true,\nand the return value reflects whether the lock is acquired.\nThe blocking operation is not interruptible.'
p16
sg3
I01
sg10
I2
sg11
S'__enter__'
p17
sa(dp18
g1
S"release()\n(release_lock() is an obsolete synonym)\n\nRelease the lock, allowing another thread that is blocked waiting for\nthe lock to acquire the lock.  The lock must be in the locked state,\nbut it needn't be locked by the same thread that unlocks it."
p19
sg3
I01
sg10
I2
sg11
S'__exit__'
p20
sa(dp21
g1
S'default object formatter'
p22
sg3
I01
sg10
I2
sg11
S'__format__'
p23
sa(dp24
g3
I01
sg10
I5
sg11
S'__getattribute__'
p25
sa(dp26
g3
I01
sg10
I5
sg11
S'__hash__'
p27
sa(dp28
g3
I01
sg10
I5
sg11
S'__init__'
p29
sa(dp30
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p31
sg3
I01
sg10
I2
sg11
S'__new__'
p32
sa(dp33
g1
S'helper for pickle'
p34
sg3
I01
sg10
I2
sg11
S'__reduce__'
p35
sa(dp36
g1
S'helper for pickle'
p37
sg3
I01
sg10
I2
sg11
S'__reduce_ex__'
p38
sa(dp39
g3
I01
sg10
I5
sg11
S'__repr__'
p40
sa(dp41
g3
I01
sg10
I5
sg11
S'__setattr__'
p42
sa(dp43
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p44
sg3
I01
sg10
I2
sg11
S'__sizeof__'
p45
sa(dp46
g3
I01
sg10
I5
sg11
S'__str__'
p47
sa(dp48
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p49
sg3
I01
sg10
I2
sg11
S'__subclasshook__'
p50
sa(dp51
g1
S'acquire([wait]) -> bool\n(acquire_lock() is an obsolete synonym)\n\nLock the lock.  Without argument, this blocks if the lock is already\nlocked (even by the same thread), waiting for another thread to release\nthe lock, and return True once the lock is acquired.\nWith an argument, this will only block if the argument is true,\nand the return value reflects whether the lock is acquired.\nThe blocking operation is not interruptible.'
p52
sg3
I01
sg10
I2
sg11
S'acquire'
p53
sa(dp54
g1
S'acquire([wait]) -> bool\n(acquire_lock() is an obsolete synonym)\n\nLock the lock.  Without argument, this blocks if the lock is already\nlocked (even by the same thread), waiting for another thread to release\nthe lock, and return True once the lock is acquired.\nWith an argument, this will only block if the argument is true,\nand the return value reflects whether the lock is acquired.\nThe blocking operation is not interruptible.'
p55
sg3
I01
sg10
I2
sg11
S'acquire_lock'
p56
sa(dp57
g1
S'locked() -> bool\n(locked_lock() is an obsolete synonym)\n\nReturn whether the lock is in the locked state.'
p58
sg3
I01
sg10
I2
sg11
S'locked'
p59
sa(dp60
g1
S'locked() -> bool\n(locked_lock() is an obsolete synonym)\n\nReturn whether the lock is in the locked state.'
p61
sg3
I01
sg10
I2
sg11
S'locked_lock'
p62
sa(dp63
g1
S"release()\n(release_lock() is an obsolete synonym)\n\nRelease the lock, allowing another thread that is blocked waiting for\nthe lock to acquire the lock.  The lock must be in the locked state,\nbut it needn't be locked by the same thread that unlocks it."
p64
sg3
I01
sg10
I2
sg11
S'release'
p65
sa(dp66
g1
S"release()\n(release_lock() is an obsolete synonym)\n\nRelease the lock, allowing another thread that is blocked waiting for\nthe lock to acquire the lock.  The lock must be in the locked state,\nbut it needn't be locked by the same thread that unlocks it."
p67
sg3
I01
sg10
I2
sg11
S'release_lock'
p68
sasg10
I3
sg11
S'LockType'
p69
sa(dp70
g3
I01
sg10
I5
sg11
g14
sa(dp71
g3
I01
sg10
I5
sg11
S'__name__'
p72
sa(dp73
g3
I01
sg10
I5
sg11
S'__package__'
p74
sa(dp75
g1
S'_count() -> integer\n\nReturn the number of currently running Python threads, excluding \nthe main thread. The returned number comprises all threads created\nthrough `start_new_thread()` as well as `threading.Thread`, and not\nyet finished.\n\nThis function is meant for internal and specialized purposes only.\nIn most applications `threading.enumerate()` should be used instead.'
p76
sg3
I01
sg10
I2
sg11
S'_count'
p77
sa(dp78
g1
S'Thread-local data'
p79
sg3
I01
sg4
(lp80
(dp81
g3
I01
sg10
I5
sg11
g12
sa(dp82
g3
I01
sg10
I5
sg11
g14
sa(dp83
g1
S'default object formatter'
p84
sg3
I01
sg10
I2
sg11
g23
sa(dp85
g3
I01
sg10
I5
sg11
g25
sa(dp86
g3
I01
sg10
I5
sg11
g27
sa(dp87
g3
I01
sg10
I5
sg11
g29
sa(dp88
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p89
sg3
I01
sg10
I2
sg11
g32
sa(dp90
g1
S'helper for pickle'
p91
sg3
I01
sg10
I2
sg11
g35
sa(dp92
g1
S'helper for pickle'
p93
sg3
I01
sg10
I2
sg11
g38
sa(dp94
g3
I01
sg10
I5
sg11
g40
sa(dp95
g3
I01
sg10
I5
sg11
g42
sa(dp96
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p97
sg3
I01
sg10
I2
sg11
g45
sa(dp98
g3
I01
sg10
I5
sg11
g47
sa(dp99
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p100
sg3
I01
sg10
I2
sg11
g50
sasg10
I3
sg11
S'_local'
p101
sa(dp102
g1
S'allocate_lock() -> lock object\n(allocate() is an obsolete synonym)\n\nCreate a new lock object.  See help(LockType) for information about locks.'
p103
sg3
I01
sg10
I2
sg11
S'allocate'
p104
sa(dp105
g1
S'allocate_lock() -> lock object\n(allocate() is an obsolete synonym)\n\nCreate a new lock object.  See help(LockType) for information about locks.'
p106
sg3
I01
sg10
I2
sg11
S'allocate_lock'
p107
sa(dp108
g1
Nsg3
I01
sg4
(lp109
(dp110
g3
I01
sg10
I5
sg11
g12
sa(dp111
g3
I01
sg10
I5
sg11
S'__dict__'
p112
sa(dp113
g3
I01
sg10
I5
sg11
g14
sa(dp114
g1
S'default object formatter'
p115
sg3
I01
sg10
I2
sg11
g23
sa(dp116
g3
I01
sg10
I5
sg11
g25
sa(dp117
g3
I01
sg10
I5
sg11
S'__getitem__'
p118
sa(dp119
g3
I01
sg10
I5
sg11
S'__getslice__'
p120
sa(dp121
g3
I01
sg10
I5
sg11
g27
sa(dp122
g3
I01
sg10
I5
sg11
g29
sa(dp123
g3
I01
sg10
I5
sg11
S'__module__'
p124
sa(dp125
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p126
sg3
I01
sg10
I2
sg11
g32
sa(dp127
g1
Nsg3
I01
sg10
I2
sg11
g35
sa(dp128
g1
S'helper for pickle'
p129
sg3
I01
sg10
I2
sg11
g38
sa(dp130
g3
I01
sg10
I5
sg11
g40
sa(dp131
g3
I01
sg10
I5
sg11
g42
sa(dp132
g1
Nsg3
I01
sg10
I2
sg11
S'__setstate__'
p133
sa(dp134
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p135
sg3
I01
sg10
I2
sg11
g45
sa(dp136
g3
I01
sg10
I5
sg11
g47
sa(dp137
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p138
sg3
I01
sg10
I2
sg11
g50
sa(dp139
g1
Nsg3
I01
sg10
I2
sg11
S'__unicode__'
p140
sa(dp141
g3
I01
sg10
I5
sg11
S'__weakref__'
p142
sa(dp143
g3
I01
sg10
I5
sg11
S'args'
p144
sa(dp145
g3
I01
sg10
I5
sg11
S'message'
p146
sasg10
I3
sg11
S'error'
p147
sa(dp148
g1
S"exit()\n(exit_thread() is an obsolete synonym)\n\nThis is synonymous to ``raise SystemExit''.  It will cause the current\nthread to exit silently unless the exception is caught."
p149
sg3
I01
sg10
I2
sg11
S'exit'
p150
sa(dp151
g1
S"exit()\n(exit_thread() is an obsolete synonym)\n\nThis is synonymous to ``raise SystemExit''.  It will cause the current\nthread to exit silently unless the exception is caught."
p152
sg3
I01
sg10
I2
sg11
S'exit_thread'
p153
sa(dp154
g1
S"get_ident() -> integer\n\nReturn a non-zero integer that uniquely identifies the current thread\namongst other threads that exist simultaneously.\nThis may be used to identify per-thread resources.\nEven though on some platforms threads identities may appear to be\nallocated consecutive numbers starting at 1, this behavior should not\nbe relied upon, and the number should be seen purely as a magic cookie.\nA thread's identity may be reused for another thread after it exits."
p155
sg3
I01
sg10
I2
sg11
S'get_ident'
p156
sa(dp157
g1
S'interrupt_main()\n\nRaise a KeyboardInterrupt in the main thread.\nA subthread can use this function to interrupt the main thread.'
p158
sg3
I01
sg10
I2
sg11
S'interrupt_main'
p159
sa(dp160
g1
S'stack_size([size]) -> size\n\nReturn the thread stack size used when creating new threads.  The\noptional size argument specifies the stack size (in bytes) to be used\nfor subsequently created threads, and must be 0 (use platform or\nconfigured default) or a positive integer value of at least 32,768 (32k).\nIf changing the thread stack size is unsupported, a ThreadError\nexception is raised.  If the specified size is invalid, a ValueError\nexception is raised, and the stack size is unmodified.  32k bytes\n currently the minimum supported stack size value to guarantee\nsufficient stack space for the interpreter itself.\n\nNote that some platforms may have particular restrictions on values for\nthe stack size, such as requiring a minimum stack size larger than 32kB or\nrequiring allocation in multiples of the system memory page size\n- platform documentation should be referred to for more information\n(4kB pages are common; using multiples of 4096 for the stack size is\nthe suggested approach in the absence of more specific information).'
p161
sg3
I01
sg10
I2
sg11
S'stack_size'
p162
sa(dp163
g1
S'start_new_thread(function, args[, kwargs])\n(start_new() is an obsolete synonym)\n\nStart a new thread and return its identifier.  The thread will call the\nfunction with positional arguments from the tuple args and keyword arguments\ntaken from the optional dictionary kwargs.  The thread exits when the\nfunction returns; the return value is ignored.  The thread will also exit\nwhen the function raises an unhandled exception; a stack trace will be\nprinted unless the exception is SystemExit.\n'
p164
sg3
I01
sg10
I2
sg11
S'start_new'
p165
sa(dp166
g1
S'start_new_thread(function, args[, kwargs])\n(start_new() is an obsolete synonym)\n\nStart a new thread and return its identifier.  The thread will call the\nfunction with positional arguments from the tuple args and keyword arguments\ntaken from the optional dictionary kwargs.  The thread exits when the\nfunction returns; the return value is ignored.  The thread will also exit\nwhen the function raises an unhandled exception; a stack trace will be\nprinted unless the exception is SystemExit.\n'
p167
sg3
I01
sg10
I2
sg11
S'start_new_thread'
p168
sasg10
I1
sg11
S'thread'
p169
s.