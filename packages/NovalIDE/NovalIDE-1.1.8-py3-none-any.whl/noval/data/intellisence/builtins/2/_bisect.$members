(dp0
S'doc'
p1
S'Bisection algorithms.\n\nThis module provides support for maintaining a list in sorted order without\nhaving to sort the list after each insertion. For long lists of items with\nexpensive comparison operations, this can be an improvement over the more\ncommon approach.\n'
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g3
I01
sS'type'
p7
I5
sS'name'
p8
S'__doc__'
p9
sa(dp10
g3
I01
sg7
I5
sg8
S'__name__'
p11
sa(dp12
g3
I01
sg7
I5
sg8
S'__package__'
p13
sa(dp14
g1
S'bisect(a, x[, lo[, hi]]) -> index\nbisect_right(a, x[, lo[, hi]]) -> index\n\nReturn the index where to insert item x in list a, assuming a is sorted.\n\nThe return value i is such that all e in a[:i] have e <= x, and all e in\na[i:] have e > x.  So if x already appears in the list, i points just\nbeyond the rightmost x already there\n\nOptional args lo (default 0) and hi (default len(a)) bound the\nslice of a to be searched.\n'
p15
sg3
I01
sg7
I2
sg8
S'bisect'
p16
sa(dp17
g1
S'bisect_left(a, x[, lo[, hi]]) -> index\n\nReturn the index where to insert item x in list a, assuming a is sorted.\n\nThe return value i is such that all e in a[:i] have e < x, and all e in\na[i:] have e >= x.  So if x already appears in the list, i points just\nbefore the leftmost x already there.\n\nOptional args lo (default 0) and hi (default len(a)) bound the\nslice of a to be searched.\n'
p18
sg3
I01
sg7
I2
sg8
S'bisect_left'
p19
sa(dp20
g1
S'bisect(a, x[, lo[, hi]]) -> index\nbisect_right(a, x[, lo[, hi]]) -> index\n\nReturn the index where to insert item x in list a, assuming a is sorted.\n\nThe return value i is such that all e in a[:i] have e <= x, and all e in\na[i:] have e > x.  So if x already appears in the list, i points just\nbeyond the rightmost x already there\n\nOptional args lo (default 0) and hi (default len(a)) bound the\nslice of a to be searched.\n'
p21
sg3
I01
sg7
I2
sg8
S'bisect_right'
p22
sa(dp23
g1
S'insort(a, x[, lo[, hi]])\ninsort_right(a, x[, lo[, hi]])\n\nInsert item x in list a, and keep it sorted assuming a is sorted.\n\nIf x is already in a, insert it to the right of the rightmost x.\n\nOptional args lo (default 0) and hi (default len(a)) bound the\nslice of a to be searched.\n'
p24
sg3
I01
sg7
I2
sg8
S'insort'
p25
sa(dp26
g1
S'insort_left(a, x[, lo[, hi]])\n\nInsert item x in list a, and keep it sorted assuming a is sorted.\n\nIf x is already in a, insert it to the left of the leftmost x.\n\nOptional args lo (default 0) and hi (default len(a)) bound the\nslice of a to be searched.\n'
p27
sg3
I01
sg7
I2
sg8
S'insort_left'
p28
sa(dp29
g1
S'insort(a, x[, lo[, hi]])\ninsort_right(a, x[, lo[, hi]])\n\nInsert item x in list a, and keep it sorted assuming a is sorted.\n\nIf x is already in a, insert it to the right of the rightmost x.\n\nOptional args lo (default 0) and hi (default len(a)) bound the\nslice of a to be searched.\n'
p30
sg3
I01
sg7
I2
sg8
S'insort_right'
p31
sasg7
I1
sg8
S'_bisect'
p32
s.