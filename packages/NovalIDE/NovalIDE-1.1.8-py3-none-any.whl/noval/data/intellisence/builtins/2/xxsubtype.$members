(dp0
S'doc'
p1
S"xxsubtype is an example module showing how to subtype builtin types from C.\ntest_descr.py in the standard test suite requires it in order to complete.\nIf you don't care about the examples, and don't intend to run the Python\ntest suite, you can recompile Python without Modules/xxsubtype.c."
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g3
I01
sS'type'
p7
I5
sS'name'
p8
S'__doc__'
p9
sa(dp10
g3
I01
sg7
I5
sg8
S'__name__'
p11
sa(dp12
g3
I01
sg7
I5
sg8
S'__package__'
p13
sa(dp14
g1
Nsg3
I01
sg7
I2
sg8
S'bench'
p15
sa(dp16
g1
Nsg3
I01
sg4
(lp17
(dp18
g3
I01
sg7
I5
sg8
S'__cmp__'
p19
sa(dp20
g1
S'D.__contains__(k) -> True if D has a key k, else False'
p21
sg3
I01
sg7
I2
sg8
S'__contains__'
p22
sa(dp23
g3
I01
sg7
I5
sg8
S'__delattr__'
p24
sa(dp25
g3
I01
sg7
I5
sg8
S'__delitem__'
p26
sa(dp27
g3
I01
sg7
I5
sg8
g9
sa(dp28
g3
I01
sg7
I5
sg8
S'__eq__'
p29
sa(dp30
g1
S'default object formatter'
p31
sg3
I01
sg7
I2
sg8
S'__format__'
p32
sa(dp33
g3
I01
sg7
I5
sg8
S'__ge__'
p34
sa(dp35
g3
I01
sg7
I5
sg8
S'__getattribute__'
p36
sa(dp37
g1
S'x.__getitem__(y) <==> x[y]'
p38
sg3
I01
sg7
I2
sg8
S'__getitem__'
p39
sa(dp40
g3
I01
sg7
I5
sg8
S'__gt__'
p41
sa(dp42
g3
I01
sg7
I5
sg8
S'__hash__'
p43
sa(dp44
g3
I01
sg7
I5
sg8
S'__init__'
p45
sa(dp46
g3
I01
sg7
I5
sg8
S'__iter__'
p47
sa(dp48
g3
I01
sg7
I5
sg8
S'__le__'
p49
sa(dp50
g3
I01
sg7
I5
sg8
S'__len__'
p51
sa(dp52
g3
I01
sg7
I5
sg8
S'__lt__'
p53
sa(dp54
g3
I01
sg7
I5
sg8
S'__ne__'
p55
sa(dp56
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p57
sg3
I01
sg7
I2
sg8
S'__new__'
p58
sa(dp59
g1
S'helper for pickle'
p60
sg3
I01
sg7
I2
sg8
S'__reduce__'
p61
sa(dp62
g1
S'helper for pickle'
p63
sg3
I01
sg7
I2
sg8
S'__reduce_ex__'
p64
sa(dp65
g3
I01
sg7
I5
sg8
S'__repr__'
p66
sa(dp67
g3
I01
sg7
I5
sg8
S'__setattr__'
p68
sa(dp69
g3
I01
sg7
I5
sg8
S'__setitem__'
p70
sa(dp71
g1
S'D.__sizeof__() -> size of D in memory, in bytes'
p72
sg3
I01
sg7
I2
sg8
S'__sizeof__'
p73
sa(dp74
g3
I01
sg7
I5
sg8
S'__str__'
p75
sa(dp76
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p77
sg3
I01
sg7
I2
sg8
S'__subclasshook__'
p78
sa(dp79
g1
S'D.clear() -> None.  Remove all items from D.'
p80
sg3
I01
sg7
I2
sg8
S'clear'
p81
sa(dp82
g1
S'D.copy() -> a shallow copy of D'
p83
sg3
I01
sg7
I2
sg8
S'copy'
p84
sa(dp85
g1
S'dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v.\nv defaults to None.'
p86
sg3
I01
sg7
I2
sg8
S'fromkeys'
p87
sa(dp88
g1
S'D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.'
p89
sg3
I01
sg7
I2
sg8
S'get'
p90
sa(dp91
g1
S'getstate() -> state'
p92
sg3
I01
sg7
I2
sg8
S'getstate'
p93
sa(dp94
g1
S'D.has_key(k) -> True if D has a key k, else False'
p95
sg3
I01
sg7
I2
sg8
S'has_key'
p96
sa(dp97
g1
S"D.items() -> list of D's (key, value) pairs, as 2-tuples"
p98
sg3
I01
sg7
I2
sg8
S'items'
p99
sa(dp100
g1
S'D.iteritems() -> an iterator over the (key, value) items of D'
p101
sg3
I01
sg7
I2
sg8
S'iteritems'
p102
sa(dp103
g1
S'D.iterkeys() -> an iterator over the keys of D'
p104
sg3
I01
sg7
I2
sg8
S'iterkeys'
p105
sa(dp106
g1
S'D.itervalues() -> an iterator over the values of D'
p107
sg3
I01
sg7
I2
sg8
S'itervalues'
p108
sa(dp109
g1
S"D.keys() -> list of D's keys"
p110
sg3
I01
sg7
I2
sg8
S'keys'
p111
sa(dp112
g1
S'D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised'
p113
sg3
I01
sg7
I2
sg8
S'pop'
p114
sa(dp115
g1
S'D.popitem() -> (k, v), remove and return some (key, value) pair as a\n2-tuple; but raise KeyError if D is empty.'
p116
sg3
I01
sg7
I2
sg8
S'popitem'
p117
sa(dp118
g1
S'D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D'
p119
sg3
I01
sg7
I2
sg8
S'setdefault'
p120
sa(dp121
g1
S'setstate(state)'
p122
sg3
I01
sg7
I2
sg8
S'setstate'
p123
sa(dp124
g3
I01
sg7
I5
sg8
S'state'
p125
sa(dp126
g1
S'D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.\nIf E present and has a .keys() method, does:     for k in E: D[k] = E[k]\nIf E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v\nIn either case, this is followed by: for k in F: D[k] = F[k]'
p127
sg3
I01
sg7
I2
sg8
S'update'
p128
sa(dp129
g1
S"D.values() -> list of D's values"
p130
sg3
I01
sg7
I2
sg8
S'values'
p131
sa(dp132
g1
S"D.viewitems() -> a set-like object providing a view on D's items"
p133
sg3
I01
sg7
I2
sg8
S'viewitems'
p134
sa(dp135
g1
S"D.viewkeys() -> a set-like object providing a view on D's keys"
p136
sg3
I01
sg7
I2
sg8
S'viewkeys'
p137
sa(dp138
g1
S"D.viewvalues() -> an object providing a view on D's values"
p139
sg3
I01
sg7
I2
sg8
S'viewvalues'
p140
sasg7
I3
sg8
S'spamdict'
p141
sa(dp142
g1
Nsg3
I01
sg4
(lp143
(dp144
g3
I01
sg7
I5
sg8
S'__add__'
p145
sa(dp146
g3
I01
sg7
I5
sg8
g22
sa(dp147
g3
I01
sg7
I5
sg8
g24
sa(dp148
g3
I01
sg7
I5
sg8
g26
sa(dp149
g3
I01
sg7
I5
sg8
S'__delslice__'
p150
sa(dp151
g3
I01
sg7
I5
sg8
g9
sa(dp152
g3
I01
sg7
I5
sg8
g29
sa(dp153
g1
S'default object formatter'
p154
sg3
I01
sg7
I2
sg8
g32
sa(dp155
g3
I01
sg7
I5
sg8
g34
sa(dp156
g3
I01
sg7
I5
sg8
g36
sa(dp157
g1
S'x.__getitem__(y) <==> x[y]'
p158
sg3
I01
sg7
I2
sg8
g39
sa(dp159
g3
I01
sg7
I5
sg8
S'__getslice__'
p160
sa(dp161
g3
I01
sg7
I5
sg8
g41
sa(dp162
g3
I01
sg7
I5
sg8
g43
sa(dp163
g3
I01
sg7
I5
sg8
S'__iadd__'
p164
sa(dp165
g3
I01
sg7
I5
sg8
S'__imul__'
p166
sa(dp167
g3
I01
sg7
I5
sg8
g45
sa(dp168
g3
I01
sg7
I5
sg8
g47
sa(dp169
g3
I01
sg7
I5
sg8
g49
sa(dp170
g3
I01
sg7
I5
sg8
g51
sa(dp171
g3
I01
sg7
I5
sg8
g53
sa(dp172
g3
I01
sg7
I5
sg8
S'__mul__'
p173
sa(dp174
g3
I01
sg7
I5
sg8
g55
sa(dp175
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p176
sg3
I01
sg7
I2
sg8
g58
sa(dp177
g1
S'helper for pickle'
p178
sg3
I01
sg7
I2
sg8
g61
sa(dp179
g1
S'helper for pickle'
p180
sg3
I01
sg7
I2
sg8
g64
sa(dp181
g3
I01
sg7
I5
sg8
g66
sa(dp182
g1
S'L.__reversed__() -- return a reverse iterator over the list'
p183
sg3
I01
sg7
I2
sg8
S'__reversed__'
p184
sa(dp185
g3
I01
sg7
I5
sg8
S'__rmul__'
p186
sa(dp187
g3
I01
sg7
I5
sg8
g68
sa(dp188
g3
I01
sg7
I5
sg8
g70
sa(dp189
g3
I01
sg7
I5
sg8
S'__setslice__'
p190
sa(dp191
g1
S'L.__sizeof__() -- size of L in memory, in bytes'
p192
sg3
I01
sg7
I2
sg8
g73
sa(dp193
g3
I01
sg7
I5
sg8
g75
sa(dp194
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p195
sg3
I01
sg7
I2
sg8
g78
sa(dp196
g1
S'L.append(object) -- append object to end'
p197
sg3
I01
sg7
I2
sg8
S'append'
p198
sa(dp199
g1
S'classmeth(*args, **kw)'
p200
sg3
I01
sg7
I2
sg8
S'classmeth'
p201
sa(dp202
g1
S'L.count(value) -> integer -- return number of occurrences of value'
p203
sg3
I01
sg7
I2
sg8
S'count'
p204
sa(dp205
g1
S'L.extend(iterable) -- extend list by appending elements from the iterable'
p206
sg3
I01
sg7
I2
sg8
S'extend'
p207
sa(dp208
g1
S'getstate() -> state'
p209
sg3
I01
sg7
I2
sg8
g93
sa(dp210
g1
S'L.index(value, [start, [stop]]) -> integer -- return first index of value.\nRaises ValueError if the value is not present.'
p211
sg3
I01
sg7
I2
sg8
S'index'
p212
sa(dp213
g1
S'L.insert(index, object) -- insert object before index'
p214
sg3
I01
sg7
I2
sg8
S'insert'
p215
sa(dp216
g1
S'L.pop([index]) -> item -- remove and return item at index (default last).\nRaises IndexError if list is empty or index is out of range.'
p217
sg3
I01
sg7
I2
sg8
g114
sa(dp218
g1
S'L.remove(value) -- remove first occurrence of value.\nRaises ValueError if the value is not present.'
p219
sg3
I01
sg7
I2
sg8
S'remove'
p220
sa(dp221
g1
S'L.reverse() -- reverse *IN PLACE*'
p222
sg3
I01
sg7
I2
sg8
S'reverse'
p223
sa(dp224
g1
S'setstate(state)'
p225
sg3
I01
sg7
I2
sg8
g123
sa(dp226
g1
S'L.sort(cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*;\ncmp(x, y) -> -1, 0, 1'
p227
sg3
I01
sg7
I2
sg8
S'sort'
p228
sa(dp229
g3
I01
sg7
I5
sg8
g125
sa(dp230
g1
S'staticmeth(*args, **kw)'
p231
sg3
I01
sg7
I2
sg8
S'staticmeth'
p232
sasg7
I3
sg8
S'spamlist'
p233
sasg7
I1
sg8
S'xxsubtype'
p234
s.