(dp0
S'doc'
p1
S'Access to the Unix group database.\n\nGroup entries are reported as 4-tuples containing the following fields\nfrom the group database, in order:\n\n  gr_name   - name of the group\n  gr_passwd - group password (encrypted); often empty\n  gr_gid    - numeric ID of the group\n  gr_mem    - list of members\n\nThe gid is an integer, name and password are strings.  (Note that most\nusers are not explicitly listed as members of the groups they are in\naccording to the password database.  Check both databases to get\ncomplete membership information.)'
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g3
I01
sS'type'
p7
I5
sS'name'
p8
S'__doc__'
p9
sa(dp10
g3
I01
sg7
I5
sg8
S'__name__'
p11
sa(dp12
g3
I01
sg7
I5
sg8
S'__package__'
p13
sa(dp14
g1
S"getgrall() -> list of tuples\nReturn a list of all available group entries, in arbitrary order.\nAn entry whose name starts with '+' or '-' represents an instruction\nto use YP/NIS and may not be accessible via getgrnam or getgrgid."
p15
sg3
I01
sg7
I2
sg8
S'getgrall'
p16
sa(dp17
g1
S'getgrgid(id) -> (gr_name,gr_passwd,gr_gid,gr_mem)\nReturn the group database entry for the given numeric group ID.  If\nid is not valid, raise KeyError.'
p18
sg3
I01
sg7
I2
sg8
S'getgrgid'
p19
sa(dp20
g1
S'getgrnam(name) -> (gr_name,gr_passwd,gr_gid,gr_mem)\nReturn the group database entry for the given group name.  If\nname is not valid, raise KeyError.'
p21
sg3
I01
sg7
I2
sg8
S'getgrnam'
p22
sa(dp23
g1
S'grp.struct_group: Results from getgr*() routines.\n\nThis object may be accessed either as a tuple of\n  (gr_name,gr_passwd,gr_gid,gr_mem)\nor via the object attributes as named in the above tuple.\n'
p24
sg3
I01
sg4
(lp25
(dp26
g3
I01
sg7
I5
sg8
S'__add__'
p27
sa(dp28
g3
I01
sg7
I5
sg8
S'__contains__'
p29
sa(dp30
g3
I01
sg7
I5
sg8
S'__delattr__'
p31
sa(dp32
g3
I01
sg7
I5
sg8
g9
sa(dp33
g3
I01
sg7
I5
sg8
S'__eq__'
p34
sa(dp35
g1
S'default object formatter'
p36
sg3
I01
sg7
I2
sg8
S'__format__'
p37
sa(dp38
g3
I01
sg7
I5
sg8
S'__ge__'
p39
sa(dp40
g3
I01
sg7
I5
sg8
S'__getattribute__'
p41
sa(dp42
g3
I01
sg7
I5
sg8
S'__getitem__'
p43
sa(dp44
g3
I01
sg7
I5
sg8
S'__getslice__'
p45
sa(dp46
g3
I01
sg7
I5
sg8
S'__gt__'
p47
sa(dp48
g3
I01
sg7
I5
sg8
S'__hash__'
p49
sa(dp50
g3
I01
sg7
I5
sg8
S'__init__'
p51
sa(dp52
g3
I01
sg7
I5
sg8
S'__le__'
p53
sa(dp54
g3
I01
sg7
I5
sg8
S'__len__'
p55
sa(dp56
g3
I01
sg7
I5
sg8
S'__lt__'
p57
sa(dp58
g3
I01
sg7
I5
sg8
S'__mul__'
p59
sa(dp60
g3
I01
sg7
I5
sg8
S'__ne__'
p61
sa(dp62
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p63
sg3
I01
sg7
I2
sg8
S'__new__'
p64
sa(dp65
g1
Nsg3
I01
sg7
I2
sg8
S'__reduce__'
p66
sa(dp67
g1
S'helper for pickle'
p68
sg3
I01
sg7
I2
sg8
S'__reduce_ex__'
p69
sa(dp70
g3
I01
sg7
I5
sg8
S'__repr__'
p71
sa(dp72
g3
I01
sg7
I5
sg8
S'__rmul__'
p73
sa(dp74
g3
I01
sg7
I5
sg8
S'__setattr__'
p75
sa(dp76
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p77
sg3
I01
sg7
I2
sg8
S'__sizeof__'
p78
sa(dp79
g3
I01
sg7
I5
sg8
S'__str__'
p80
sa(dp81
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p82
sg3
I01
sg7
I2
sg8
S'__subclasshook__'
p83
sa(dp84
g3
I01
sg7
I5
sg8
S'gr_gid'
p85
sa(dp86
g3
I01
sg7
I5
sg8
S'gr_mem'
p87
sa(dp88
g3
I01
sg7
I5
sg8
S'gr_name'
p89
sa(dp90
g3
I01
sg7
I5
sg8
S'gr_passwd'
p91
sa(dp92
g3
I01
sg7
I5
sg8
S'n_fields'
p93
sa(dp94
g3
I01
sg7
I5
sg8
S'n_sequence_fields'
p95
sa(dp96
g3
I01
sg7
I5
sg8
S'n_unnamed_fields'
p97
sasg7
I3
sg8
S'struct_group'
p98
sasg7
I1
sg8
S'grp'
p99
s.