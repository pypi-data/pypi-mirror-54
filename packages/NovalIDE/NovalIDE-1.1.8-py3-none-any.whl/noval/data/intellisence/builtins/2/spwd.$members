(dp0
S'doc'
p1
S"This module provides access to the Unix shadow password database.\nIt is available on various Unix versions.\n\nShadow password database entries are reported as 9-tuples of type struct_spwd,\ncontaining the following items from the password database (see `<shadow.h>'):\nsp_namp, sp_pwdp, sp_lstchg, sp_min, sp_max, sp_warn, sp_inact, sp_expire, sp_flag.\nThe sp_namp and sp_pwdp are strings, the rest are integers.\nAn exception is raised if the entry asked for cannot be found.\nYou have to be root to be able to use this module."
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g3
I01
sS'type'
p7
I5
sS'name'
p8
S'__doc__'
p9
sa(dp10
g3
I01
sg7
I5
sg8
S'__name__'
p11
sa(dp12
g3
I01
sg7
I5
sg8
S'__package__'
p13
sa(dp14
g1
S'getspall() -> list_of_entries\nReturn a list of all available shadow password database entries, in arbitrary order.\nSee spwd.__doc__ for more on shadow password database entries.'
p15
sg3
I01
sg7
I2
sg8
S'getspall'
p16
sa(dp17
g1
S'getspnam(name) -> (sp_namp, sp_pwdp, sp_lstchg, sp_min, sp_max,\n                    sp_warn, sp_inact, sp_expire, sp_flag)\nReturn the shadow password database entry for the given user name.\nSee spwd.__doc__ for more on shadow password database entries.'
p18
sg3
I01
sg7
I2
sg8
S'getspnam'
p19
sa(dp20
g1
S'spwd.struct_spwd: Results from getsp*() routines.\n\nThis object may be accessed either as a 9-tuple of\n  (sp_nam,sp_pwd,sp_lstchg,sp_min,sp_max,sp_warn,sp_inact,sp_expire,sp_flag)\nor via the object attributes as named in the above tuple.'
p21
sg3
I01
sg4
(lp22
(dp23
g3
I01
sg7
I5
sg8
S'__add__'
p24
sa(dp25
g3
I01
sg7
I5
sg8
S'__contains__'
p26
sa(dp27
g3
I01
sg7
I5
sg8
S'__delattr__'
p28
sa(dp29
g3
I01
sg7
I5
sg8
g9
sa(dp30
g3
I01
sg7
I5
sg8
S'__eq__'
p31
sa(dp32
g1
S'default object formatter'
p33
sg3
I01
sg7
I2
sg8
S'__format__'
p34
sa(dp35
g3
I01
sg7
I5
sg8
S'__ge__'
p36
sa(dp37
g3
I01
sg7
I5
sg8
S'__getattribute__'
p38
sa(dp39
g3
I01
sg7
I5
sg8
S'__getitem__'
p40
sa(dp41
g3
I01
sg7
I5
sg8
S'__getslice__'
p42
sa(dp43
g3
I01
sg7
I5
sg8
S'__gt__'
p44
sa(dp45
g3
I01
sg7
I5
sg8
S'__hash__'
p46
sa(dp47
g3
I01
sg7
I5
sg8
S'__init__'
p48
sa(dp49
g3
I01
sg7
I5
sg8
S'__le__'
p50
sa(dp51
g3
I01
sg7
I5
sg8
S'__len__'
p52
sa(dp53
g3
I01
sg7
I5
sg8
S'__lt__'
p54
sa(dp55
g3
I01
sg7
I5
sg8
S'__mul__'
p56
sa(dp57
g3
I01
sg7
I5
sg8
S'__ne__'
p58
sa(dp59
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p60
sg3
I01
sg7
I2
sg8
S'__new__'
p61
sa(dp62
g1
Nsg3
I01
sg7
I2
sg8
S'__reduce__'
p63
sa(dp64
g1
S'helper for pickle'
p65
sg3
I01
sg7
I2
sg8
S'__reduce_ex__'
p66
sa(dp67
g3
I01
sg7
I5
sg8
S'__repr__'
p68
sa(dp69
g3
I01
sg7
I5
sg8
S'__rmul__'
p70
sa(dp71
g3
I01
sg7
I5
sg8
S'__setattr__'
p72
sa(dp73
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p74
sg3
I01
sg7
I2
sg8
S'__sizeof__'
p75
sa(dp76
g3
I01
sg7
I5
sg8
S'__str__'
p77
sa(dp78
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p79
sg3
I01
sg7
I2
sg8
S'__subclasshook__'
p80
sa(dp81
g3
I01
sg7
I5
sg8
S'n_fields'
p82
sa(dp83
g3
I01
sg7
I5
sg8
S'n_sequence_fields'
p84
sa(dp85
g3
I01
sg7
I5
sg8
S'n_unnamed_fields'
p86
sa(dp87
g3
I01
sg7
I5
sg8
S'sp_expire'
p88
sa(dp89
g3
I01
sg7
I5
sg8
S'sp_flag'
p90
sa(dp91
g3
I01
sg7
I5
sg8
S'sp_inact'
p92
sa(dp93
g3
I01
sg7
I5
sg8
S'sp_lstchg'
p94
sa(dp95
g3
I01
sg7
I5
sg8
S'sp_max'
p96
sa(dp97
g3
I01
sg7
I5
sg8
S'sp_min'
p98
sa(dp99
g3
I01
sg7
I5
sg8
S'sp_nam'
p100
sa(dp101
g3
I01
sg7
I5
sg8
S'sp_pwd'
p102
sa(dp103
g3
I01
sg7
I5
sg8
S'sp_warn'
p104
sasg7
I3
sg8
S'struct_spwd'
p105
sasg7
I1
sg8
S'spwd'
p106
s.