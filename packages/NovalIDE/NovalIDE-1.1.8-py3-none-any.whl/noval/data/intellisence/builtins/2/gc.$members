(dp0
S'doc'
p1
S'This module provides access to the garbage collector for reference cycles.\n\nenable() -- Enable automatic garbage collection.\ndisable() -- Disable automatic garbage collection.\nisenabled() -- Returns true if automatic collection is enabled.\ncollect() -- Do a full collection right now.\nget_count() -- Return the current collection counts.\nset_debug() -- Set debugging flags.\nget_debug() -- Get debugging flags.\nset_threshold() -- Set the collection thresholds.\nget_threshold() -- Return the current the collection thresholds.\nget_objects() -- Return a list of all objects tracked by the collector.\nis_tracked() -- Returns true if a given object is tracked.\nget_referrers() -- Return the list of objects that refer to an object.\nget_referents() -- Return the list of objects that an object refers to.\n'
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g3
I01
sS'type'
p7
I5
sS'name'
p8
S'DEBUG_COLLECTABLE'
p9
sa(dp10
g3
I01
sg7
I5
sg8
S'DEBUG_INSTANCES'
p11
sa(dp12
g3
I01
sg7
I5
sg8
S'DEBUG_LEAK'
p13
sa(dp14
g3
I01
sg7
I5
sg8
S'DEBUG_OBJECTS'
p15
sa(dp16
g3
I01
sg7
I5
sg8
S'DEBUG_SAVEALL'
p17
sa(dp18
g3
I01
sg7
I5
sg8
S'DEBUG_STATS'
p19
sa(dp20
g3
I01
sg7
I5
sg8
S'DEBUG_UNCOLLECTABLE'
p21
sa(dp22
g3
I01
sg7
I5
sg8
S'__doc__'
p23
sa(dp24
g3
I01
sg7
I5
sg8
S'__name__'
p25
sa(dp26
g3
I01
sg7
I5
sg8
S'__package__'
p27
sa(dp28
g1
S'collect([generation]) -> n\n\nWith no arguments, run a full collection.  The optional argument\nmay be an integer specifying which generation to collect.  A ValueError\nis raised if the generation number is invalid.\n\nThe number of unreachable objects is returned.\n'
p29
sg3
I01
sg7
I2
sg8
S'collect'
p30
sa(dp31
g1
S'disable() -> None\n\nDisable automatic garbage collection.\n'
p32
sg3
I01
sg7
I2
sg8
S'disable'
p33
sa(dp34
g1
S'enable() -> None\n\nEnable automatic garbage collection.\n'
p35
sg3
I01
sg7
I2
sg8
S'enable'
p36
sa(dp37
g3
I01
sg7
I5
sg8
S'garbage'
p38
sa(dp39
g1
S'get_count() -> (count0, count1, count2)\n\nReturn the current collection counts\n'
p40
sg3
I01
sg7
I2
sg8
S'get_count'
p41
sa(dp42
g1
S'get_debug() -> flags\n\nGet the garbage collection debugging flags.\n'
p43
sg3
I01
sg7
I2
sg8
S'get_debug'
p44
sa(dp45
g1
S'get_objects() -> [...]\n\nReturn a list of objects tracked by the collector (excluding the list\nreturned).\n'
p46
sg3
I01
sg7
I2
sg8
S'get_objects'
p47
sa(dp48
g1
S'get_referents(*objs) -> list\nReturn the list of objects that are directly referred to by objs.'
p49
sg3
I01
sg7
I2
sg8
S'get_referents'
p50
sa(dp51
g1
S'get_referrers(*objs) -> list\nReturn the list of objects that directly refer to any of objs.'
p52
sg3
I01
sg7
I2
sg8
S'get_referrers'
p53
sa(dp54
g1
S'get_threshold() -> (threshold0, threshold1, threshold2)\n\nReturn the current collection thresholds\n'
p55
sg3
I01
sg7
I2
sg8
S'get_threshold'
p56
sa(dp57
g1
S'is_tracked(obj) -> bool\n\nReturns true if the object is tracked by the garbage collector.\nSimple atomic objects will return false.\n'
p58
sg3
I01
sg7
I2
sg8
S'is_tracked'
p59
sa(dp60
g1
S'isenabled() -> status\n\nReturns true if automatic garbage collection is enabled.\n'
p61
sg3
I01
sg7
I2
sg8
S'isenabled'
p62
sa(dp63
g1
S'set_debug(flags) -> None\n\nSet the garbage collection debugging flags. Debugging information is\nwritten to sys.stderr.\n\nflags is an integer and can have the following bits turned on:\n\n  DEBUG_STATS - Print statistics during collection.\n  DEBUG_COLLECTABLE - Print collectable objects found.\n  DEBUG_UNCOLLECTABLE - Print unreachable but uncollectable objects found.\n  DEBUG_INSTANCES - Print instance objects.\n  DEBUG_OBJECTS - Print objects other than instances.\n  DEBUG_SAVEALL - Save objects to gc.garbage rather than freeing them.\n  DEBUG_LEAK - Debug leaking programs (everything but STATS).\n'
p64
sg3
I01
sg7
I2
sg8
S'set_debug'
p65
sa(dp66
g1
S'set_threshold(threshold0, [threshold1, threshold2]) -> None\n\nSets the collection thresholds.  Setting threshold0 to zero disables\ncollection.\n'
p67
sg3
I01
sg7
I2
sg8
S'set_threshold'
p68
sasg7
I1
sg8
S'gc'
p69
s.