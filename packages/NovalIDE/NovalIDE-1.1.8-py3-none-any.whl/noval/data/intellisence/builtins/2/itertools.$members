(dp0
S'doc'
p1
S'Functional tools for creating and using iterators.\n\nInfinite iterators:\ncount([n]) --> n, n+1, n+2, ...\ncycle(p) --> p0, p1, ... plast, p0, p1, ...\nrepeat(elem [,n]) --> elem, elem, elem, ... endlessly or up to n times\n\nIterators terminating on the shortest input sequence:\nchain(p, q, ...) --> p0, p1, ... plast, q0, q1, ... \ncompress(data, selectors) --> (d[0] if s[0]), (d[1] if s[1]), ...\ndropwhile(pred, seq) --> seq[n], seq[n+1], starting when pred fails\ngroupby(iterable[, keyfunc]) --> sub-iterators grouped by value of keyfunc(v)\nifilter(pred, seq) --> elements of seq where pred(elem) is True\nifilterfalse(pred, seq) --> elements of seq where pred(elem) is False\nislice(seq, [start,] stop [, step]) --> elements from\n       seq[start:stop:step]\nimap(fun, p, q, ...) --> fun(p0, q0), fun(p1, q1), ...\nstarmap(fun, seq) --> fun(*seq[0]), fun(*seq[1]), ...\ntee(it, n=2) --> (it1, it2 , ... itn) splits one iterator into n\ntakewhile(pred, seq) --> seq[0], seq[1], until pred fails\nizip(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ... \nizip_longest(p, q, ...) --> (p[0], q[0]), (p[1], q[1]), ... \n\nCombinatoric generators:\nproduct(p, q, ... [repeat=1]) --> cartesian product\npermutations(p[, r])\ncombinations(p, r)\ncombinations_with_replacement(p, r)\n'
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g3
I01
sS'type'
p7
I5
sS'name'
p8
S'__doc__'
p9
sa(dp10
g3
I01
sg7
I5
sg8
S'__name__'
p11
sa(dp12
g3
I01
sg7
I5
sg8
S'__package__'
p13
sa(dp14
g1
S'chain(*iterables) --> chain object\n\nReturn a chain object whose .next() method returns elements from the\nfirst iterable until it is exhausted, then elements from the next\niterable, until all of the iterables are exhausted.'
p15
sg3
I01
sg4
(lp16
(dp17
g3
I01
sg7
I5
sg8
S'__delattr__'
p18
sa(dp19
g3
I01
sg7
I5
sg8
g9
sa(dp20
g1
S'default object formatter'
p21
sg3
I01
sg7
I2
sg8
S'__format__'
p22
sa(dp23
g3
I01
sg7
I5
sg8
S'__getattribute__'
p24
sa(dp25
g3
I01
sg7
I5
sg8
S'__hash__'
p26
sa(dp27
g3
I01
sg7
I5
sg8
S'__init__'
p28
sa(dp29
g3
I01
sg7
I5
sg8
S'__iter__'
p30
sa(dp31
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p32
sg3
I01
sg7
I2
sg8
S'__new__'
p33
sa(dp34
g1
S'helper for pickle'
p35
sg3
I01
sg7
I2
sg8
S'__reduce__'
p36
sa(dp37
g1
S'helper for pickle'
p38
sg3
I01
sg7
I2
sg8
S'__reduce_ex__'
p39
sa(dp40
g3
I01
sg7
I5
sg8
S'__repr__'
p41
sa(dp42
g3
I01
sg7
I5
sg8
S'__setattr__'
p43
sa(dp44
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p45
sg3
I01
sg7
I2
sg8
S'__sizeof__'
p46
sa(dp47
g3
I01
sg7
I5
sg8
S'__str__'
p48
sa(dp49
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p50
sg3
I01
sg7
I2
sg8
S'__subclasshook__'
p51
sa(dp52
g1
S'chain.from_iterable(iterable) --> chain object\n\nAlternate chain() contructor taking a single iterable argument\nthat evaluates lazily.'
p53
sg3
I01
sg7
I2
sg8
S'from_iterable'
p54
sa(dp55
g3
I01
sg7
I5
sg8
S'next'
p56
sasg7
I3
sg8
S'chain'
p57
sa(dp58
g1
S'combinations(iterable, r) --> combinations object\n\nReturn successive r-length combinations of elements in the iterable.\n\ncombinations(range(4), 3) --> (0,1,2), (0,1,3), (0,2,3), (1,2,3)'
p59
sg3
I01
sg4
(lp60
(dp61
g3
I01
sg7
I5
sg8
g18
sa(dp62
g3
I01
sg7
I5
sg8
g9
sa(dp63
g1
S'default object formatter'
p64
sg3
I01
sg7
I2
sg8
g22
sa(dp65
g3
I01
sg7
I5
sg8
g24
sa(dp66
g3
I01
sg7
I5
sg8
g26
sa(dp67
g3
I01
sg7
I5
sg8
g28
sa(dp68
g3
I01
sg7
I5
sg8
g30
sa(dp69
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p70
sg3
I01
sg7
I2
sg8
g33
sa(dp71
g1
S'helper for pickle'
p72
sg3
I01
sg7
I2
sg8
g36
sa(dp73
g1
S'helper for pickle'
p74
sg3
I01
sg7
I2
sg8
g39
sa(dp75
g3
I01
sg7
I5
sg8
g41
sa(dp76
g3
I01
sg7
I5
sg8
g43
sa(dp77
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p78
sg3
I01
sg7
I2
sg8
g46
sa(dp79
g3
I01
sg7
I5
sg8
g48
sa(dp80
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p81
sg3
I01
sg7
I2
sg8
g51
sa(dp82
g3
I01
sg7
I5
sg8
g56
sasg7
I3
sg8
S'combinations'
p83
sa(dp84
g1
S"combinations_with_replacement(iterable, r) --> combinations_with_replacement object\n\nReturn successive r-length combinations of elements in the iterable\nallowing individual elements to have successive repeats.\ncombinations_with_replacement('ABC', 2) --> AA AB AC BB BC CC"
p85
sg3
I01
sg4
(lp86
(dp87
g3
I01
sg7
I5
sg8
g18
sa(dp88
g3
I01
sg7
I5
sg8
g9
sa(dp89
g1
S'default object formatter'
p90
sg3
I01
sg7
I2
sg8
g22
sa(dp91
g3
I01
sg7
I5
sg8
g24
sa(dp92
g3
I01
sg7
I5
sg8
g26
sa(dp93
g3
I01
sg7
I5
sg8
g28
sa(dp94
g3
I01
sg7
I5
sg8
g30
sa(dp95
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p96
sg3
I01
sg7
I2
sg8
g33
sa(dp97
g1
S'helper for pickle'
p98
sg3
I01
sg7
I2
sg8
g36
sa(dp99
g1
S'helper for pickle'
p100
sg3
I01
sg7
I2
sg8
g39
sa(dp101
g3
I01
sg7
I5
sg8
g41
sa(dp102
g3
I01
sg7
I5
sg8
g43
sa(dp103
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p104
sg3
I01
sg7
I2
sg8
g46
sa(dp105
g3
I01
sg7
I5
sg8
g48
sa(dp106
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p107
sg3
I01
sg7
I2
sg8
g51
sa(dp108
g3
I01
sg7
I5
sg8
g56
sasg7
I3
sg8
S'combinations_with_replacement'
p109
sa(dp110
g1
S'compress(data, selectors) --> iterator over selected data\n\nReturn data elements corresponding to true selector elements.\nForms a shorter iterator from selected data elements using the\nselectors to choose the data elements.'
p111
sg3
I01
sg4
(lp112
(dp113
g3
I01
sg7
I5
sg8
g18
sa(dp114
g3
I01
sg7
I5
sg8
g9
sa(dp115
g1
S'default object formatter'
p116
sg3
I01
sg7
I2
sg8
g22
sa(dp117
g3
I01
sg7
I5
sg8
g24
sa(dp118
g3
I01
sg7
I5
sg8
g26
sa(dp119
g3
I01
sg7
I5
sg8
g28
sa(dp120
g3
I01
sg7
I5
sg8
g30
sa(dp121
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p122
sg3
I01
sg7
I2
sg8
g33
sa(dp123
g1
S'helper for pickle'
p124
sg3
I01
sg7
I2
sg8
g36
sa(dp125
g1
S'helper for pickle'
p126
sg3
I01
sg7
I2
sg8
g39
sa(dp127
g3
I01
sg7
I5
sg8
g41
sa(dp128
g3
I01
sg7
I5
sg8
g43
sa(dp129
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p130
sg3
I01
sg7
I2
sg8
g46
sa(dp131
g3
I01
sg7
I5
sg8
g48
sa(dp132
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p133
sg3
I01
sg7
I2
sg8
g51
sa(dp134
g3
I01
sg7
I5
sg8
g56
sasg7
I3
sg8
S'compress'
p135
sa(dp136
g1
S'count(start=0, step=1) --> count object\n\nReturn a count object whose .next() method returns consecutive values.\nEquivalent to:\n\n    def count(firstval=0, step=1):\n        x = firstval\n        while 1:\n            yield x\n            x += step\n'
p137
sg3
I01
sg4
(lp138
(dp139
g3
I01
sg7
I5
sg8
g18
sa(dp140
g3
I01
sg7
I5
sg8
g9
sa(dp141
g1
S'default object formatter'
p142
sg3
I01
sg7
I2
sg8
g22
sa(dp143
g3
I01
sg7
I5
sg8
g24
sa(dp144
g3
I01
sg7
I5
sg8
g26
sa(dp145
g3
I01
sg7
I5
sg8
g28
sa(dp146
g3
I01
sg7
I5
sg8
g30
sa(dp147
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p148
sg3
I01
sg7
I2
sg8
g33
sa(dp149
g1
S'Return state information for pickling.'
p150
sg3
I01
sg7
I2
sg8
g36
sa(dp151
g1
S'helper for pickle'
p152
sg3
I01
sg7
I2
sg8
g39
sa(dp153
g3
I01
sg7
I5
sg8
g41
sa(dp154
g3
I01
sg7
I5
sg8
g43
sa(dp155
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p156
sg3
I01
sg7
I2
sg8
g46
sa(dp157
g3
I01
sg7
I5
sg8
g48
sa(dp158
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p159
sg3
I01
sg7
I2
sg8
g51
sa(dp160
g3
I01
sg7
I5
sg8
g56
sasg7
I3
sg8
S'count'
p161
sa(dp162
g1
S'cycle(iterable) --> cycle object\n\nReturn elements from the iterable until it is exhausted.\nThen repeat the sequence indefinitely.'
p163
sg3
I01
sg4
(lp164
(dp165
g3
I01
sg7
I5
sg8
g18
sa(dp166
g3
I01
sg7
I5
sg8
g9
sa(dp167
g1
S'default object formatter'
p168
sg3
I01
sg7
I2
sg8
g22
sa(dp169
g3
I01
sg7
I5
sg8
g24
sa(dp170
g3
I01
sg7
I5
sg8
g26
sa(dp171
g3
I01
sg7
I5
sg8
g28
sa(dp172
g3
I01
sg7
I5
sg8
g30
sa(dp173
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p174
sg3
I01
sg7
I2
sg8
g33
sa(dp175
g1
S'helper for pickle'
p176
sg3
I01
sg7
I2
sg8
g36
sa(dp177
g1
S'helper for pickle'
p178
sg3
I01
sg7
I2
sg8
g39
sa(dp179
g3
I01
sg7
I5
sg8
g41
sa(dp180
g3
I01
sg7
I5
sg8
g43
sa(dp181
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p182
sg3
I01
sg7
I2
sg8
g46
sa(dp183
g3
I01
sg7
I5
sg8
g48
sa(dp184
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p185
sg3
I01
sg7
I2
sg8
g51
sa(dp186
g3
I01
sg7
I5
sg8
g56
sasg7
I3
sg8
S'cycle'
p187
sa(dp188
g1
S'dropwhile(predicate, iterable) --> dropwhile object\n\nDrop items from the iterable while predicate(item) is true.\nAfterwards, return every element until the iterable is exhausted.'
p189
sg3
I01
sg4
(lp190
(dp191
g3
I01
sg7
I5
sg8
g18
sa(dp192
g3
I01
sg7
I5
sg8
g9
sa(dp193
g1
S'default object formatter'
p194
sg3
I01
sg7
I2
sg8
g22
sa(dp195
g3
I01
sg7
I5
sg8
g24
sa(dp196
g3
I01
sg7
I5
sg8
g26
sa(dp197
g3
I01
sg7
I5
sg8
g28
sa(dp198
g3
I01
sg7
I5
sg8
g30
sa(dp199
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p200
sg3
I01
sg7
I2
sg8
g33
sa(dp201
g1
S'helper for pickle'
p202
sg3
I01
sg7
I2
sg8
g36
sa(dp203
g1
S'helper for pickle'
p204
sg3
I01
sg7
I2
sg8
g39
sa(dp205
g3
I01
sg7
I5
sg8
g41
sa(dp206
g3
I01
sg7
I5
sg8
g43
sa(dp207
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p208
sg3
I01
sg7
I2
sg8
g46
sa(dp209
g3
I01
sg7
I5
sg8
g48
sa(dp210
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p211
sg3
I01
sg7
I2
sg8
g51
sa(dp212
g3
I01
sg7
I5
sg8
g56
sasg7
I3
sg8
S'dropwhile'
p213
sa(dp214
g1
S'groupby(iterable[, keyfunc]) -> create an iterator which returns\n(key, sub-iterator) grouped by each value of key(value).\n'
p215
sg3
I01
sg4
(lp216
(dp217
g3
I01
sg7
I5
sg8
g18
sa(dp218
g3
I01
sg7
I5
sg8
g9
sa(dp219
g1
S'default object formatter'
p220
sg3
I01
sg7
I2
sg8
g22
sa(dp221
g3
I01
sg7
I5
sg8
g24
sa(dp222
g3
I01
sg7
I5
sg8
g26
sa(dp223
g3
I01
sg7
I5
sg8
g28
sa(dp224
g3
I01
sg7
I5
sg8
g30
sa(dp225
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p226
sg3
I01
sg7
I2
sg8
g33
sa(dp227
g1
S'helper for pickle'
p228
sg3
I01
sg7
I2
sg8
g36
sa(dp229
g1
S'helper for pickle'
p230
sg3
I01
sg7
I2
sg8
g39
sa(dp231
g3
I01
sg7
I5
sg8
g41
sa(dp232
g3
I01
sg7
I5
sg8
g43
sa(dp233
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p234
sg3
I01
sg7
I2
sg8
g46
sa(dp235
g3
I01
sg7
I5
sg8
g48
sa(dp236
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p237
sg3
I01
sg7
I2
sg8
g51
sa(dp238
g3
I01
sg7
I5
sg8
g56
sasg7
I3
sg8
S'groupby'
p239
sa(dp240
g1
S'ifilter(function or None, sequence) --> ifilter object\n\nReturn those items of sequence for which function(item) is true.\nIf function is None, return the items that are true.'
p241
sg3
I01
sg4
(lp242
(dp243
g3
I01
sg7
I5
sg8
g18
sa(dp244
g3
I01
sg7
I5
sg8
g9
sa(dp245
g1
S'default object formatter'
p246
sg3
I01
sg7
I2
sg8
g22
sa(dp247
g3
I01
sg7
I5
sg8
g24
sa(dp248
g3
I01
sg7
I5
sg8
g26
sa(dp249
g3
I01
sg7
I5
sg8
g28
sa(dp250
g3
I01
sg7
I5
sg8
g30
sa(dp251
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p252
sg3
I01
sg7
I2
sg8
g33
sa(dp253
g1
S'helper for pickle'
p254
sg3
I01
sg7
I2
sg8
g36
sa(dp255
g1
S'helper for pickle'
p256
sg3
I01
sg7
I2
sg8
g39
sa(dp257
g3
I01
sg7
I5
sg8
g41
sa(dp258
g3
I01
sg7
I5
sg8
g43
sa(dp259
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p260
sg3
I01
sg7
I2
sg8
g46
sa(dp261
g3
I01
sg7
I5
sg8
g48
sa(dp262
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p263
sg3
I01
sg7
I2
sg8
g51
sa(dp264
g3
I01
sg7
I5
sg8
g56
sasg7
I3
sg8
S'ifilter'
p265
sa(dp266
g1
S'ifilterfalse(function or None, sequence) --> ifilterfalse object\n\nReturn those items of sequence for which function(item) is false.\nIf function is None, return the items that are false.'
p267
sg3
I01
sg4
(lp268
(dp269
g3
I01
sg7
I5
sg8
g18
sa(dp270
g3
I01
sg7
I5
sg8
g9
sa(dp271
g1
S'default object formatter'
p272
sg3
I01
sg7
I2
sg8
g22
sa(dp273
g3
I01
sg7
I5
sg8
g24
sa(dp274
g3
I01
sg7
I5
sg8
g26
sa(dp275
g3
I01
sg7
I5
sg8
g28
sa(dp276
g3
I01
sg7
I5
sg8
g30
sa(dp277
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p278
sg3
I01
sg7
I2
sg8
g33
sa(dp279
g1
S'helper for pickle'
p280
sg3
I01
sg7
I2
sg8
g36
sa(dp281
g1
S'helper for pickle'
p282
sg3
I01
sg7
I2
sg8
g39
sa(dp283
g3
I01
sg7
I5
sg8
g41
sa(dp284
g3
I01
sg7
I5
sg8
g43
sa(dp285
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p286
sg3
I01
sg7
I2
sg8
g46
sa(dp287
g3
I01
sg7
I5
sg8
g48
sa(dp288
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p289
sg3
I01
sg7
I2
sg8
g51
sa(dp290
g3
I01
sg7
I5
sg8
g56
sasg7
I3
sg8
S'ifilterfalse'
p291
sa(dp292
g1
S'imap(func, *iterables) --> imap object\n\nMake an iterator that computes the function using arguments from\neach of the iterables.  Like map() except that it returns\nan iterator instead of a list and that it stops when the shortest\niterable is exhausted instead of filling in None for shorter\niterables.'
p293
sg3
I01
sg4
(lp294
(dp295
g3
I01
sg7
I5
sg8
g18
sa(dp296
g3
I01
sg7
I5
sg8
g9
sa(dp297
g1
S'default object formatter'
p298
sg3
I01
sg7
I2
sg8
g22
sa(dp299
g3
I01
sg7
I5
sg8
g24
sa(dp300
g3
I01
sg7
I5
sg8
g26
sa(dp301
g3
I01
sg7
I5
sg8
g28
sa(dp302
g3
I01
sg7
I5
sg8
g30
sa(dp303
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p304
sg3
I01
sg7
I2
sg8
g33
sa(dp305
g1
S'helper for pickle'
p306
sg3
I01
sg7
I2
sg8
g36
sa(dp307
g1
S'helper for pickle'
p308
sg3
I01
sg7
I2
sg8
g39
sa(dp309
g3
I01
sg7
I5
sg8
g41
sa(dp310
g3
I01
sg7
I5
sg8
g43
sa(dp311
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p312
sg3
I01
sg7
I2
sg8
g46
sa(dp313
g3
I01
sg7
I5
sg8
g48
sa(dp314
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p315
sg3
I01
sg7
I2
sg8
g51
sa(dp316
g3
I01
sg7
I5
sg8
g56
sasg7
I3
sg8
S'imap'
p317
sa(dp318
g1
S'islice(iterable, [start,] stop [, step]) --> islice object\n\nReturn an iterator whose next() method returns selected values from an\niterable.  If start is specified, will skip all preceding elements;\notherwise, start defaults to zero.  Step defaults to one.  If\nspecified as another value, step determines how many values are \nskipped between successive calls.  Works like a slice() on a list\nbut returns an iterator.'
p319
sg3
I01
sg4
(lp320
(dp321
g3
I01
sg7
I5
sg8
g18
sa(dp322
g3
I01
sg7
I5
sg8
g9
sa(dp323
g1
S'default object formatter'
p324
sg3
I01
sg7
I2
sg8
g22
sa(dp325
g3
I01
sg7
I5
sg8
g24
sa(dp326
g3
I01
sg7
I5
sg8
g26
sa(dp327
g3
I01
sg7
I5
sg8
g28
sa(dp328
g3
I01
sg7
I5
sg8
g30
sa(dp329
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p330
sg3
I01
sg7
I2
sg8
g33
sa(dp331
g1
S'helper for pickle'
p332
sg3
I01
sg7
I2
sg8
g36
sa(dp333
g1
S'helper for pickle'
p334
sg3
I01
sg7
I2
sg8
g39
sa(dp335
g3
I01
sg7
I5
sg8
g41
sa(dp336
g3
I01
sg7
I5
sg8
g43
sa(dp337
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p338
sg3
I01
sg7
I2
sg8
g46
sa(dp339
g3
I01
sg7
I5
sg8
g48
sa(dp340
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p341
sg3
I01
sg7
I2
sg8
g51
sa(dp342
g3
I01
sg7
I5
sg8
g56
sasg7
I3
sg8
S'islice'
p343
sa(dp344
g1
S'izip(iter1 [,iter2 [...]]) --> izip object\n\nReturn a izip object whose .next() method returns a tuple where\nthe i-th element comes from the i-th iterable argument.  The .next()\nmethod continues until the shortest iterable in the argument sequence\nis exhausted and then it raises StopIteration.  Works like the zip()\nfunction but consumes less memory by returning an iterator instead of\na list.'
p345
sg3
I01
sg4
(lp346
(dp347
g3
I01
sg7
I5
sg8
g18
sa(dp348
g3
I01
sg7
I5
sg8
g9
sa(dp349
g1
S'default object formatter'
p350
sg3
I01
sg7
I2
sg8
g22
sa(dp351
g3
I01
sg7
I5
sg8
g24
sa(dp352
g3
I01
sg7
I5
sg8
g26
sa(dp353
g3
I01
sg7
I5
sg8
g28
sa(dp354
g3
I01
sg7
I5
sg8
g30
sa(dp355
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p356
sg3
I01
sg7
I2
sg8
g33
sa(dp357
g1
S'helper for pickle'
p358
sg3
I01
sg7
I2
sg8
g36
sa(dp359
g1
S'helper for pickle'
p360
sg3
I01
sg7
I2
sg8
g39
sa(dp361
g3
I01
sg7
I5
sg8
g41
sa(dp362
g3
I01
sg7
I5
sg8
g43
sa(dp363
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p364
sg3
I01
sg7
I2
sg8
g46
sa(dp365
g3
I01
sg7
I5
sg8
g48
sa(dp366
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p367
sg3
I01
sg7
I2
sg8
g51
sa(dp368
g3
I01
sg7
I5
sg8
g56
sasg7
I3
sg8
S'izip'
p369
sa(dp370
g1
S'izip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --> izip_longest object\n\nReturn an izip_longest object whose .next() method returns a tuple where\nthe i-th element comes from the i-th iterable argument.  The .next()\nmethod continues until the longest iterable in the argument sequence\nis exhausted and then it raises StopIteration.  When the shorter iterables\nare exhausted, the fillvalue is substituted in their place.  The fillvalue\ndefaults to None or can be specified by a keyword argument.\n'
p371
sg3
I01
sg4
(lp372
(dp373
g3
I01
sg7
I5
sg8
g18
sa(dp374
g3
I01
sg7
I5
sg8
g9
sa(dp375
g1
S'default object formatter'
p376
sg3
I01
sg7
I2
sg8
g22
sa(dp377
g3
I01
sg7
I5
sg8
g24
sa(dp378
g3
I01
sg7
I5
sg8
g26
sa(dp379
g3
I01
sg7
I5
sg8
g28
sa(dp380
g3
I01
sg7
I5
sg8
g30
sa(dp381
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p382
sg3
I01
sg7
I2
sg8
g33
sa(dp383
g1
S'helper for pickle'
p384
sg3
I01
sg7
I2
sg8
g36
sa(dp385
g1
S'helper for pickle'
p386
sg3
I01
sg7
I2
sg8
g39
sa(dp387
g3
I01
sg7
I5
sg8
g41
sa(dp388
g3
I01
sg7
I5
sg8
g43
sa(dp389
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p390
sg3
I01
sg7
I2
sg8
g46
sa(dp391
g3
I01
sg7
I5
sg8
g48
sa(dp392
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p393
sg3
I01
sg7
I2
sg8
g51
sa(dp394
g3
I01
sg7
I5
sg8
g56
sasg7
I3
sg8
S'izip_longest'
p395
sa(dp396
g1
S'permutations(iterable[, r]) --> permutations object\n\nReturn successive r-length permutations of elements in the iterable.\n\npermutations(range(3), 2) --> (0,1), (0,2), (1,0), (1,2), (2,0), (2,1)'
p397
sg3
I01
sg4
(lp398
(dp399
g3
I01
sg7
I5
sg8
g18
sa(dp400
g3
I01
sg7
I5
sg8
g9
sa(dp401
g1
S'default object formatter'
p402
sg3
I01
sg7
I2
sg8
g22
sa(dp403
g3
I01
sg7
I5
sg8
g24
sa(dp404
g3
I01
sg7
I5
sg8
g26
sa(dp405
g3
I01
sg7
I5
sg8
g28
sa(dp406
g3
I01
sg7
I5
sg8
g30
sa(dp407
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p408
sg3
I01
sg7
I2
sg8
g33
sa(dp409
g1
S'helper for pickle'
p410
sg3
I01
sg7
I2
sg8
g36
sa(dp411
g1
S'helper for pickle'
p412
sg3
I01
sg7
I2
sg8
g39
sa(dp413
g3
I01
sg7
I5
sg8
g41
sa(dp414
g3
I01
sg7
I5
sg8
g43
sa(dp415
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p416
sg3
I01
sg7
I2
sg8
g46
sa(dp417
g3
I01
sg7
I5
sg8
g48
sa(dp418
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p419
sg3
I01
sg7
I2
sg8
g51
sa(dp420
g3
I01
sg7
I5
sg8
g56
sasg7
I3
sg8
S'permutations'
p421
sa(dp422
g1
S"product(*iterables) --> product object\n\nCartesian product of input iterables.  Equivalent to nested for-loops.\n\nFor example, product(A, B) returns the same as:  ((x,y) for x in A for y in B).\nThe leftmost iterators are in the outermost for-loop, so the output tuples\ncycle in a manner similar to an odometer (with the rightmost element changing\non every iteration).\n\nTo compute the product of an iterable with itself, specify the number\nof repetitions with the optional repeat keyword argument. For example,\nproduct(A, repeat=4) means the same as product(A, A, A, A).\n\nproduct('ab', range(3)) --> ('a',0) ('a',1) ('a',2) ('b',0) ('b',1) ('b',2)\nproduct((0,1), (0,1), (0,1)) --> (0,0,0) (0,0,1) (0,1,0) (0,1,1) (1,0,0) ..."
p423
sg3
I01
sg4
(lp424
(dp425
g3
I01
sg7
I5
sg8
g18
sa(dp426
g3
I01
sg7
I5
sg8
g9
sa(dp427
g1
S'default object formatter'
p428
sg3
I01
sg7
I2
sg8
g22
sa(dp429
g3
I01
sg7
I5
sg8
g24
sa(dp430
g3
I01
sg7
I5
sg8
g26
sa(dp431
g3
I01
sg7
I5
sg8
g28
sa(dp432
g3
I01
sg7
I5
sg8
g30
sa(dp433
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p434
sg3
I01
sg7
I2
sg8
g33
sa(dp435
g1
S'helper for pickle'
p436
sg3
I01
sg7
I2
sg8
g36
sa(dp437
g1
S'helper for pickle'
p438
sg3
I01
sg7
I2
sg8
g39
sa(dp439
g3
I01
sg7
I5
sg8
g41
sa(dp440
g3
I01
sg7
I5
sg8
g43
sa(dp441
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p442
sg3
I01
sg7
I2
sg8
g46
sa(dp443
g3
I01
sg7
I5
sg8
g48
sa(dp444
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p445
sg3
I01
sg7
I2
sg8
g51
sa(dp446
g3
I01
sg7
I5
sg8
g56
sasg7
I3
sg8
S'product'
p447
sa(dp448
g1
S'repeat(object [,times]) -> create an iterator which returns the object\nfor the specified number of times.  If not specified, returns the object\nendlessly.'
p449
sg3
I01
sg4
(lp450
(dp451
g3
I01
sg7
I5
sg8
g18
sa(dp452
g3
I01
sg7
I5
sg8
g9
sa(dp453
g1
S'default object formatter'
p454
sg3
I01
sg7
I2
sg8
g22
sa(dp455
g3
I01
sg7
I5
sg8
g24
sa(dp456
g3
I01
sg7
I5
sg8
g26
sa(dp457
g3
I01
sg7
I5
sg8
g28
sa(dp458
g3
I01
sg7
I5
sg8
g30
sa(dp459
g1
S'Private method returning an estimate of len(list(it)).'
p460
sg3
I01
sg7
I2
sg8
S'__length_hint__'
p461
sa(dp462
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p463
sg3
I01
sg7
I2
sg8
g33
sa(dp464
g1
S'helper for pickle'
p465
sg3
I01
sg7
I2
sg8
g36
sa(dp466
g1
S'helper for pickle'
p467
sg3
I01
sg7
I2
sg8
g39
sa(dp468
g3
I01
sg7
I5
sg8
g41
sa(dp469
g3
I01
sg7
I5
sg8
g43
sa(dp470
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p471
sg3
I01
sg7
I2
sg8
g46
sa(dp472
g3
I01
sg7
I5
sg8
g48
sa(dp473
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p474
sg3
I01
sg7
I2
sg8
g51
sa(dp475
g3
I01
sg7
I5
sg8
g56
sasg7
I3
sg8
S'repeat'
p476
sa(dp477
g1
S'starmap(function, sequence) --> starmap object\n\nReturn an iterator whose values are returned from the function evaluated\nwith an argument tuple taken from the given sequence.'
p478
sg3
I01
sg4
(lp479
(dp480
g3
I01
sg7
I5
sg8
g18
sa(dp481
g3
I01
sg7
I5
sg8
g9
sa(dp482
g1
S'default object formatter'
p483
sg3
I01
sg7
I2
sg8
g22
sa(dp484
g3
I01
sg7
I5
sg8
g24
sa(dp485
g3
I01
sg7
I5
sg8
g26
sa(dp486
g3
I01
sg7
I5
sg8
g28
sa(dp487
g3
I01
sg7
I5
sg8
g30
sa(dp488
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p489
sg3
I01
sg7
I2
sg8
g33
sa(dp490
g1
S'helper for pickle'
p491
sg3
I01
sg7
I2
sg8
g36
sa(dp492
g1
S'helper for pickle'
p493
sg3
I01
sg7
I2
sg8
g39
sa(dp494
g3
I01
sg7
I5
sg8
g41
sa(dp495
g3
I01
sg7
I5
sg8
g43
sa(dp496
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p497
sg3
I01
sg7
I2
sg8
g46
sa(dp498
g3
I01
sg7
I5
sg8
g48
sa(dp499
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p500
sg3
I01
sg7
I2
sg8
g51
sa(dp501
g3
I01
sg7
I5
sg8
g56
sasg7
I3
sg8
S'starmap'
p502
sa(dp503
g1
S'takewhile(predicate, iterable) --> takewhile object\n\nReturn successive entries from an iterable as long as the \npredicate evaluates to true for each entry.'
p504
sg3
I01
sg4
(lp505
(dp506
g3
I01
sg7
I5
sg8
g18
sa(dp507
g3
I01
sg7
I5
sg8
g9
sa(dp508
g1
S'default object formatter'
p509
sg3
I01
sg7
I2
sg8
g22
sa(dp510
g3
I01
sg7
I5
sg8
g24
sa(dp511
g3
I01
sg7
I5
sg8
g26
sa(dp512
g3
I01
sg7
I5
sg8
g28
sa(dp513
g3
I01
sg7
I5
sg8
g30
sa(dp514
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p515
sg3
I01
sg7
I2
sg8
g33
sa(dp516
g1
S'helper for pickle'
p517
sg3
I01
sg7
I2
sg8
g36
sa(dp518
g1
S'helper for pickle'
p519
sg3
I01
sg7
I2
sg8
g39
sa(dp520
g3
I01
sg7
I5
sg8
g41
sa(dp521
g3
I01
sg7
I5
sg8
g43
sa(dp522
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p523
sg3
I01
sg7
I2
sg8
g46
sa(dp524
g3
I01
sg7
I5
sg8
g48
sa(dp525
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p526
sg3
I01
sg7
I2
sg8
g51
sa(dp527
g3
I01
sg7
I5
sg8
g56
sasg7
I3
sg8
S'takewhile'
p528
sa(dp529
g1
S'tee(iterable, n=2) --> tuple of n independent iterators.'
p530
sg3
I01
sg7
I2
sg8
S'tee'
p531
sasg7
I1
sg8
S'itertools'
p532
s.