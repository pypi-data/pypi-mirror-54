(dp0
S'doc'
p1
S'This module provides various functions to manipulate time values.\n\nThere are two standard representations of time.  One is the number\nof seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer\nor a floating point number (to represent fractions of seconds).\nThe Epoch is system-defined; on Unix, it is generally January 1st, 1970.\nThe actual value can be retrieved by calling gmtime(0).\n\nThe other representation is a tuple of 9 integers giving local time.\nThe tuple items are:\n  year (four digits, e.g. 1998)\n  month (1-12)\n  day (1-31)\n  hours (0-23)\n  minutes (0-59)\n  seconds (0-59)\n  weekday (0-6, Monday is 0)\n  Julian day (day in the year, 1-366)\n  DST (Daylight Savings Time) flag (-1, 0 or 1)\nIf the DST flag is 0, the time is given in the regular time zone;\nif it is 1, the time is given in the DST time zone;\nif it is -1, mktime() should guess based on the date and time.\n\nVariables:\n\ntimezone -- difference in seconds between UTC and local standard time\naltzone -- difference in  seconds between UTC and local DST time\ndaylight -- whether local time should reflect DST\ntzname -- tuple of (standard time zone name, DST time zone name)\n\nFunctions:\n\ntime() -- return current time in seconds since the Epoch as a float\nclock() -- return CPU time since process start as a float\nsleep() -- delay for a number of seconds given as a float\ngmtime() -- convert seconds since Epoch to UTC tuple\nlocaltime() -- convert seconds since Epoch to local time tuple\nasctime() -- convert time tuple to string\nctime() -- convert time in seconds to string\nmktime() -- convert local time tuple to seconds since Epoch\nstrftime() -- convert time tuple to string according to format specification\nstrptime() -- parse string to time tuple according to format specification\ntzset() -- change the local timezone'
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g3
I01
sS'type'
p7
I5
sS'name'
p8
S'__doc__'
p9
sa(dp10
g3
I01
sg7
I5
sg8
S'__name__'
p11
sa(dp12
g3
I01
sg7
I5
sg8
S'__package__'
p13
sa(dp14
g3
I01
sg7
I5
sg8
S'accept2dyear'
p15
sa(dp16
g3
I01
sg7
I5
sg8
S'altzone'
p17
sa(dp18
g1
S"asctime([tuple]) -> string\n\nConvert a time tuple to a string, e.g. 'Sat Jun 06 16:26:11 1998'.\nWhen the time tuple is not present, current time as returned by localtime()\nis used."
p19
sg3
I01
sg7
I2
sg8
S'asctime'
p20
sa(dp21
g1
S'clock() -> floating point number\n\nReturn the CPU time or real time since the start of the process or since\nthe first call to clock().  This has as much precision as the system\nrecords.'
p22
sg3
I01
sg7
I2
sg8
S'clock'
p23
sa(dp24
g1
S'ctime(seconds) -> string\n\nConvert a time in seconds since the Epoch to a string in local time.\nThis is equivalent to asctime(localtime(seconds)). When the time tuple is\nnot present, current time as returned by localtime() is used.'
p25
sg3
I01
sg7
I2
sg8
S'ctime'
p26
sa(dp27
g3
I01
sg7
I5
sg8
S'daylight'
p28
sa(dp29
g1
S"gmtime([seconds]) -> (tm_year, tm_mon, tm_mday, tm_hour, tm_min,\n                       tm_sec, tm_wday, tm_yday, tm_isdst)\n\nConvert seconds since the Epoch to a time tuple expressing UTC (a.k.a.\nGMT).  When 'seconds' is not passed in, convert the current time instead."
p30
sg3
I01
sg7
I2
sg8
S'gmtime'
p31
sa(dp32
g1
S"localtime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour,tm_min,\n                          tm_sec,tm_wday,tm_yday,tm_isdst)\n\nConvert seconds since the Epoch to a time tuple expressing local time.\nWhen 'seconds' is not passed in, convert the current time instead."
p33
sg3
I01
sg7
I2
sg8
S'localtime'
p34
sa(dp35
g1
S'mktime(tuple) -> floating point number\n\nConvert a time tuple in local time to seconds since the Epoch.'
p36
sg3
I01
sg7
I2
sg8
S'mktime'
p37
sa(dp38
g1
S'sleep(seconds)\n\nDelay execution for a given number of seconds.  The argument may be\na floating point number for subsecond precision.'
p39
sg3
I01
sg7
I2
sg8
S'sleep'
p40
sa(dp41
g1
S'strftime(format[, tuple]) -> string\n\nConvert a time tuple to a string according to a format specification.\nSee the library reference manual for formatting codes. When the time tuple\nis not present, current time as returned by localtime() is used.'
p42
sg3
I01
sg7
I2
sg8
S'strftime'
p43
sa(dp44
g1
S'strptime(string, format) -> struct_time\n\nParse a string to a time tuple according to a format specification.\nSee the library reference manual for formatting codes (same as strftime()).'
p45
sg3
I01
sg7
I2
sg8
S'strptime'
p46
sa(dp47
g1
S"The time value as returned by gmtime(), localtime(), and strptime(), and\n accepted by asctime(), mktime() and strftime().  May be considered as a\n sequence of 9 integers.\n\n Note that several fields' values are not the same as those defined by\n the C language standard for struct tm.  For example, the value of the\n field tm_year is the actual year, not year - 1900.  See individual\n fields' descriptions for details."
p48
sg3
I01
sg4
(lp49
(dp50
g3
I01
sg7
I5
sg8
S'__add__'
p51
sa(dp52
g3
I01
sg7
I5
sg8
S'__contains__'
p53
sa(dp54
g3
I01
sg7
I5
sg8
S'__delattr__'
p55
sa(dp56
g3
I01
sg7
I5
sg8
g9
sa(dp57
g3
I01
sg7
I5
sg8
S'__eq__'
p58
sa(dp59
g1
S'default object formatter'
p60
sg3
I01
sg7
I2
sg8
S'__format__'
p61
sa(dp62
g3
I01
sg7
I5
sg8
S'__ge__'
p63
sa(dp64
g3
I01
sg7
I5
sg8
S'__getattribute__'
p65
sa(dp66
g3
I01
sg7
I5
sg8
S'__getitem__'
p67
sa(dp68
g3
I01
sg7
I5
sg8
S'__getslice__'
p69
sa(dp70
g3
I01
sg7
I5
sg8
S'__gt__'
p71
sa(dp72
g3
I01
sg7
I5
sg8
S'__hash__'
p73
sa(dp74
g3
I01
sg7
I5
sg8
S'__init__'
p75
sa(dp76
g3
I01
sg7
I5
sg8
S'__le__'
p77
sa(dp78
g3
I01
sg7
I5
sg8
S'__len__'
p79
sa(dp80
g3
I01
sg7
I5
sg8
S'__lt__'
p81
sa(dp82
g3
I01
sg7
I5
sg8
S'__mul__'
p83
sa(dp84
g3
I01
sg7
I5
sg8
S'__ne__'
p85
sa(dp86
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p87
sg3
I01
sg7
I2
sg8
S'__new__'
p88
sa(dp89
g1
Nsg3
I01
sg7
I2
sg8
S'__reduce__'
p90
sa(dp91
g1
S'helper for pickle'
p92
sg3
I01
sg7
I2
sg8
S'__reduce_ex__'
p93
sa(dp94
g3
I01
sg7
I5
sg8
S'__repr__'
p95
sa(dp96
g3
I01
sg7
I5
sg8
S'__rmul__'
p97
sa(dp98
g3
I01
sg7
I5
sg8
S'__setattr__'
p99
sa(dp100
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p101
sg3
I01
sg7
I2
sg8
S'__sizeof__'
p102
sa(dp103
g3
I01
sg7
I5
sg8
S'__str__'
p104
sa(dp105
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p106
sg3
I01
sg7
I2
sg8
S'__subclasshook__'
p107
sa(dp108
g3
I01
sg7
I5
sg8
S'n_fields'
p109
sa(dp110
g3
I01
sg7
I5
sg8
S'n_sequence_fields'
p111
sa(dp112
g3
I01
sg7
I5
sg8
S'n_unnamed_fields'
p113
sa(dp114
g3
I01
sg7
I5
sg8
S'tm_hour'
p115
sa(dp116
g3
I01
sg7
I5
sg8
S'tm_isdst'
p117
sa(dp118
g3
I01
sg7
I5
sg8
S'tm_mday'
p119
sa(dp120
g3
I01
sg7
I5
sg8
S'tm_min'
p121
sa(dp122
g3
I01
sg7
I5
sg8
S'tm_mon'
p123
sa(dp124
g3
I01
sg7
I5
sg8
S'tm_sec'
p125
sa(dp126
g3
I01
sg7
I5
sg8
S'tm_wday'
p127
sa(dp128
g3
I01
sg7
I5
sg8
S'tm_yday'
p129
sa(dp130
g3
I01
sg7
I5
sg8
S'tm_year'
p131
sasg7
I3
sg8
S'struct_time'
p132
sa(dp133
g1
S'time() -> floating point number\n\nReturn the current time in seconds since the Epoch.\nFractions of a second may be present if the system clock provides them.'
p134
sg3
I01
sg7
I2
sg8
S'time'
p135
sa(dp136
g3
I01
sg7
I5
sg8
S'timezone'
p137
sa(dp138
g3
I01
sg7
I5
sg8
S'tzname'
p139
sa(dp140
g1
S"tzset()\n\nInitialize, or reinitialize, the local timezone to the value stored in\nos.environ['TZ']. The TZ environment variable should be specified in\nstandard Unix timezone format as documented in the tzset man page\n(eg. 'US/Eastern', 'Europe/Amsterdam'). Unknown timezones will silently\nfall back to UTC. If the TZ environment variable is not set, the local\ntimezone is set to the systems best guess of wallclock time.\nChanging the TZ environment variable without calling tzset *may* change\nthe local timezone used by methods such as localtime, but this behaviour\nshould not be relied on."
p141
sg3
I01
sg7
I2
sg8
S'tzset'
p142
sasg7
I1
sg8
S'time'
p143
s.