(dp0
S'doc'
p1
S"The io module provides the Python interfaces to stream handling. The\nbuiltin open function is defined in this module.\n\nAt the top of the I/O hierarchy is the abstract base class IOBase. It\ndefines the basic interface to a stream. Note, however, that there is no\nseparation between reading and writing to streams; implementations are\nallowed to raise an IOError if they do not support a given operation.\n\nExtending IOBase is RawIOBase which deals simply with the reading and\nwriting of raw bytes to a stream. FileIO subclasses RawIOBase to provide\nan interface to OS files.\n\nBufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its\nsubclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer\nstreams that are readable, writable, and both respectively.\nBufferedRandom provides a buffered interface to random access\nstreams. BytesIO is a simple stream of in-memory bytes.\n\nAnother IOBase subclass, TextIOBase, deals with the encoding and decoding\nof streams into text. TextIOWrapper, which extends it, is a buffered text\ninterface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO\nis a in-memory stream for text.\n\nArgument names are not part of the specification, and only the arguments\nof open() are intended to be used as keyword arguments.\n\ndata:\n\nDEFAULT_BUFFER_SIZE\n\n   An int containing the default buffer size used by the module's buffered\n   I/O classes. open() uses the file's blksize (as obtained by os.stat) if\n   possible.\n"
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g1
S'Exception raised when I/O would block on a non-blocking I/O stream'
p7
sg3
I01
sg4
(lp8
(dp9
g3
I01
sS'type'
p10
I5
sS'name'
p11
S'__delattr__'
p12
sa(dp13
g3
I01
sg10
I5
sg11
S'__dict__'
p14
sa(dp15
g3
I01
sg10
I5
sg11
S'__doc__'
p16
sa(dp17
g1
S'default object formatter'
p18
sg3
I01
sg10
I2
sg11
S'__format__'
p19
sa(dp20
g3
I01
sg10
I5
sg11
S'__getattribute__'
p21
sa(dp22
g3
I01
sg10
I5
sg11
S'__getitem__'
p23
sa(dp24
g3
I01
sg10
I5
sg11
S'__getslice__'
p25
sa(dp26
g3
I01
sg10
I5
sg11
S'__hash__'
p27
sa(dp28
g3
I01
sg10
I5
sg11
S'__init__'
p29
sa(dp30
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p31
sg3
I01
sg10
I2
sg11
S'__new__'
p32
sa(dp33
g1
Nsg3
I01
sg10
I2
sg11
S'__reduce__'
p34
sa(dp35
g1
S'helper for pickle'
p36
sg3
I01
sg10
I2
sg11
S'__reduce_ex__'
p37
sa(dp38
g3
I01
sg10
I5
sg11
S'__repr__'
p39
sa(dp40
g3
I01
sg10
I5
sg11
S'__setattr__'
p41
sa(dp42
g1
Nsg3
I01
sg10
I2
sg11
S'__setstate__'
p43
sa(dp44
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p45
sg3
I01
sg10
I2
sg11
S'__sizeof__'
p46
sa(dp47
g3
I01
sg10
I5
sg11
S'__str__'
p48
sa(dp49
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p50
sg3
I01
sg10
I2
sg11
S'__subclasshook__'
p51
sa(dp52
g1
Nsg3
I01
sg10
I2
sg11
S'__unicode__'
p53
sa(dp54
g3
I01
sg10
I5
sg11
S'args'
p55
sa(dp56
g3
I01
sg10
I5
sg11
S'characters_written'
p57
sa(dp58
g3
I01
sg10
I5
sg11
S'errno'
p59
sa(dp60
g3
I01
sg10
I5
sg11
S'filename'
p61
sa(dp62
g3
I01
sg10
I5
sg11
S'message'
p63
sa(dp64
g3
I01
sg10
I5
sg11
S'strerror'
p65
sasg10
I3
sg11
S'BlockingIOError'
p66
sa(dp67
g1
S'A buffered reader and writer object together.\n\nA buffered reader object and buffered writer object put together to\nform a sequential IO object that can read and write. This is typically\nused with a socket or two-way pipe.\n\nreader and writer are RawIOBase objects that are readable and\nwriteable respectively. If the buffer_size is omitted it defaults to\nDEFAULT_BUFFER_SIZE.\n'
p68
sg3
I01
sg4
(lp69
(dp70
g3
I01
sg10
I5
sg11
g12
sa(dp71
g3
I01
sg10
I5
sg11
g16
sa(dp72
g1
Nsg3
I01
sg10
I2
sg11
S'__enter__'
p73
sa(dp74
g1
Nsg3
I01
sg10
I2
sg11
S'__exit__'
p75
sa(dp76
g1
S'default object formatter'
p77
sg3
I01
sg10
I2
sg11
g19
sa(dp78
g3
I01
sg10
I5
sg11
g21
sa(dp79
g3
I01
sg10
I5
sg11
g27
sa(dp80
g3
I01
sg10
I5
sg11
g29
sa(dp81
g3
I01
sg10
I5
sg11
S'__iter__'
p82
sa(dp83
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p84
sg3
I01
sg10
I2
sg11
g32
sa(dp85
g1
S'helper for pickle'
p86
sg3
I01
sg10
I2
sg11
g34
sa(dp87
g1
S'helper for pickle'
p88
sg3
I01
sg10
I2
sg11
g37
sa(dp89
g3
I01
sg10
I5
sg11
g39
sa(dp90
g3
I01
sg10
I5
sg11
g41
sa(dp91
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p92
sg3
I01
sg10
I2
sg11
g46
sa(dp93
g3
I01
sg10
I5
sg11
g48
sa(dp94
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p95
sg3
I01
sg10
I2
sg11
g51
sa(dp96
g1
Nsg3
I01
sg10
I2
sg11
S'_checkClosed'
p97
sa(dp98
g1
Nsg3
I01
sg10
I2
sg11
S'_checkReadable'
p99
sa(dp100
g1
Nsg3
I01
sg10
I2
sg11
S'_checkSeekable'
p101
sa(dp102
g1
Nsg3
I01
sg10
I2
sg11
S'_checkWritable'
p103
sa(dp104
g1
Nsg3
I01
sg10
I2
sg11
S'close'
p105
sa(dp106
g3
I01
sg10
I5
sg11
S'closed'
p107
sa(dp108
g1
S'Disconnect this buffer from its underlying raw stream and return it.\n\nAfter the raw stream has been detached, the buffer is in an unusable\nstate.\n'
p109
sg3
I01
sg10
I2
sg11
S'detach'
p110
sa(dp111
g1
S'Returns underlying file descriptor if one exists.\n\nAn IOError is raised if the IO object does not use a file descriptor.\n'
p112
sg3
I01
sg10
I2
sg11
S'fileno'
p113
sa(dp114
g1
Nsg3
I01
sg10
I2
sg11
S'flush'
p115
sa(dp116
g1
Nsg3
I01
sg10
I2
sg11
S'isatty'
p117
sa(dp118
g3
I01
sg10
I5
sg11
S'next'
p119
sa(dp120
g1
Nsg3
I01
sg10
I2
sg11
S'peek'
p121
sa(dp122
g1
Nsg3
I01
sg10
I2
sg11
S'read'
p123
sa(dp124
g1
Nsg3
I01
sg10
I2
sg11
S'read1'
p125
sa(dp126
g1
Nsg3
I01
sg10
I2
sg11
S'readable'
p127
sa(dp128
g1
Nsg3
I01
sg10
I2
sg11
S'readinto'
p129
sa(dp130
g1
S"Read and return a line from the stream.\n\nIf limit is specified, at most limit bytes will be read.\n\nThe line terminator is always b'\\n' for binary files; for text\nfiles, the newlines argument to open can be used to select the line\nterminator(s) recognized.\n"
p131
sg3
I01
sg10
I2
sg11
S'readline'
p132
sa(dp133
g1
S'Return a list of lines from the stream.\n\nhint can be specified to control the number of lines read: no more\nlines will be read if the total size (in bytes/characters) of all\nlines so far exceeds hint.'
p134
sg3
I01
sg10
I2
sg11
S'readlines'
p135
sa(dp136
g1
S'Change stream position.\n\nChange the stream position to the given byte offset. The offset is\ninterpreted relative to the position indicated by whence.  Values\nfor whence are:\n\n* 0 -- start of stream (the default); offset should be zero or positive\n* 1 -- current stream position; offset may be negative\n* 2 -- end of stream; offset is usually negative\n\nReturn the new absolute position.'
p137
sg3
I01
sg10
I2
sg11
S'seek'
p138
sa(dp139
g1
S'Return whether object supports random access.\n\nIf False, seek(), tell() and truncate() will raise IOError.\nThis method may need to do a test seek().'
p140
sg3
I01
sg10
I2
sg11
S'seekable'
p141
sa(dp142
g1
S'Return current stream position.'
p143
sg3
I01
sg10
I2
sg11
S'tell'
p144
sa(dp145
g1
S'Truncate file to size bytes.\n\nFile pointer is left unchanged.  Size defaults to the current IO\nposition as reported by tell().  Returns the new size.'
p146
sg3
I01
sg10
I2
sg11
S'truncate'
p147
sa(dp148
g1
Nsg3
I01
sg10
I2
sg11
S'writable'
p149
sa(dp150
g1
Nsg3
I01
sg10
I2
sg11
S'write'
p151
sa(dp152
g1
Nsg3
I01
sg10
I2
sg11
S'writelines'
p153
sasg10
I3
sg11
S'BufferedRWPair'
p154
sa(dp155
g1
S"A buffered interface to random access streams.\n\nThe constructor creates a reader and writer for a seekable stream,\nraw, given in the first argument. If the buffer_size is omitted it\ndefaults to DEFAULT_BUFFER_SIZE. max_buffer_size isn't used anymore.\n"
p156
sg3
I01
sg4
(lp157
(dp158
g3
I01
sg10
I5
sg11
g12
sa(dp159
g3
I01
sg10
I5
sg11
g16
sa(dp160
g1
Nsg3
I01
sg10
I2
sg11
g73
sa(dp161
g1
Nsg3
I01
sg10
I2
sg11
g75
sa(dp162
g1
S'default object formatter'
p163
sg3
I01
sg10
I2
sg11
g19
sa(dp164
g3
I01
sg10
I5
sg11
g21
sa(dp165
g3
I01
sg10
I5
sg11
g27
sa(dp166
g3
I01
sg10
I5
sg11
g29
sa(dp167
g3
I01
sg10
I5
sg11
g82
sa(dp168
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p169
sg3
I01
sg10
I2
sg11
g32
sa(dp170
g1
S'helper for pickle'
p171
sg3
I01
sg10
I2
sg11
g34
sa(dp172
g1
S'helper for pickle'
p173
sg3
I01
sg10
I2
sg11
g37
sa(dp174
g3
I01
sg10
I5
sg11
g39
sa(dp175
g3
I01
sg10
I5
sg11
g41
sa(dp176
g1
Nsg3
I01
sg10
I2
sg11
g46
sa(dp177
g3
I01
sg10
I5
sg11
g48
sa(dp178
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p179
sg3
I01
sg10
I2
sg11
g51
sa(dp180
g1
Nsg3
I01
sg10
I2
sg11
g97
sa(dp181
g1
Nsg3
I01
sg10
I2
sg11
g99
sa(dp182
g1
Nsg3
I01
sg10
I2
sg11
g101
sa(dp183
g1
Nsg3
I01
sg10
I2
sg11
g103
sa(dp184
g1
Nsg3
I01
sg10
I2
sg11
g105
sa(dp185
g3
I01
sg10
I5
sg11
g107
sa(dp186
g1
Nsg3
I01
sg10
I2
sg11
g110
sa(dp187
g1
Nsg3
I01
sg10
I2
sg11
g113
sa(dp188
g1
Nsg3
I01
sg10
I2
sg11
g115
sa(dp189
g1
Nsg3
I01
sg10
I2
sg11
g117
sa(dp190
g3
I01
sg10
I5
sg11
S'mode'
p191
sa(dp192
g3
I01
sg10
I5
sg11
g11
sa(dp193
g3
I01
sg10
I5
sg11
g119
sa(dp194
g1
Nsg3
I01
sg10
I2
sg11
g121
sa(dp195
g3
I01
sg10
I5
sg11
S'raw'
p196
sa(dp197
g1
Nsg3
I01
sg10
I2
sg11
g123
sa(dp198
g1
Nsg3
I01
sg10
I2
sg11
g125
sa(dp199
g1
Nsg3
I01
sg10
I2
sg11
g127
sa(dp200
g1
Nsg3
I01
sg10
I2
sg11
g129
sa(dp201
g1
Nsg3
I01
sg10
I2
sg11
g132
sa(dp202
g1
S'Return a list of lines from the stream.\n\nhint can be specified to control the number of lines read: no more\nlines will be read if the total size (in bytes/characters) of all\nlines so far exceeds hint.'
p203
sg3
I01
sg10
I2
sg11
g135
sa(dp204
g1
Nsg3
I01
sg10
I2
sg11
g138
sa(dp205
g1
Nsg3
I01
sg10
I2
sg11
g141
sa(dp206
g1
Nsg3
I01
sg10
I2
sg11
g144
sa(dp207
g1
Nsg3
I01
sg10
I2
sg11
g147
sa(dp208
g1
Nsg3
I01
sg10
I2
sg11
g149
sa(dp209
g1
Nsg3
I01
sg10
I2
sg11
g151
sa(dp210
g1
Nsg3
I01
sg10
I2
sg11
g153
sasg10
I3
sg11
S'BufferedRandom'
p211
sa(dp212
g1
S'Create a new buffered reader using the given readable raw IO object.'
p213
sg3
I01
sg4
(lp214
(dp215
g3
I01
sg10
I5
sg11
g12
sa(dp216
g3
I01
sg10
I5
sg11
g16
sa(dp217
g1
Nsg3
I01
sg10
I2
sg11
g73
sa(dp218
g1
Nsg3
I01
sg10
I2
sg11
g75
sa(dp219
g1
S'default object formatter'
p220
sg3
I01
sg10
I2
sg11
g19
sa(dp221
g3
I01
sg10
I5
sg11
g21
sa(dp222
g3
I01
sg10
I5
sg11
g27
sa(dp223
g3
I01
sg10
I5
sg11
g29
sa(dp224
g3
I01
sg10
I5
sg11
g82
sa(dp225
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p226
sg3
I01
sg10
I2
sg11
g32
sa(dp227
g1
S'helper for pickle'
p228
sg3
I01
sg10
I2
sg11
g34
sa(dp229
g1
S'helper for pickle'
p230
sg3
I01
sg10
I2
sg11
g37
sa(dp231
g3
I01
sg10
I5
sg11
g39
sa(dp232
g3
I01
sg10
I5
sg11
g41
sa(dp233
g1
Nsg3
I01
sg10
I2
sg11
g46
sa(dp234
g3
I01
sg10
I5
sg11
g48
sa(dp235
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p236
sg3
I01
sg10
I2
sg11
g51
sa(dp237
g1
Nsg3
I01
sg10
I2
sg11
g97
sa(dp238
g1
Nsg3
I01
sg10
I2
sg11
g99
sa(dp239
g1
Nsg3
I01
sg10
I2
sg11
g101
sa(dp240
g1
Nsg3
I01
sg10
I2
sg11
g103
sa(dp241
g1
Nsg3
I01
sg10
I2
sg11
g105
sa(dp242
g3
I01
sg10
I5
sg11
g107
sa(dp243
g1
Nsg3
I01
sg10
I2
sg11
g110
sa(dp244
g1
Nsg3
I01
sg10
I2
sg11
g113
sa(dp245
g1
Nsg3
I01
sg10
I2
sg11
g115
sa(dp246
g1
Nsg3
I01
sg10
I2
sg11
g117
sa(dp247
g3
I01
sg10
I5
sg11
g191
sa(dp248
g3
I01
sg10
I5
sg11
g11
sa(dp249
g3
I01
sg10
I5
sg11
g119
sa(dp250
g1
Nsg3
I01
sg10
I2
sg11
g121
sa(dp251
g3
I01
sg10
I5
sg11
g196
sa(dp252
g1
Nsg3
I01
sg10
I2
sg11
g123
sa(dp253
g1
Nsg3
I01
sg10
I2
sg11
g125
sa(dp254
g1
Nsg3
I01
sg10
I2
sg11
g127
sa(dp255
g1
Nsg3
I01
sg10
I2
sg11
g129
sa(dp256
g1
Nsg3
I01
sg10
I2
sg11
g132
sa(dp257
g1
S'Return a list of lines from the stream.\n\nhint can be specified to control the number of lines read: no more\nlines will be read if the total size (in bytes/characters) of all\nlines so far exceeds hint.'
p258
sg3
I01
sg10
I2
sg11
g135
sa(dp259
g1
Nsg3
I01
sg10
I2
sg11
g138
sa(dp260
g1
Nsg3
I01
sg10
I2
sg11
g141
sa(dp261
g1
Nsg3
I01
sg10
I2
sg11
g144
sa(dp262
g1
Nsg3
I01
sg10
I2
sg11
g147
sa(dp263
g1
Nsg3
I01
sg10
I2
sg11
g149
sa(dp264
g1
S'Write the given buffer to the IO stream.\n\nReturns the number of bytes written, which is always len(b).\n\nRaises BlockingIOError if the buffer is full and the\nunderlying raw stream cannot accept more data at the moment.\n'
p265
sg3
I01
sg10
I2
sg11
g151
sa(dp266
g1
Nsg3
I01
sg10
I2
sg11
g153
sasg10
I3
sg11
S'BufferedReader'
p267
sa(dp268
g1
S"A buffer for a writeable sequential RawIO object.\n\nThe constructor creates a BufferedWriter for the given writeable raw\nstream. If the buffer_size is not given, it defaults to\nDEFAULT_BUFFER_SIZE. max_buffer_size isn't used anymore.\n"
p269
sg3
I01
sg4
(lp270
(dp271
g3
I01
sg10
I5
sg11
g12
sa(dp272
g3
I01
sg10
I5
sg11
g16
sa(dp273
g1
Nsg3
I01
sg10
I2
sg11
g73
sa(dp274
g1
Nsg3
I01
sg10
I2
sg11
g75
sa(dp275
g1
S'default object formatter'
p276
sg3
I01
sg10
I2
sg11
g19
sa(dp277
g3
I01
sg10
I5
sg11
g21
sa(dp278
g3
I01
sg10
I5
sg11
g27
sa(dp279
g3
I01
sg10
I5
sg11
g29
sa(dp280
g3
I01
sg10
I5
sg11
g82
sa(dp281
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p282
sg3
I01
sg10
I2
sg11
g32
sa(dp283
g1
S'helper for pickle'
p284
sg3
I01
sg10
I2
sg11
g34
sa(dp285
g1
S'helper for pickle'
p286
sg3
I01
sg10
I2
sg11
g37
sa(dp287
g3
I01
sg10
I5
sg11
g39
sa(dp288
g3
I01
sg10
I5
sg11
g41
sa(dp289
g1
Nsg3
I01
sg10
I2
sg11
g46
sa(dp290
g3
I01
sg10
I5
sg11
g48
sa(dp291
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p292
sg3
I01
sg10
I2
sg11
g51
sa(dp293
g1
Nsg3
I01
sg10
I2
sg11
g97
sa(dp294
g1
Nsg3
I01
sg10
I2
sg11
g99
sa(dp295
g1
Nsg3
I01
sg10
I2
sg11
g101
sa(dp296
g1
Nsg3
I01
sg10
I2
sg11
g103
sa(dp297
g1
Nsg3
I01
sg10
I2
sg11
g105
sa(dp298
g3
I01
sg10
I5
sg11
g107
sa(dp299
g1
Nsg3
I01
sg10
I2
sg11
g110
sa(dp300
g1
Nsg3
I01
sg10
I2
sg11
g113
sa(dp301
g1
Nsg3
I01
sg10
I2
sg11
g115
sa(dp302
g1
Nsg3
I01
sg10
I2
sg11
g117
sa(dp303
g3
I01
sg10
I5
sg11
g191
sa(dp304
g3
I01
sg10
I5
sg11
g11
sa(dp305
g3
I01
sg10
I5
sg11
g119
sa(dp306
g3
I01
sg10
I5
sg11
g196
sa(dp307
g1
S"Read and return up to n bytes.\n\nIf the argument is omitted, None, or negative, reads and\nreturns all data until EOF.\n\nIf the argument is positive, and the underlying raw stream is\nnot 'interactive', multiple raw reads may be issued to satisfy\nthe byte count (unless EOF is reached first).  But for\ninteractive raw streams (as well as sockets and pipes), at most\none raw read will be issued, and a short result does not imply\nthat EOF is imminent.\n\nReturns an empty bytes object on EOF.\n\nReturns None if the underlying raw stream was open in non-blocking\nmode and no data is available at the moment.\n"
p308
sg3
I01
sg10
I2
sg11
g123
sa(dp309
g1
S'Read and return up to n bytes, with at most one read() call\nto the underlying raw stream. A short result does not imply\nthat EOF is imminent.\n\nReturns an empty bytes object on EOF.\n'
p310
sg3
I01
sg10
I2
sg11
g125
sa(dp311
g1
Nsg3
I01
sg10
I2
sg11
g127
sa(dp312
g1
Nsg3
I01
sg10
I2
sg11
g129
sa(dp313
g1
S"Read and return a line from the stream.\n\nIf limit is specified, at most limit bytes will be read.\n\nThe line terminator is always b'\\n' for binary files; for text\nfiles, the newlines argument to open can be used to select the line\nterminator(s) recognized.\n"
p314
sg3
I01
sg10
I2
sg11
g132
sa(dp315
g1
S'Return a list of lines from the stream.\n\nhint can be specified to control the number of lines read: no more\nlines will be read if the total size (in bytes/characters) of all\nlines so far exceeds hint.'
p316
sg3
I01
sg10
I2
sg11
g135
sa(dp317
g1
Nsg3
I01
sg10
I2
sg11
g138
sa(dp318
g1
Nsg3
I01
sg10
I2
sg11
g141
sa(dp319
g1
Nsg3
I01
sg10
I2
sg11
g144
sa(dp320
g1
Nsg3
I01
sg10
I2
sg11
g147
sa(dp321
g1
Nsg3
I01
sg10
I2
sg11
g149
sa(dp322
g1
Nsg3
I01
sg10
I2
sg11
g151
sa(dp323
g1
Nsg3
I01
sg10
I2
sg11
g153
sasg10
I3
sg11
S'BufferedWriter'
p324
sa(dp325
g1
S'BytesIO([buffer]) -> object\n\nCreate a buffered I/O implementation using an in-memory bytes\nbuffer, ready for reading and writing.'
p326
sg3
I01
sg4
(lp327
(dp328
g3
I01
sg10
I5
sg11
g12
sa(dp329
g3
I01
sg10
I5
sg11
g16
sa(dp330
g1
Nsg3
I01
sg10
I2
sg11
g73
sa(dp331
g1
Nsg3
I01
sg10
I2
sg11
g75
sa(dp332
g1
S'default object formatter'
p333
sg3
I01
sg10
I2
sg11
g19
sa(dp334
g3
I01
sg10
I5
sg11
g21
sa(dp335
g1
Nsg3
I01
sg10
I2
sg11
S'__getstate__'
p336
sa(dp337
g3
I01
sg10
I5
sg11
g27
sa(dp338
g3
I01
sg10
I5
sg11
g29
sa(dp339
g3
I01
sg10
I5
sg11
g82
sa(dp340
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p341
sg3
I01
sg10
I2
sg11
g32
sa(dp342
g1
S'helper for pickle'
p343
sg3
I01
sg10
I2
sg11
g34
sa(dp344
g1
S'helper for pickle'
p345
sg3
I01
sg10
I2
sg11
g37
sa(dp346
g3
I01
sg10
I5
sg11
g39
sa(dp347
g3
I01
sg10
I5
sg11
g41
sa(dp348
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp349
g1
Nsg3
I01
sg10
I2
sg11
g46
sa(dp350
g3
I01
sg10
I5
sg11
g48
sa(dp351
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p352
sg3
I01
sg10
I2
sg11
g51
sa(dp353
g1
Nsg3
I01
sg10
I2
sg11
g97
sa(dp354
g1
Nsg3
I01
sg10
I2
sg11
g99
sa(dp355
g1
Nsg3
I01
sg10
I2
sg11
g101
sa(dp356
g1
Nsg3
I01
sg10
I2
sg11
g103
sa(dp357
g1
S'close() -> None.  Disable all I/O operations.'
p358
sg3
I01
sg10
I2
sg11
g105
sa(dp359
g3
I01
sg10
I5
sg11
g107
sa(dp360
g1
S'Disconnect this buffer from its underlying raw stream and return it.\n\nAfter the raw stream has been detached, the buffer is in an unusable\nstate.\n'
p361
sg3
I01
sg10
I2
sg11
g110
sa(dp362
g1
S'Returns underlying file descriptor if one exists.\n\nAn IOError is raised if the IO object does not use a file descriptor.\n'
p363
sg3
I01
sg10
I2
sg11
g113
sa(dp364
g1
S'flush() -> None.  Does nothing.'
p365
sg3
I01
sg10
I2
sg11
g115
sa(dp366
g1
S'getvalue() -> bytes.\n\nRetrieve the entire contents of the BytesIO object.'
p367
sg3
I01
sg10
I2
sg11
S'getvalue'
p368
sa(dp369
g1
S'isatty() -> False.\n\nAlways returns False since BytesIO objects are not connected\nto a tty-like device.'
p370
sg3
I01
sg10
I2
sg11
g117
sa(dp371
g3
I01
sg10
I5
sg11
g119
sa(dp372
g1
S'read([size]) -> read at most size bytes, returned as a string.\n\nIf the size argument is negative, read until EOF is reached.\nReturn an empty string at EOF.'
p373
sg3
I01
sg10
I2
sg11
g123
sa(dp374
g1
S'read1(size) -> read at most size bytes, returned as a string.\n\nIf the size argument is negative or omitted, read until EOF is reached.\nReturn an empty string at EOF.'
p375
sg3
I01
sg10
I2
sg11
g125
sa(dp376
g1
S'readable() -> bool. Returns True if the IO object can be read.'
p377
sg3
I01
sg10
I2
sg11
g127
sa(dp378
g1
S'readinto(b) -> int.  Read up to len(b) bytes into b.\n\nReturns number of bytes read (0 for EOF), or None if the object\nis set not to block and has no data to read.'
p379
sg3
I01
sg10
I2
sg11
g129
sa(dp380
g1
S'readline([size]) -> next line from the file, as a string.\n\nRetain newline.  A non-negative size argument limits the maximum\nnumber of bytes to return (an incomplete line may be returned then).\nReturn an empty string at EOF.\n'
p381
sg3
I01
sg10
I2
sg11
g132
sa(dp382
g1
S'readlines([size]) -> list of strings, each a line from the file.\n\nCall readline() repeatedly and return a list of the lines so read.\nThe optional size argument, if given, is an approximate bound on the\ntotal number of bytes in the lines returned.\n'
p383
sg3
I01
sg10
I2
sg11
g135
sa(dp384
g1
S'seek(pos[, whence]) -> int.  Change stream position.\n\nSeek to byte offset pos relative to position indicated by whence:\n     0  Start of stream (the default).  pos should be >= 0;\n     1  Current position - pos may be negative;\n     2  End of stream - pos usually negative.\nReturns the new absolute position.'
p385
sg3
I01
sg10
I2
sg11
g138
sa(dp386
g1
S'seekable() -> bool. Returns True if the IO object can be seeked.'
p387
sg3
I01
sg10
I2
sg11
g141
sa(dp388
g1
S'tell() -> current file position, an integer\n'
p389
sg3
I01
sg10
I2
sg11
g144
sa(dp390
g1
S'truncate([size]) -> int.  Truncate the file to at most size bytes.\n\nSize defaults to the current file position, as returned by tell().\nThe current file position is unchanged.  Returns the new size.\n'
p391
sg3
I01
sg10
I2
sg11
g147
sa(dp392
g1
S'writable() -> bool. Returns True if the IO object can be written.'
p393
sg3
I01
sg10
I2
sg11
g149
sa(dp394
g1
S'write(bytes) -> int.  Write bytes to file.\n\nReturn the number of bytes written.'
p395
sg3
I01
sg10
I2
sg11
g151
sa(dp396
g1
S'writelines(sequence_of_strings) -> None.  Write strings to the file.\n\nNote that newlines are not added.  The sequence can be any iterable\nobject producing strings. This is equivalent to calling write() for\neach string.'
p397
sg3
I01
sg10
I2
sg11
g153
sasg10
I3
sg11
S'BytesIO'
p398
sa(dp399
g3
I01
sg10
I5
sg11
S'DEFAULT_BUFFER_SIZE'
p400
sa(dp401
g1
S"file(name: str[, mode: str]) -> file IO object\n\nOpen a file.  The mode can be 'r' (default), 'w' or 'a' for reading,\nwriting or appending.  The file will be created if it doesn't exist\nwhen opened for writing or appending; it will be truncated when\nopened for writing.  Add a '+' to the mode to allow simultaneous\nreading and writing."
p402
sg3
I01
sg4
(lp403
(dp404
g3
I01
sg10
I5
sg11
g12
sa(dp405
g3
I01
sg10
I5
sg11
g16
sa(dp406
g1
Nsg3
I01
sg10
I2
sg11
g73
sa(dp407
g1
Nsg3
I01
sg10
I2
sg11
g75
sa(dp408
g1
S'default object formatter'
p409
sg3
I01
sg10
I2
sg11
g19
sa(dp410
g3
I01
sg10
I5
sg11
g21
sa(dp411
g3
I01
sg10
I5
sg11
g27
sa(dp412
g3
I01
sg10
I5
sg11
g29
sa(dp413
g3
I01
sg10
I5
sg11
g82
sa(dp414
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p415
sg3
I01
sg10
I2
sg11
g32
sa(dp416
g1
S'helper for pickle'
p417
sg3
I01
sg10
I2
sg11
g34
sa(dp418
g1
S'helper for pickle'
p419
sg3
I01
sg10
I2
sg11
g37
sa(dp420
g3
I01
sg10
I5
sg11
g39
sa(dp421
g3
I01
sg10
I5
sg11
g41
sa(dp422
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p423
sg3
I01
sg10
I2
sg11
g46
sa(dp424
g3
I01
sg10
I5
sg11
g48
sa(dp425
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p426
sg3
I01
sg10
I2
sg11
g51
sa(dp427
g1
Nsg3
I01
sg10
I2
sg11
g97
sa(dp428
g1
Nsg3
I01
sg10
I2
sg11
g99
sa(dp429
g1
Nsg3
I01
sg10
I2
sg11
g101
sa(dp430
g1
Nsg3
I01
sg10
I2
sg11
g103
sa(dp431
g1
S'close() -> None.  Close the file.\n\nA closed file cannot be used for further I/O operations.  close() may be\ncalled more than once without error.'
p432
sg3
I01
sg10
I2
sg11
g105
sa(dp433
g3
I01
sg10
I5
sg11
g107
sa(dp434
g3
I01
sg10
I5
sg11
S'closefd'
p435
sa(dp436
g1
S'fileno() -> int.  Return the underlying file descriptor (an integer).'
p437
sg3
I01
sg10
I2
sg11
g113
sa(dp438
g1
S'Flush write buffers, if applicable.\n\nThis is not implemented for read-only and non-blocking streams.\n'
p439
sg3
I01
sg10
I2
sg11
g115
sa(dp440
g1
S'isatty() -> bool.  True if the file is connected to a TTY device.'
p441
sg3
I01
sg10
I2
sg11
g117
sa(dp442
g3
I01
sg10
I5
sg11
g191
sa(dp443
g3
I01
sg10
I5
sg11
g119
sa(dp444
g1
S"read(size: int) -> bytes.  read at most size bytes, returned as bytes.\n\nOnly makes one system call, so less data may be returned than requested\nIn non-blocking mode, returns None if no data is available.\nOn end-of-file, returns ''."
p445
sg3
I01
sg10
I2
sg11
g123
sa(dp446
g1
S'readable() -> bool.  True if file was opened in a read mode.'
p447
sg3
I01
sg10
I2
sg11
g127
sa(dp448
g1
S"readall() -> bytes.  read all data from the file, returned as bytes.\n\nIn non-blocking mode, returns as much as is immediately available,\nor None if no data is available.  On end-of-file, returns ''."
p449
sg3
I01
sg10
I2
sg11
S'readall'
p450
sa(dp451
g1
S'readinto() -> Same as RawIOBase.readinto().'
p452
sg3
I01
sg10
I2
sg11
g129
sa(dp453
g1
S"Read and return a line from the stream.\n\nIf limit is specified, at most limit bytes will be read.\n\nThe line terminator is always b'\\n' for binary files; for text\nfiles, the newlines argument to open can be used to select the line\nterminator(s) recognized.\n"
p454
sg3
I01
sg10
I2
sg11
g132
sa(dp455
g1
S'Return a list of lines from the stream.\n\nhint can be specified to control the number of lines read: no more\nlines will be read if the total size (in bytes/characters) of all\nlines so far exceeds hint.'
p456
sg3
I01
sg10
I2
sg11
g135
sa(dp457
g1
S'seek(offset: int[, whence: int]) -> int.  Move to new file position\nand return the file position.\n\nArgument offset is a byte count.  Optional argument whence defaults to\nSEEK_SET or 0 (offset from start of file, offset should be >= 0); other values\nare SEEK_CUR or 1 (move relative to current position, positive or negative),\nand SEEK_END or 2 (move relative to end of file, usually negative, although\nmany platforms allow seeking beyond the end of a file).\n\nNote that not all file objects are seekable.'
p458
sg3
I01
sg10
I2
sg11
g138
sa(dp459
g1
S'seekable() -> bool.  True if file supports random-access.'
p460
sg3
I01
sg10
I2
sg11
g141
sa(dp461
g1
S'tell() -> int.  Current file position.\n\nCan raise OSError for non seekable files.'
p462
sg3
I01
sg10
I2
sg11
g144
sa(dp463
g1
S'truncate([size: int]) -> int.  Truncate the file to at most size bytes and\nreturn the truncated size.\n\nSize defaults to the current file position, as returned by tell().\nThe current file position is changed to the value of size.'
p464
sg3
I01
sg10
I2
sg11
g147
sa(dp465
g1
S'writable() -> bool.  True if file was opened in a write mode.'
p466
sg3
I01
sg10
I2
sg11
g149
sa(dp467
g1
S'write(b) -> int.  Write array of bytes b, return number written.\n\nOnly makes one system call, so not all of the data may be written.\nThe number of bytes actually written is returned.  In non-blocking mode,\nreturns None if the write would block.'
p468
sg3
I01
sg10
I2
sg11
g151
sa(dp469
g1
Nsg3
I01
sg10
I2
sg11
g153
sasg10
I3
sg11
S'FileIO'
p470
sa(dp471
g1
S'Codec used when reading a file in universal newlines mode.  It wraps\nanother incremental decoder, translating \\r\\n and \\r into \\n.  It also\nrecords the types of newlines encountered.  When used with\ntranslate=False, it ensures that the newline sequence is returned in\none piece. When used with decoder=None, it expects unicode strings as\ndecode input and translates newlines without first invoking an external\ndecoder.\n'
p472
sg3
I01
sg4
(lp473
(dp474
g3
I01
sg10
I5
sg11
g12
sa(dp475
g3
I01
sg10
I5
sg11
g16
sa(dp476
g1
S'default object formatter'
p477
sg3
I01
sg10
I2
sg11
g19
sa(dp478
g3
I01
sg10
I5
sg11
g21
sa(dp479
g3
I01
sg10
I5
sg11
g27
sa(dp480
g3
I01
sg10
I5
sg11
g29
sa(dp481
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p482
sg3
I01
sg10
I2
sg11
g32
sa(dp483
g1
S'helper for pickle'
p484
sg3
I01
sg10
I2
sg11
g34
sa(dp485
g1
S'helper for pickle'
p486
sg3
I01
sg10
I2
sg11
g37
sa(dp487
g3
I01
sg10
I5
sg11
g39
sa(dp488
g3
I01
sg10
I5
sg11
g41
sa(dp489
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p490
sg3
I01
sg10
I2
sg11
g46
sa(dp491
g3
I01
sg10
I5
sg11
g48
sa(dp492
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p493
sg3
I01
sg10
I2
sg11
g51
sa(dp494
g1
Nsg3
I01
sg10
I2
sg11
S'decode'
p495
sa(dp496
g1
Nsg3
I01
sg10
I2
sg11
S'getstate'
p497
sa(dp498
g3
I01
sg10
I5
sg11
S'newlines'
p499
sa(dp500
g1
Nsg3
I01
sg10
I2
sg11
S'reset'
p501
sa(dp502
g1
Nsg3
I01
sg10
I2
sg11
S'setstate'
p503
sasg10
I3
sg11
S'IncrementalNewlineDecoder'
p504
sa(dp505
g1
S"Text I/O implementation using an in-memory buffer.\n\nThe initial_value argument sets the value of object.  The newline\nargument is like the one of TextIOWrapper's constructor."
p506
sg3
I01
sg4
(lp507
(dp508
g3
I01
sg10
I5
sg11
g12
sa(dp509
g3
I01
sg10
I5
sg11
g16
sa(dp510
g1
Nsg3
I01
sg10
I2
sg11
g73
sa(dp511
g1
Nsg3
I01
sg10
I2
sg11
g75
sa(dp512
g1
S'default object formatter'
p513
sg3
I01
sg10
I2
sg11
g19
sa(dp514
g3
I01
sg10
I5
sg11
g21
sa(dp515
g1
Nsg3
I01
sg10
I2
sg11
g336
sa(dp516
g3
I01
sg10
I5
sg11
g27
sa(dp517
g3
I01
sg10
I5
sg11
g29
sa(dp518
g3
I01
sg10
I5
sg11
g82
sa(dp519
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p520
sg3
I01
sg10
I2
sg11
g32
sa(dp521
g1
S'helper for pickle'
p522
sg3
I01
sg10
I2
sg11
g34
sa(dp523
g1
S'helper for pickle'
p524
sg3
I01
sg10
I2
sg11
g37
sa(dp525
g3
I01
sg10
I5
sg11
g39
sa(dp526
g3
I01
sg10
I5
sg11
g41
sa(dp527
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp528
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p529
sg3
I01
sg10
I2
sg11
g46
sa(dp530
g3
I01
sg10
I5
sg11
g48
sa(dp531
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p532
sg3
I01
sg10
I2
sg11
g51
sa(dp533
g1
Nsg3
I01
sg10
I2
sg11
g97
sa(dp534
g1
Nsg3
I01
sg10
I2
sg11
g99
sa(dp535
g1
Nsg3
I01
sg10
I2
sg11
g101
sa(dp536
g1
Nsg3
I01
sg10
I2
sg11
g103
sa(dp537
g1
S'Close the IO object. Attempting any further operation after the\nobject is closed will raise a ValueError.\n\nThis method has no effect if the file is already closed.\n'
p538
sg3
I01
sg10
I2
sg11
g105
sa(dp539
g3
I01
sg10
I5
sg11
g107
sa(dp540
g1
S'Separate the underlying buffer from the TextIOBase and return it.\n\nAfter the underlying buffer has been detached, the TextIO is in an\nunusable state.\n'
p541
sg3
I01
sg10
I2
sg11
g110
sa(dp542
g3
I01
sg10
I5
sg11
S'encoding'
p543
sa(dp544
g3
I01
sg10
I5
sg11
S'errors'
p545
sa(dp546
g1
S'Returns underlying file descriptor if one exists.\n\nAn IOError is raised if the IO object does not use a file descriptor.\n'
p547
sg3
I01
sg10
I2
sg11
g113
sa(dp548
g1
S'Flush write buffers, if applicable.\n\nThis is not implemented for read-only and non-blocking streams.\n'
p549
sg3
I01
sg10
I2
sg11
g115
sa(dp550
g1
S'Retrieve the entire contents of the object.'
p551
sg3
I01
sg10
I2
sg11
g368
sa(dp552
g1
S"Return whether this is an 'interactive' stream.\n\nReturn False if it can't be determined.\n"
p553
sg3
I01
sg10
I2
sg11
g117
sa(dp554
g3
I01
sg10
I5
sg11
S'line_buffering'
p555
sa(dp556
g3
I01
sg10
I5
sg11
g499
sa(dp557
g3
I01
sg10
I5
sg11
g119
sa(dp558
g1
S'Read at most n characters, returned as a string.\n\nIf the argument is negative or omitted, read until EOF\nis reached. Return an empty string at EOF.\n'
p559
sg3
I01
sg10
I2
sg11
g123
sa(dp560
g1
S'readable() -> bool. Returns True if the IO object can be read.'
p561
sg3
I01
sg10
I2
sg11
g127
sa(dp562
g1
S'Read until newline or EOF.\n\nReturns an empty string if EOF is hit immediately.\n'
p563
sg3
I01
sg10
I2
sg11
g132
sa(dp564
g1
S'Return a list of lines from the stream.\n\nhint can be specified to control the number of lines read: no more\nlines will be read if the total size (in bytes/characters) of all\nlines so far exceeds hint.'
p565
sg3
I01
sg10
I2
sg11
g135
sa(dp566
g1
S'Change stream position.\n\nSeek to character offset pos relative to position indicated by whence:\n    0  Start of stream (the default).  pos should be >= 0;\n    1  Current position - pos must be 0;\n    2  End of stream - pos must be 0.\nReturns the new absolute position.\n'
p567
sg3
I01
sg10
I2
sg11
g138
sa(dp568
g1
S'seekable() -> bool. Returns True if the IO object can be seeked.'
p569
sg3
I01
sg10
I2
sg11
g141
sa(dp570
g1
S'Tell the current file position.'
p571
sg3
I01
sg10
I2
sg11
g144
sa(dp572
g1
S'Truncate size to pos.\n\nThe pos argument defaults to the current file position, as\nreturned by tell().  The current file position is unchanged.\nReturns the new absolute position.\n'
p573
sg3
I01
sg10
I2
sg11
g147
sa(dp574
g1
S'writable() -> bool. Returns True if the IO object can be written.'
p575
sg3
I01
sg10
I2
sg11
g149
sa(dp576
g1
S'Write string to file.\n\nReturns the number of characters written, which is always equal to\nthe length of the string.\n'
p577
sg3
I01
sg10
I2
sg11
g151
sa(dp578
g1
Nsg3
I01
sg10
I2
sg11
g153
sasg10
I3
sg11
S'StringIO'
p579
sa(dp580
g1
S'Character and line based layer over a BufferedIOBase object, buffer.\n\nencoding gives the name of the encoding that the stream will be\ndecoded or encoded with. It defaults to locale.getpreferredencoding.\n\nerrors determines the strictness of encoding and decoding (see the\ncodecs.register) and defaults to "strict".\n\nnewline controls how line endings are handled. It can be None, \'\',\n\'\\n\', \'\\r\', and \'\\r\\n\'.  It works as follows:\n\n* On input, if newline is None, universal newlines mode is\n  enabled. Lines in the input can end in \'\\n\', \'\\r\', or \'\\r\\n\', and\n  these are translated into \'\\n\' before being returned to the\n  caller. If it is \'\', universal newline mode is enabled, but line\n  endings are returned to the caller untranslated. If it has any of\n  the other legal values, input lines are only terminated by the given\n  string, and the line ending is returned to the caller untranslated.\n\n* On output, if newline is None, any \'\\n\' characters written are\n  translated to the system default line separator, os.linesep. If\n  newline is \'\', no translation takes place. If newline is any of the\n  other legal values, any \'\\n\' characters written are translated to\n  the given string.\n\nIf line_buffering is True, a call to flush is implied when a call to\nwrite contains a newline character.'
p581
sg3
I01
sg4
(lp582
(dp583
g3
I01
sg10
I5
sg11
S'_CHUNK_SIZE'
p584
sa(dp585
g3
I01
sg10
I5
sg11
g12
sa(dp586
g3
I01
sg10
I5
sg11
g16
sa(dp587
g1
Nsg3
I01
sg10
I2
sg11
g73
sa(dp588
g1
Nsg3
I01
sg10
I2
sg11
g75
sa(dp589
g1
S'default object formatter'
p590
sg3
I01
sg10
I2
sg11
g19
sa(dp591
g3
I01
sg10
I5
sg11
g21
sa(dp592
g3
I01
sg10
I5
sg11
g27
sa(dp593
g3
I01
sg10
I5
sg11
g29
sa(dp594
g3
I01
sg10
I5
sg11
g82
sa(dp595
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p596
sg3
I01
sg10
I2
sg11
g32
sa(dp597
g1
S'helper for pickle'
p598
sg3
I01
sg10
I2
sg11
g34
sa(dp599
g1
S'helper for pickle'
p600
sg3
I01
sg10
I2
sg11
g37
sa(dp601
g3
I01
sg10
I5
sg11
g39
sa(dp602
g3
I01
sg10
I5
sg11
g41
sa(dp603
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p604
sg3
I01
sg10
I2
sg11
g46
sa(dp605
g3
I01
sg10
I5
sg11
g48
sa(dp606
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p607
sg3
I01
sg10
I2
sg11
g51
sa(dp608
g1
Nsg3
I01
sg10
I2
sg11
g97
sa(dp609
g1
Nsg3
I01
sg10
I2
sg11
g99
sa(dp610
g1
Nsg3
I01
sg10
I2
sg11
g101
sa(dp611
g1
Nsg3
I01
sg10
I2
sg11
g103
sa(dp612
g3
I01
sg10
I5
sg11
S'buffer'
p613
sa(dp614
g1
Nsg3
I01
sg10
I2
sg11
g105
sa(dp615
g3
I01
sg10
I5
sg11
g107
sa(dp616
g1
Nsg3
I01
sg10
I2
sg11
g110
sa(dp617
g3
I01
sg10
I5
sg11
g543
sa(dp618
g3
I01
sg10
I5
sg11
g545
sa(dp619
g1
Nsg3
I01
sg10
I2
sg11
g113
sa(dp620
g1
Nsg3
I01
sg10
I2
sg11
g115
sa(dp621
g1
Nsg3
I01
sg10
I2
sg11
g117
sa(dp622
g3
I01
sg10
I5
sg11
g555
sa(dp623
g3
I01
sg10
I5
sg11
g11
sa(dp624
g3
I01
sg10
I5
sg11
g499
sa(dp625
g3
I01
sg10
I5
sg11
g119
sa(dp626
g1
Nsg3
I01
sg10
I2
sg11
g123
sa(dp627
g1
Nsg3
I01
sg10
I2
sg11
g127
sa(dp628
g1
Nsg3
I01
sg10
I2
sg11
g132
sa(dp629
g1
S'Return a list of lines from the stream.\n\nhint can be specified to control the number of lines read: no more\nlines will be read if the total size (in bytes/characters) of all\nlines so far exceeds hint.'
p630
sg3
I01
sg10
I2
sg11
g135
sa(dp631
g1
Nsg3
I01
sg10
I2
sg11
g138
sa(dp632
g1
Nsg3
I01
sg10
I2
sg11
g141
sa(dp633
g1
Nsg3
I01
sg10
I2
sg11
g144
sa(dp634
g1
Nsg3
I01
sg10
I2
sg11
g147
sa(dp635
g1
Nsg3
I01
sg10
I2
sg11
g149
sa(dp636
g1
Nsg3
I01
sg10
I2
sg11
g151
sa(dp637
g1
Nsg3
I01
sg10
I2
sg11
g153
sasg10
I3
sg11
S'TextIOWrapper'
p638
sa(dp639
g1
Nsg3
I01
sg4
(lp640
(dp641
g3
I01
sg10
I5
sg11
g12
sa(dp642
g3
I01
sg10
I5
sg11
g14
sa(dp643
g3
I01
sg10
I5
sg11
g16
sa(dp644
g1
S'default object formatter'
p645
sg3
I01
sg10
I2
sg11
g19
sa(dp646
g3
I01
sg10
I5
sg11
g21
sa(dp647
g3
I01
sg10
I5
sg11
g23
sa(dp648
g3
I01
sg10
I5
sg11
g25
sa(dp649
g3
I01
sg10
I5
sg11
g27
sa(dp650
g3
I01
sg10
I5
sg11
g29
sa(dp651
g3
I01
sg10
I5
sg11
S'__module__'
p652
sa(dp653
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p654
sg3
I01
sg10
I2
sg11
g32
sa(dp655
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp656
g1
S'helper for pickle'
p657
sg3
I01
sg10
I2
sg11
g37
sa(dp658
g3
I01
sg10
I5
sg11
g39
sa(dp659
g3
I01
sg10
I5
sg11
g41
sa(dp660
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp661
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p662
sg3
I01
sg10
I2
sg11
g46
sa(dp663
g3
I01
sg10
I5
sg11
g48
sa(dp664
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p665
sg3
I01
sg10
I2
sg11
g51
sa(dp666
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp667
g3
I01
sg10
I5
sg11
S'__weakref__'
p668
sa(dp669
g3
I01
sg10
I5
sg11
g55
sa(dp670
g3
I01
sg10
I5
sg11
g59
sa(dp671
g3
I01
sg10
I5
sg11
g61
sa(dp672
g3
I01
sg10
I5
sg11
g63
sa(dp673
g3
I01
sg10
I5
sg11
g65
sasg10
I3
sg11
S'UnsupportedOperation'
p674
sa(dp675
g1
S'Base class for buffered IO objects.\n\nThe main difference with RawIOBase is that the read() method\nsupports omitting the size argument, and does not have a default\nimplementation that defers to readinto().\n\nIn addition, read(), readinto() and write() may raise\nBlockingIOError if the underlying raw stream is in non-blocking\nmode and not ready; unlike their raw counterparts, they will never\nreturn None.\n\nA typical implementation should not inherit from a RawIOBase\nimplementation, but wrap one.\n'
p676
sg3
I01
sg4
(lp677
(dp678
g3
I01
sg10
I5
sg11
g12
sa(dp679
g3
I01
sg10
I5
sg11
g16
sa(dp680
g1
Nsg3
I01
sg10
I2
sg11
g73
sa(dp681
g1
Nsg3
I01
sg10
I2
sg11
g75
sa(dp682
g1
S'default object formatter'
p683
sg3
I01
sg10
I2
sg11
g19
sa(dp684
g3
I01
sg10
I5
sg11
g21
sa(dp685
g3
I01
sg10
I5
sg11
g27
sa(dp686
g3
I01
sg10
I5
sg11
g29
sa(dp687
g3
I01
sg10
I5
sg11
g82
sa(dp688
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p689
sg3
I01
sg10
I2
sg11
g32
sa(dp690
g1
S'helper for pickle'
p691
sg3
I01
sg10
I2
sg11
g34
sa(dp692
g1
S'helper for pickle'
p693
sg3
I01
sg10
I2
sg11
g37
sa(dp694
g3
I01
sg10
I5
sg11
g39
sa(dp695
g3
I01
sg10
I5
sg11
g41
sa(dp696
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p697
sg3
I01
sg10
I2
sg11
g46
sa(dp698
g3
I01
sg10
I5
sg11
g48
sa(dp699
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p700
sg3
I01
sg10
I2
sg11
g51
sa(dp701
g1
Nsg3
I01
sg10
I2
sg11
g97
sa(dp702
g1
Nsg3
I01
sg10
I2
sg11
g99
sa(dp703
g1
Nsg3
I01
sg10
I2
sg11
g101
sa(dp704
g1
Nsg3
I01
sg10
I2
sg11
g103
sa(dp705
g1
S'Flush and close the IO object.\n\nThis method has no effect if the file is already closed.\n'
p706
sg3
I01
sg10
I2
sg11
g105
sa(dp707
g3
I01
sg10
I5
sg11
g107
sa(dp708
g1
S'Disconnect this buffer from its underlying raw stream and return it.\n\nAfter the raw stream has been detached, the buffer is in an unusable\nstate.\n'
p709
sg3
I01
sg10
I2
sg11
g110
sa(dp710
g1
S'Returns underlying file descriptor if one exists.\n\nAn IOError is raised if the IO object does not use a file descriptor.\n'
p711
sg3
I01
sg10
I2
sg11
g113
sa(dp712
g1
S'Flush write buffers, if applicable.\n\nThis is not implemented for read-only and non-blocking streams.\n'
p713
sg3
I01
sg10
I2
sg11
g115
sa(dp714
g1
S"Return whether this is an 'interactive' stream.\n\nReturn False if it can't be determined.\n"
p715
sg3
I01
sg10
I2
sg11
g117
sa(dp716
g3
I01
sg10
I5
sg11
g119
sa(dp717
g1
S"Read and return up to n bytes.\n\nIf the argument is omitted, None, or negative, reads and\nreturns all data until EOF.\n\nIf the argument is positive, and the underlying raw stream is\nnot 'interactive', multiple raw reads may be issued to satisfy\nthe byte count (unless EOF is reached first).  But for\ninteractive raw streams (as well as sockets and pipes), at most\none raw read will be issued, and a short result does not imply\nthat EOF is imminent.\n\nReturns an empty bytes object on EOF.\n\nReturns None if the underlying raw stream was open in non-blocking\nmode and no data is available at the moment.\n"
p718
sg3
I01
sg10
I2
sg11
g123
sa(dp719
g1
S'Read and return up to n bytes, with at most one read() call\nto the underlying raw stream. A short result does not imply\nthat EOF is imminent.\n\nReturns an empty bytes object on EOF.\n'
p720
sg3
I01
sg10
I2
sg11
g125
sa(dp721
g1
S'Return whether object was opened for reading.\n\nIf False, read() will raise IOError.'
p722
sg3
I01
sg10
I2
sg11
g127
sa(dp723
g1
Nsg3
I01
sg10
I2
sg11
g129
sa(dp724
g1
S"Read and return a line from the stream.\n\nIf limit is specified, at most limit bytes will be read.\n\nThe line terminator is always b'\\n' for binary files; for text\nfiles, the newlines argument to open can be used to select the line\nterminator(s) recognized.\n"
p725
sg3
I01
sg10
I2
sg11
g132
sa(dp726
g1
S'Return a list of lines from the stream.\n\nhint can be specified to control the number of lines read: no more\nlines will be read if the total size (in bytes/characters) of all\nlines so far exceeds hint.'
p727
sg3
I01
sg10
I2
sg11
g135
sa(dp728
g1
S'Change stream position.\n\nChange the stream position to the given byte offset. The offset is\ninterpreted relative to the position indicated by whence.  Values\nfor whence are:\n\n* 0 -- start of stream (the default); offset should be zero or positive\n* 1 -- current stream position; offset may be negative\n* 2 -- end of stream; offset is usually negative\n\nReturn the new absolute position.'
p729
sg3
I01
sg10
I2
sg11
g138
sa(dp730
g1
S'Return whether object supports random access.\n\nIf False, seek(), tell() and truncate() will raise IOError.\nThis method may need to do a test seek().'
p731
sg3
I01
sg10
I2
sg11
g141
sa(dp732
g1
S'Return current stream position.'
p733
sg3
I01
sg10
I2
sg11
g144
sa(dp734
g1
S'Truncate file to size bytes.\n\nFile pointer is left unchanged.  Size defaults to the current IO\nposition as reported by tell().  Returns the new size.'
p735
sg3
I01
sg10
I2
sg11
g147
sa(dp736
g1
S'Return whether object was opened for writing.\n\nIf False, read() will raise IOError.'
p737
sg3
I01
sg10
I2
sg11
g149
sa(dp738
g1
S'Write the given buffer to the IO stream.\n\nReturns the number of bytes written, which is always len(b).\n\nRaises BlockingIOError if the buffer is full and the\nunderlying raw stream cannot accept more data at the moment.\n'
p739
sg3
I01
sg10
I2
sg11
g151
sa(dp740
g1
Nsg3
I01
sg10
I2
sg11
g153
sasg10
I3
sg11
S'_BufferedIOBase'
p741
sa(dp742
g1
S"The abstract base class for all I/O classes, acting on streams of\nbytes. There is no public constructor.\n\nThis class provides dummy implementations for many methods that\nderived classes can override selectively; the default implementations\nrepresent a file that cannot be read, written or seeked.\n\nEven though IOBase does not declare read, readinto, or write because\ntheir signatures will vary, implementations and clients should\nconsider those methods part of the interface. Also, implementations\nmay raise a IOError when operations they do not support are called.\n\nThe basic type used for binary data read from or written to a file is\nthe bytes type. Method arguments may also be bytearray or memoryview\nof arrays of bytes. In some cases, such as readinto, a writable\nobject such as bytearray is required. Text I/O classes work with\nunicode data.\n\nNote that calling any method (except additional calls to close(),\nwhich are ignored) on a closed stream should raise a ValueError.\n\nIOBase (and its subclasses) support the iterator protocol, meaning\nthat an IOBase object can be iterated over yielding the lines in a\nstream.\n\nIOBase also supports the :keyword:`with` statement. In this example,\nfp is closed after the suite of the with statement is complete:\n\nwith open('spam.txt', 'r') as fp:\n    fp.write('Spam and eggs!')\n"
p743
sg3
I01
sg4
(lp744
(dp745
g3
I01
sg10
I5
sg11
g12
sa(dp746
g3
I01
sg10
I5
sg11
g16
sa(dp747
g1
Nsg3
I01
sg10
I2
sg11
g73
sa(dp748
g1
Nsg3
I01
sg10
I2
sg11
g75
sa(dp749
g1
S'default object formatter'
p750
sg3
I01
sg10
I2
sg11
g19
sa(dp751
g3
I01
sg10
I5
sg11
g21
sa(dp752
g3
I01
sg10
I5
sg11
g27
sa(dp753
g3
I01
sg10
I5
sg11
g29
sa(dp754
g3
I01
sg10
I5
sg11
g82
sa(dp755
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p756
sg3
I01
sg10
I2
sg11
g32
sa(dp757
g1
S'helper for pickle'
p758
sg3
I01
sg10
I2
sg11
g34
sa(dp759
g1
S'helper for pickle'
p760
sg3
I01
sg10
I2
sg11
g37
sa(dp761
g3
I01
sg10
I5
sg11
g39
sa(dp762
g3
I01
sg10
I5
sg11
g41
sa(dp763
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p764
sg3
I01
sg10
I2
sg11
g46
sa(dp765
g3
I01
sg10
I5
sg11
g48
sa(dp766
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p767
sg3
I01
sg10
I2
sg11
g51
sa(dp768
g1
Nsg3
I01
sg10
I2
sg11
g97
sa(dp769
g1
Nsg3
I01
sg10
I2
sg11
g99
sa(dp770
g1
Nsg3
I01
sg10
I2
sg11
g101
sa(dp771
g1
Nsg3
I01
sg10
I2
sg11
g103
sa(dp772
g1
S'Flush and close the IO object.\n\nThis method has no effect if the file is already closed.\n'
p773
sg3
I01
sg10
I2
sg11
g105
sa(dp774
g3
I01
sg10
I5
sg11
g107
sa(dp775
g1
S'Returns underlying file descriptor if one exists.\n\nAn IOError is raised if the IO object does not use a file descriptor.\n'
p776
sg3
I01
sg10
I2
sg11
g113
sa(dp777
g1
S'Flush write buffers, if applicable.\n\nThis is not implemented for read-only and non-blocking streams.\n'
p778
sg3
I01
sg10
I2
sg11
g115
sa(dp779
g1
S"Return whether this is an 'interactive' stream.\n\nReturn False if it can't be determined.\n"
p780
sg3
I01
sg10
I2
sg11
g117
sa(dp781
g3
I01
sg10
I5
sg11
g119
sa(dp782
g1
S'Return whether object was opened for reading.\n\nIf False, read() will raise IOError.'
p783
sg3
I01
sg10
I2
sg11
g127
sa(dp784
g1
S"Read and return a line from the stream.\n\nIf limit is specified, at most limit bytes will be read.\n\nThe line terminator is always b'\\n' for binary files; for text\nfiles, the newlines argument to open can be used to select the line\nterminator(s) recognized.\n"
p785
sg3
I01
sg10
I2
sg11
g132
sa(dp786
g1
S'Return a list of lines from the stream.\n\nhint can be specified to control the number of lines read: no more\nlines will be read if the total size (in bytes/characters) of all\nlines so far exceeds hint.'
p787
sg3
I01
sg10
I2
sg11
g135
sa(dp788
g1
S'Change stream position.\n\nChange the stream position to the given byte offset. The offset is\ninterpreted relative to the position indicated by whence.  Values\nfor whence are:\n\n* 0 -- start of stream (the default); offset should be zero or positive\n* 1 -- current stream position; offset may be negative\n* 2 -- end of stream; offset is usually negative\n\nReturn the new absolute position.'
p789
sg3
I01
sg10
I2
sg11
g138
sa(dp790
g1
S'Return whether object supports random access.\n\nIf False, seek(), tell() and truncate() will raise IOError.\nThis method may need to do a test seek().'
p791
sg3
I01
sg10
I2
sg11
g141
sa(dp792
g1
S'Return current stream position.'
p793
sg3
I01
sg10
I2
sg11
g144
sa(dp794
g1
S'Truncate file to size bytes.\n\nFile pointer is left unchanged.  Size defaults to the current IO\nposition as reported by tell().  Returns the new size.'
p795
sg3
I01
sg10
I2
sg11
g147
sa(dp796
g1
S'Return whether object was opened for writing.\n\nIf False, read() will raise IOError.'
p797
sg3
I01
sg10
I2
sg11
g149
sa(dp798
g1
Nsg3
I01
sg10
I2
sg11
g153
sasg10
I3
sg11
S'_IOBase'
p799
sa(dp800
g1
S'Base class for raw binary I/O.'
p801
sg3
I01
sg4
(lp802
(dp803
g3
I01
sg10
I5
sg11
g12
sa(dp804
g3
I01
sg10
I5
sg11
g16
sa(dp805
g1
Nsg3
I01
sg10
I2
sg11
g73
sa(dp806
g1
Nsg3
I01
sg10
I2
sg11
g75
sa(dp807
g1
S'default object formatter'
p808
sg3
I01
sg10
I2
sg11
g19
sa(dp809
g3
I01
sg10
I5
sg11
g21
sa(dp810
g3
I01
sg10
I5
sg11
g27
sa(dp811
g3
I01
sg10
I5
sg11
g29
sa(dp812
g3
I01
sg10
I5
sg11
g82
sa(dp813
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p814
sg3
I01
sg10
I2
sg11
g32
sa(dp815
g1
S'helper for pickle'
p816
sg3
I01
sg10
I2
sg11
g34
sa(dp817
g1
S'helper for pickle'
p818
sg3
I01
sg10
I2
sg11
g37
sa(dp819
g3
I01
sg10
I5
sg11
g39
sa(dp820
g3
I01
sg10
I5
sg11
g41
sa(dp821
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p822
sg3
I01
sg10
I2
sg11
g46
sa(dp823
g3
I01
sg10
I5
sg11
g48
sa(dp824
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p825
sg3
I01
sg10
I2
sg11
g51
sa(dp826
g1
Nsg3
I01
sg10
I2
sg11
g97
sa(dp827
g1
Nsg3
I01
sg10
I2
sg11
g99
sa(dp828
g1
Nsg3
I01
sg10
I2
sg11
g101
sa(dp829
g1
Nsg3
I01
sg10
I2
sg11
g103
sa(dp830
g1
S'Flush and close the IO object.\n\nThis method has no effect if the file is already closed.\n'
p831
sg3
I01
sg10
I2
sg11
g105
sa(dp832
g3
I01
sg10
I5
sg11
g107
sa(dp833
g1
S'Returns underlying file descriptor if one exists.\n\nAn IOError is raised if the IO object does not use a file descriptor.\n'
p834
sg3
I01
sg10
I2
sg11
g113
sa(dp835
g1
S'Flush write buffers, if applicable.\n\nThis is not implemented for read-only and non-blocking streams.\n'
p836
sg3
I01
sg10
I2
sg11
g115
sa(dp837
g1
S"Return whether this is an 'interactive' stream.\n\nReturn False if it can't be determined.\n"
p838
sg3
I01
sg10
I2
sg11
g117
sa(dp839
g3
I01
sg10
I5
sg11
g119
sa(dp840
g1
Nsg3
I01
sg10
I2
sg11
g123
sa(dp841
g1
S'Return whether object was opened for reading.\n\nIf False, read() will raise IOError.'
p842
sg3
I01
sg10
I2
sg11
g127
sa(dp843
g1
S'Read until EOF, using multiple read() call.'
p844
sg3
I01
sg10
I2
sg11
g450
sa(dp845
g1
S"Read and return a line from the stream.\n\nIf limit is specified, at most limit bytes will be read.\n\nThe line terminator is always b'\\n' for binary files; for text\nfiles, the newlines argument to open can be used to select the line\nterminator(s) recognized.\n"
p846
sg3
I01
sg10
I2
sg11
g132
sa(dp847
g1
S'Return a list of lines from the stream.\n\nhint can be specified to control the number of lines read: no more\nlines will be read if the total size (in bytes/characters) of all\nlines so far exceeds hint.'
p848
sg3
I01
sg10
I2
sg11
g135
sa(dp849
g1
S'Change stream position.\n\nChange the stream position to the given byte offset. The offset is\ninterpreted relative to the position indicated by whence.  Values\nfor whence are:\n\n* 0 -- start of stream (the default); offset should be zero or positive\n* 1 -- current stream position; offset may be negative\n* 2 -- end of stream; offset is usually negative\n\nReturn the new absolute position.'
p850
sg3
I01
sg10
I2
sg11
g138
sa(dp851
g1
S'Return whether object supports random access.\n\nIf False, seek(), tell() and truncate() will raise IOError.\nThis method may need to do a test seek().'
p852
sg3
I01
sg10
I2
sg11
g141
sa(dp853
g1
S'Return current stream position.'
p854
sg3
I01
sg10
I2
sg11
g144
sa(dp855
g1
S'Truncate file to size bytes.\n\nFile pointer is left unchanged.  Size defaults to the current IO\nposition as reported by tell().  Returns the new size.'
p856
sg3
I01
sg10
I2
sg11
g147
sa(dp857
g1
S'Return whether object was opened for writing.\n\nIf False, read() will raise IOError.'
p858
sg3
I01
sg10
I2
sg11
g149
sa(dp859
g1
Nsg3
I01
sg10
I2
sg11
g153
sasg10
I3
sg11
S'_RawIOBase'
p860
sa(dp861
g1
S"Base class for text I/O.\n\nThis class provides a character and line based interface to stream\nI/O. There is no readinto method because Python's character strings\nare immutable. There is no public constructor.\n"
p862
sg3
I01
sg4
(lp863
(dp864
g3
I01
sg10
I5
sg11
g12
sa(dp865
g3
I01
sg10
I5
sg11
g16
sa(dp866
g1
Nsg3
I01
sg10
I2
sg11
g73
sa(dp867
g1
Nsg3
I01
sg10
I2
sg11
g75
sa(dp868
g1
S'default object formatter'
p869
sg3
I01
sg10
I2
sg11
g19
sa(dp870
g3
I01
sg10
I5
sg11
g21
sa(dp871
g3
I01
sg10
I5
sg11
g27
sa(dp872
g3
I01
sg10
I5
sg11
g29
sa(dp873
g3
I01
sg10
I5
sg11
g82
sa(dp874
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p875
sg3
I01
sg10
I2
sg11
g32
sa(dp876
g1
S'helper for pickle'
p877
sg3
I01
sg10
I2
sg11
g34
sa(dp878
g1
S'helper for pickle'
p879
sg3
I01
sg10
I2
sg11
g37
sa(dp880
g3
I01
sg10
I5
sg11
g39
sa(dp881
g3
I01
sg10
I5
sg11
g41
sa(dp882
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p883
sg3
I01
sg10
I2
sg11
g46
sa(dp884
g3
I01
sg10
I5
sg11
g48
sa(dp885
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p886
sg3
I01
sg10
I2
sg11
g51
sa(dp887
g1
Nsg3
I01
sg10
I2
sg11
g97
sa(dp888
g1
Nsg3
I01
sg10
I2
sg11
g99
sa(dp889
g1
Nsg3
I01
sg10
I2
sg11
g101
sa(dp890
g1
Nsg3
I01
sg10
I2
sg11
g103
sa(dp891
g1
S'Flush and close the IO object.\n\nThis method has no effect if the file is already closed.\n'
p892
sg3
I01
sg10
I2
sg11
g105
sa(dp893
g3
I01
sg10
I5
sg11
g107
sa(dp894
g1
S'Separate the underlying buffer from the TextIOBase and return it.\n\nAfter the underlying buffer has been detached, the TextIO is in an\nunusable state.\n'
p895
sg3
I01
sg10
I2
sg11
g110
sa(dp896
g3
I01
sg10
I5
sg11
g543
sa(dp897
g3
I01
sg10
I5
sg11
g545
sa(dp898
g1
S'Returns underlying file descriptor if one exists.\n\nAn IOError is raised if the IO object does not use a file descriptor.\n'
p899
sg3
I01
sg10
I2
sg11
g113
sa(dp900
g1
S'Flush write buffers, if applicable.\n\nThis is not implemented for read-only and non-blocking streams.\n'
p901
sg3
I01
sg10
I2
sg11
g115
sa(dp902
g1
S"Return whether this is an 'interactive' stream.\n\nReturn False if it can't be determined.\n"
p903
sg3
I01
sg10
I2
sg11
g117
sa(dp904
g3
I01
sg10
I5
sg11
g499
sa(dp905
g3
I01
sg10
I5
sg11
g119
sa(dp906
g1
S'Read at most n characters from stream.\n\nRead from underlying buffer until we have n characters or we hit EOF.\nIf n is negative or omitted, read until EOF.\n'
p907
sg3
I01
sg10
I2
sg11
g123
sa(dp908
g1
S'Return whether object was opened for reading.\n\nIf False, read() will raise IOError.'
p909
sg3
I01
sg10
I2
sg11
g127
sa(dp910
g1
S'Read until newline or EOF.\n\nReturns an empty string if EOF is hit immediately.\n'
p911
sg3
I01
sg10
I2
sg11
g132
sa(dp912
g1
S'Return a list of lines from the stream.\n\nhint can be specified to control the number of lines read: no more\nlines will be read if the total size (in bytes/characters) of all\nlines so far exceeds hint.'
p913
sg3
I01
sg10
I2
sg11
g135
sa(dp914
g1
S'Change stream position.\n\nChange the stream position to the given byte offset. The offset is\ninterpreted relative to the position indicated by whence.  Values\nfor whence are:\n\n* 0 -- start of stream (the default); offset should be zero or positive\n* 1 -- current stream position; offset may be negative\n* 2 -- end of stream; offset is usually negative\n\nReturn the new absolute position.'
p915
sg3
I01
sg10
I2
sg11
g138
sa(dp916
g1
S'Return whether object supports random access.\n\nIf False, seek(), tell() and truncate() will raise IOError.\nThis method may need to do a test seek().'
p917
sg3
I01
sg10
I2
sg11
g141
sa(dp918
g1
S'Return current stream position.'
p919
sg3
I01
sg10
I2
sg11
g144
sa(dp920
g1
S'Truncate file to size bytes.\n\nFile pointer is left unchanged.  Size defaults to the current IO\nposition as reported by tell().  Returns the new size.'
p921
sg3
I01
sg10
I2
sg11
g147
sa(dp922
g1
S'Return whether object was opened for writing.\n\nIf False, read() will raise IOError.'
p923
sg3
I01
sg10
I2
sg11
g149
sa(dp924
g1
S'Write string to stream.\nReturns the number of characters written (which is always equal to\nthe length of the string).\n'
p925
sg3
I01
sg10
I2
sg11
g151
sa(dp926
g1
Nsg3
I01
sg10
I2
sg11
g153
sasg10
I3
sg11
S'_TextIOBase'
p927
sa(dp928
g3
I01
sg10
I5
sg11
g16
sa(dp929
g3
I01
sg10
I5
sg11
S'__name__'
p930
sa(dp931
g3
I01
sg10
I5
sg11
S'__package__'
p932
sa(dp933
g1
S'Open file and return a stream.  Raise IOError upon failure.\n\nfile is either a text or byte string giving the name (and the path\nif the file isn\'t in the current working directory) of the file to\nbe opened or an integer file descriptor of the file to be\nwrapped. (If a file descriptor is given, it is closed when the\nreturned I/O object is closed, unless closefd is set to False.)\n\nmode is an optional string that specifies the mode in which the file\nis opened. It defaults to \'r\' which means open for reading in text\nmode.  Other common values are \'w\' for writing (truncating the file if\nit already exists), and \'a\' for appending (which on some Unix systems,\nmeans that all writes append to the end of the file regardless of the\ncurrent seek position). In text mode, if encoding is not specified the\nencoding used is platform dependent. (For reading and writing raw\nbytes use binary mode and leave encoding unspecified.) The available\nmodes are:\n\n========= ===============================================================\nCharacter Meaning\n--------- ---------------------------------------------------------------\n\'r\'       open for reading (default)\n\'w\'       open for writing, truncating the file first\n\'a\'       open for writing, appending to the end of the file if it exists\n\'b\'       binary mode\n\'t\'       text mode (default)\n\'+\'       open a disk file for updating (reading and writing)\n\'U\'       universal newline mode (for backwards compatibility; unneeded\n          for new code)\n========= ===============================================================\n\nThe default mode is \'rt\' (open for reading text). For binary random\naccess, the mode \'w+b\' opens and truncates the file to 0 bytes, while\n\'r+b\' opens the file without truncation.\n\nPython distinguishes between files opened in binary and text modes,\neven when the underlying operating system doesn\'t. Files opened in\nbinary mode (appending \'b\' to the mode argument) return contents as\nbytes objects without any decoding. In text mode (the default, or when\n\'t\' is appended to the mode argument), the contents of the file are\nreturned as strings, the bytes having been first decoded using a\nplatform-dependent encoding or using the specified encoding if given.\n\nbuffering is an optional integer used to set the buffering policy.\nPass 0 to switch buffering off (only allowed in binary mode), 1 to select\nline buffering (only usable in text mode), and an integer > 1 to indicate\nthe size of a fixed-size chunk buffer.  When no buffering argument is\ngiven, the default buffering policy works as follows:\n\n* Binary files are buffered in fixed-size chunks; the size of the buffer\n  is chosen using a heuristic trying to determine the underlying device\'s\n  "block size" and falling back on `io.DEFAULT_BUFFER_SIZE`.\n  On many systems, the buffer will typically be 4096 or 8192 bytes long.\n\n* "Interactive" text files (files for which isatty() returns True)\n  use line buffering.  Other text files use the policy described above\n  for binary files.\n\nencoding is the name of the encoding used to decode or encode the\nfile. This should only be used in text mode. The default encoding is\nplatform dependent, but any encoding supported by Python can be\npassed.  See the codecs module for the list of supported encodings.\n\nerrors is an optional string that specifies how encoding errors are to\nbe handled---this argument should not be used in binary mode. Pass\n\'strict\' to raise a ValueError exception if there is an encoding error\n(the default of None has the same effect), or pass \'ignore\' to ignore\nerrors. (Note that ignoring encoding errors can lead to data loss.)\nSee the documentation for codecs.register for a list of the permitted\nencoding error strings.\n\nnewline controls how universal newlines works (it only applies to text\nmode). It can be None, \'\', \'\\n\', \'\\r\', and \'\\r\\n\'.  It works as\nfollows:\n\n* On input, if newline is None, universal newlines mode is\n  enabled. Lines in the input can end in \'\\n\', \'\\r\', or \'\\r\\n\', and\n  these are translated into \'\\n\' before being returned to the\n  caller. If it is \'\', universal newline mode is enabled, but line\n  endings are returned to the caller untranslated. If it has any of\n  the other legal values, input lines are only terminated by the given\n  string, and the line ending is returned to the caller untranslated.\n\n* On output, if newline is None, any \'\\n\' characters written are\n  translated to the system default line separator, os.linesep. If\n  newline is \'\', no translation takes place. If newline is any of the\n  other legal values, any \'\\n\' characters written are translated to\n  the given string.\n\nIf closefd is False, the underlying file descriptor will be kept open\nwhen the file is closed. This does not work when a file name is given\nand must be True in that case.\n\nopen() returns a file object whose type depends on the mode, and\nthrough which the standard file operations such as reading and writing\nare performed. When open() is used to open a file in a text mode (\'w\',\n\'r\', \'wt\', \'rt\', etc.), it returns a TextIOWrapper. When used to open\na file in a binary mode, the returned class varies: in read binary\nmode, it returns a BufferedReader; in write binary and append binary\nmodes, it returns a BufferedWriter, and in read/write mode, it returns\na BufferedRandom.\n\nIt is also possible to use a string or bytearray as a file for both\nreading and writing. For strings StringIO can be used like a file\nopened in a text mode, and for bytes a BytesIO can be used like a file\nopened in a binary mode.\n'
p934
sg3
I01
sg10
I2
sg11
S'open'
p935
sasg10
I1
sg11
S'_io'
p936
s.