(dp0
S'doc'
p1
S'High performance data structures.\n- deque:        ordered collection accessible from endpoints only\n- defaultdict:  dict subclass with a default value factory\n'
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g3
I01
sS'type'
p7
I5
sS'name'
p8
S'__doc__'
p9
sa(dp10
g3
I01
sg7
I5
sg8
S'__name__'
p11
sa(dp12
g3
I01
sg7
I5
sg8
S'__package__'
p13
sa(dp14
g1
S'defaultdict(default_factory[, ...]) --> dict with default factory\n\nThe default factory is called without arguments to produce\na new value when a key is not present, in __getitem__ only.\nA defaultdict compares equal to a dict with the same items.\nAll remaining arguments are treated the same as if they were\npassed to the dict constructor, including keyword arguments.\n'
p15
sg3
I01
sg4
(lp16
(dp17
g3
I01
sg7
I5
sg8
S'__cmp__'
p18
sa(dp19
g1
S'D.__contains__(k) -> True if D has a key k, else False'
p20
sg3
I01
sg7
I2
sg8
S'__contains__'
p21
sa(dp22
g1
S'D.copy() -> a shallow copy of D.'
p23
sg3
I01
sg7
I2
sg8
S'__copy__'
p24
sa(dp25
g3
I01
sg7
I5
sg8
S'__delattr__'
p26
sa(dp27
g3
I01
sg7
I5
sg8
S'__delitem__'
p28
sa(dp29
g3
I01
sg7
I5
sg8
g9
sa(dp30
g3
I01
sg7
I5
sg8
S'__eq__'
p31
sa(dp32
g1
S'default object formatter'
p33
sg3
I01
sg7
I2
sg8
S'__format__'
p34
sa(dp35
g3
I01
sg7
I5
sg8
S'__ge__'
p36
sa(dp37
g3
I01
sg7
I5
sg8
S'__getattribute__'
p38
sa(dp39
g1
S'x.__getitem__(y) <==> x[y]'
p40
sg3
I01
sg7
I2
sg8
S'__getitem__'
p41
sa(dp42
g3
I01
sg7
I5
sg8
S'__gt__'
p43
sa(dp44
g3
I01
sg7
I5
sg8
S'__hash__'
p45
sa(dp46
g3
I01
sg7
I5
sg8
S'__init__'
p47
sa(dp48
g3
I01
sg7
I5
sg8
S'__iter__'
p49
sa(dp50
g3
I01
sg7
I5
sg8
S'__le__'
p51
sa(dp52
g3
I01
sg7
I5
sg8
S'__len__'
p53
sa(dp54
g3
I01
sg7
I5
sg8
S'__lt__'
p55
sa(dp56
g1
S'__missing__(key) # Called by __getitem__ for missing key; pseudo-code:\n  if self.default_factory is None: raise KeyError((key,))\n  self[key] = value = self.default_factory()\n  return value\n'
p57
sg3
I01
sg7
I2
sg8
S'__missing__'
p58
sa(dp59
g3
I01
sg7
I5
sg8
S'__ne__'
p60
sa(dp61
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p62
sg3
I01
sg7
I2
sg8
S'__new__'
p63
sa(dp64
g1
S'Return state information for pickling.'
p65
sg3
I01
sg7
I2
sg8
S'__reduce__'
p66
sa(dp67
g1
S'helper for pickle'
p68
sg3
I01
sg7
I2
sg8
S'__reduce_ex__'
p69
sa(dp70
g3
I01
sg7
I5
sg8
S'__repr__'
p71
sa(dp72
g3
I01
sg7
I5
sg8
S'__setattr__'
p73
sa(dp74
g3
I01
sg7
I5
sg8
S'__setitem__'
p75
sa(dp76
g1
S'D.__sizeof__() -> size of D in memory, in bytes'
p77
sg3
I01
sg7
I2
sg8
S'__sizeof__'
p78
sa(dp79
g3
I01
sg7
I5
sg8
S'__str__'
p80
sa(dp81
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p82
sg3
I01
sg7
I2
sg8
S'__subclasshook__'
p83
sa(dp84
g1
S'D.clear() -> None.  Remove all items from D.'
p85
sg3
I01
sg7
I2
sg8
S'clear'
p86
sa(dp87
g1
S'D.copy() -> a shallow copy of D.'
p88
sg3
I01
sg7
I2
sg8
S'copy'
p89
sa(dp90
g3
I01
sg7
I5
sg8
S'default_factory'
p91
sa(dp92
g1
S'dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v.\nv defaults to None.'
p93
sg3
I01
sg7
I2
sg8
S'fromkeys'
p94
sa(dp95
g1
S'D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.'
p96
sg3
I01
sg7
I2
sg8
S'get'
p97
sa(dp98
g1
S'D.has_key(k) -> True if D has a key k, else False'
p99
sg3
I01
sg7
I2
sg8
S'has_key'
p100
sa(dp101
g1
S"D.items() -> list of D's (key, value) pairs, as 2-tuples"
p102
sg3
I01
sg7
I2
sg8
S'items'
p103
sa(dp104
g1
S'D.iteritems() -> an iterator over the (key, value) items of D'
p105
sg3
I01
sg7
I2
sg8
S'iteritems'
p106
sa(dp107
g1
S'D.iterkeys() -> an iterator over the keys of D'
p108
sg3
I01
sg7
I2
sg8
S'iterkeys'
p109
sa(dp110
g1
S'D.itervalues() -> an iterator over the values of D'
p111
sg3
I01
sg7
I2
sg8
S'itervalues'
p112
sa(dp113
g1
S"D.keys() -> list of D's keys"
p114
sg3
I01
sg7
I2
sg8
S'keys'
p115
sa(dp116
g1
S'D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised'
p117
sg3
I01
sg7
I2
sg8
S'pop'
p118
sa(dp119
g1
S'D.popitem() -> (k, v), remove and return some (key, value) pair as a\n2-tuple; but raise KeyError if D is empty.'
p120
sg3
I01
sg7
I2
sg8
S'popitem'
p121
sa(dp122
g1
S'D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D'
p123
sg3
I01
sg7
I2
sg8
S'setdefault'
p124
sa(dp125
g1
S'D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.\nIf E present and has a .keys() method, does:     for k in E: D[k] = E[k]\nIf E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v\nIn either case, this is followed by: for k in F: D[k] = F[k]'
p126
sg3
I01
sg7
I2
sg8
S'update'
p127
sa(dp128
g1
S"D.values() -> list of D's values"
p129
sg3
I01
sg7
I2
sg8
S'values'
p130
sa(dp131
g1
S"D.viewitems() -> a set-like object providing a view on D's items"
p132
sg3
I01
sg7
I2
sg8
S'viewitems'
p133
sa(dp134
g1
S"D.viewkeys() -> a set-like object providing a view on D's keys"
p135
sg3
I01
sg7
I2
sg8
S'viewkeys'
p136
sa(dp137
g1
S"D.viewvalues() -> an object providing a view on D's values"
p138
sg3
I01
sg7
I2
sg8
S'viewvalues'
p139
sasg7
I3
sg8
S'defaultdict'
p140
sa(dp141
g1
S'deque([iterable[, maxlen]]) --> deque object\n\nBuild an ordered collection with optimized access from its endpoints.'
p142
sg3
I01
sg4
(lp143
(dp144
g1
S'Return a shallow copy of a deque.'
p145
sg3
I01
sg7
I2
sg8
g24
sa(dp146
g3
I01
sg7
I5
sg8
g26
sa(dp147
g3
I01
sg7
I5
sg8
g28
sa(dp148
g3
I01
sg7
I5
sg8
g9
sa(dp149
g3
I01
sg7
I5
sg8
g31
sa(dp150
g1
S'default object formatter'
p151
sg3
I01
sg7
I2
sg8
g34
sa(dp152
g3
I01
sg7
I5
sg8
g36
sa(dp153
g3
I01
sg7
I5
sg8
g38
sa(dp154
g3
I01
sg7
I5
sg8
g41
sa(dp155
g3
I01
sg7
I5
sg8
g43
sa(dp156
g3
I01
sg7
I5
sg8
g45
sa(dp157
g3
I01
sg7
I5
sg8
S'__iadd__'
p158
sa(dp159
g3
I01
sg7
I5
sg8
g47
sa(dp160
g3
I01
sg7
I5
sg8
g49
sa(dp161
g3
I01
sg7
I5
sg8
g51
sa(dp162
g3
I01
sg7
I5
sg8
g53
sa(dp163
g3
I01
sg7
I5
sg8
g55
sa(dp164
g3
I01
sg7
I5
sg8
g60
sa(dp165
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p166
sg3
I01
sg7
I2
sg8
g63
sa(dp167
g1
S'Return state information for pickling.'
p168
sg3
I01
sg7
I2
sg8
g66
sa(dp169
g1
S'helper for pickle'
p170
sg3
I01
sg7
I2
sg8
g69
sa(dp171
g3
I01
sg7
I5
sg8
g71
sa(dp172
g1
S'D.__reversed__() -- return a reverse iterator over the deque'
p173
sg3
I01
sg7
I2
sg8
S'__reversed__'
p174
sa(dp175
g3
I01
sg7
I5
sg8
g73
sa(dp176
g3
I01
sg7
I5
sg8
g75
sa(dp177
g1
S'D.__sizeof__() -- size of D in memory, in bytes'
p178
sg3
I01
sg7
I2
sg8
g78
sa(dp179
g3
I01
sg7
I5
sg8
g80
sa(dp180
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p181
sg3
I01
sg7
I2
sg8
g83
sa(dp182
g1
S'Add an element to the right side of the deque.'
p183
sg3
I01
sg7
I2
sg8
S'append'
p184
sa(dp185
g1
S'Add an element to the left side of the deque.'
p186
sg3
I01
sg7
I2
sg8
S'appendleft'
p187
sa(dp188
g1
S'Remove all elements from the deque.'
p189
sg3
I01
sg7
I2
sg8
g86
sa(dp190
g1
S'D.count(value) -> integer -- return number of occurrences of value'
p191
sg3
I01
sg7
I2
sg8
S'count'
p192
sa(dp193
g1
S'Extend the right side of the deque with elements from the iterable'
p194
sg3
I01
sg7
I2
sg8
S'extend'
p195
sa(dp196
g1
S'Extend the left side of the deque with elements from the iterable'
p197
sg3
I01
sg7
I2
sg8
S'extendleft'
p198
sa(dp199
g3
I01
sg7
I5
sg8
S'maxlen'
p200
sa(dp201
g1
S'Remove and return the rightmost element.'
p202
sg3
I01
sg7
I2
sg8
g118
sa(dp203
g1
S'Remove and return the leftmost element.'
p204
sg3
I01
sg7
I2
sg8
S'popleft'
p205
sa(dp206
g1
S'D.remove(value) -- remove first occurrence of value.'
p207
sg3
I01
sg7
I2
sg8
S'remove'
p208
sa(dp209
g1
S'D.reverse() -- reverse *IN PLACE*'
p210
sg3
I01
sg7
I2
sg8
S'reverse'
p211
sa(dp212
g1
S'Rotate the deque n steps to the right (default n=1).  If n is negative, rotates left.'
p213
sg3
I01
sg7
I2
sg8
S'rotate'
p214
sasg7
I3
sg8
S'deque'
p215
sasg7
I1
sg8
S'_collections'
p216
s.