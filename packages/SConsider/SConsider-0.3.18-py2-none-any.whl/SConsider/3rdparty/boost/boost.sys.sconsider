# vim: set et ai ts=4 sw=4:
# -------------------------------------------------------------------------
# Copyright (c) 2011, Peter Sommerlad and IFS Institute for Software
# at HSR Rapperswil, Switzerland
# All rights reserved.
#
# This library/application is free software; you can redistribute and/or
# modify it under the terms of the license that is included with this
# library/application in the file license.txt.
# -------------------------------------------------------------------------

import pkg_resources
pkg_resources.require(["SConsider"])
Import('*')

_sconsider_dist = pkg_resources.get_distribution("SConsider").parsed_version
if _sconsider_dist < pkg_resources.parse_version("0.5"):
    from ConfigureHelper import Configure
    from SConsider import createTargets, cloneBaseEnv
    env = cloneBaseEnv()
    conf = Configure(env)
    if conf.CheckCXXHeader('boost/version.hpp'):
        conf.env.Append(CPPDEFINES='HAS_BOOST')
    if conf.CheckLibWithHeader('boost_regex', 'boost/regex.h', 'CXX'):
        conf.env.Append(CPPDEFINES='HAS_BOOST_REGEX')
    if conf.CheckLibWithHeader('boost_system', 'boost/system/error_code.hpp', 'CXX'):
        conf.env.Append(CPPDEFINES='HAS_BOOST_SYSTEM')
    env = conf.Finish()

    buildSettings = {}
    if 'HAS_BOOST' in env['CPPDEFINES']:
        buildSettings['include'] = {}

    if 'HAS_BOOST_REGEX' in env['CPPDEFINES']:
        buildSettings['regex'] = {
            'public': {
                'appendUnique': {
                    'LIBS': ['boost_regex'],
                },
            },
        }

    if 'HAS_BOOST_SYSTEM' in env['CPPDEFINES']:
        buildSettings['system'] = {
            'public': {
                'appendUnique': {
                    'LIBS': ['boost_system'],
                },
            },
        }

    createTargets(packagename, buildSettings)
elif _sconsider_dist >= pkg_resources.parse_version("0.5"):
    from TargetMaker import EnvBuilder
    from ThirdParty import add_3rdparty_system_lib_target, add_3rdparty_system_header_target
    includeTarget = add_3rdparty_system_header_target(EnvBuilder().build(), packagename,
                                                      lambda conf: conf.CheckCHeader('boost/version.hpp'))

    libnames = [('boost_regex', 'lib_boost_regex'), ('boost_system', 'lib_boost_system')]
    libs = add_3rdparty_system_lib_target(EnvBuilder().depend(includeTarget).build(), packagename,
                                          lambda conf: conf.CheckMultipleLibs([lib for lib, _ in libnames]),
                                          libnames)

    libs = EnvBuilder().depend(libs).build().RegisterPackageTarget(packagename=packagename, targetname='libs')

    EnvBuilder().depend(includeTarget, libs).build().RegisterPackageTarget(packagename=packagename,
                                                                           targetname=packagename)
