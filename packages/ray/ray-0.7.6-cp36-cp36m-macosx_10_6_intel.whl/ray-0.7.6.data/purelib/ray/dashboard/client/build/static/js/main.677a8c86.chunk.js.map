{"version":3,"sources":["NumberedLines.tsx","Errors.tsx","Logs.tsx","UsageBar.tsx","Dashboard.tsx","App.tsx","index.tsx"],"names":["Component","this","props","classes","lines","Table","TableBody","map","line","index","TableRow","key","TableCell","className","classNames","cell","lineNumber","data-line-number","React","withStyles","theme","createStyles","root","overflowX","borderWidth","fontFamily","padding","paddingRight","color","palette","text","secondary","spacing","textAlign","verticalAlign","width","content","whiteSpace","handleClose","history","push","errors","match","params","hostname","pid","errorsForHost","Object","values","jobErrors","error","message","replace","trim","split","timestamp","errorsToDisplay","undefined","Dialog","paper","fullWidth","maxWidth","onClose","open","scroll","IconButton","closeButton","onClick","entries","Fragment","Typography","title","length","Date","toLocaleString","NumberedLines","position","right","top","zIndex","borderBottomColor","divider","borderBottomStyle","borderBottomWidth","lineHeight","marginBottom","paddingBottom","marginTop","ipToHostname","logs","logsForHost","keys","ip","logsToDisplay","percent","Math","max","minColor","leftColor","rightColor","ratio","r1","g1","b1","blend","min","gradient","join","style","background","borderColor","borderStyle","formatByteAmount","amount","unit","pow","toFixed","formatUsage","used","total","usedFormatted","totalFormatted","formatUptime","bootTime","uptimeSecondsTotal","now","uptimeSeconds","floor","uptimeMinutes","uptimeHours","uptimeDays","pad","value","toString","padStart","state","response","expanded","fetchNodeInfo","a","url","URL","window","location","href","fetch","json","setState","setTimeout","toggleExpand","result","logCounts","errorCounts","clients","client","perWorker","workers","worker","logCount","variant","TableHead","hover","expandCollapseCell","expandCollapseIcon","boot_time","cpuUsage","UsageBar","cpu","mem","disk","Link","component","RouterLink","to","cmdline","create_time","cpu_percent","memory_info","rss","align","path","render","Logs","Errors","backgroundColor","cursor","fontSize","minWidth","App","CssBaseline","Dashboard","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.677a8c86.chunk.js","sourcesContent":["import { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport classNames from \"classnames\";\nimport React from \"react\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      overflowX: \"auto\"\n    },\n    cell: {\n      borderWidth: 0,\n      fontFamily: \"SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace\",\n      padding: 0,\n      \"&:last-child\": {\n        paddingRight: 0\n      }\n    },\n    lineNumber: {\n      color: theme.palette.text.secondary,\n      paddingRight: theme.spacing(2),\n      textAlign: \"right\",\n      verticalAlign: \"top\",\n      width: \"1%\",\n      // Use a ::before pseudo-element for the line number so that it won't\n      // interact with user selections or searching.\n      \"&::before\": {\n        content: \"attr(data-line-number)\"\n      }\n    },\n    line: {\n      textAlign: \"left\",\n      whiteSpace: \"pre-wrap\"\n    }\n  });\n\ninterface Props {\n  lines: string[];\n}\n\nclass Component extends React.Component<Props & WithStyles<typeof styles>> {\n  render() {\n    const { classes, lines } = this.props;\n    return (\n      <Table>\n        <TableBody>\n          {lines.map((line, index) => (\n            <TableRow key={index}>\n              <TableCell\n                className={classNames(classes.cell, classes.lineNumber)}\n                data-line-number={index + 1}\n              />\n              <TableCell className={classNames(classes.cell, classes.line)}>\n                {line}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    );\n  }\n}\n\nexport default withStyles(styles)(Component);\n","import Dialog from \"@material-ui/core/Dialog\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport NumberedLines from \"./NumberedLines\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    paper: {\n      padding: theme.spacing(3)\n    },\n    closeButton: {\n      position: \"absolute\",\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      zIndex: 1\n    },\n    title: {\n      borderBottomColor: theme.palette.divider,\n      borderBottomStyle: \"solid\",\n      borderBottomWidth: 1,\n      lineHeight: 1,\n      marginBottom: theme.spacing(3),\n      paddingBottom: theme.spacing(3),\n      position: \"relative\",\n      \"&:not(:first-of-type)\": {\n        marginTop: theme.spacing(6)\n      }\n    },\n    error: {\n      \"&:not(:last-child)\": {\n        marginBottom: theme.spacing(3)\n      }\n    },\n    timestamp: {\n      marginBottom: theme.spacing(1)\n    }\n  });\n\ninterface Props {\n  errors: {\n    [jobId: string]: Array<{\n      message: string;\n      timestamp: number;\n      type: string;\n    }>;\n  };\n}\n\nclass Component extends React.Component<\n  Props &\n    WithStyles<typeof styles> &\n    RouteComponentProps<{ hostname: string; pid: string | undefined }>\n> {\n  handleClose = () => {\n    this.props.history.push(\"/\");\n  };\n\n  render() {\n    const { classes, errors, match } = this.props;\n    const { hostname, pid } = match.params;\n\n    let errorsForHost: {\n      [pid: string]: Array<{\n        lines: string[];\n        timestamp: number;\n      }>;\n    } = {};\n\n    for (const jobErrors of Object.values(errors)) {\n      for (const error of jobErrors) {\n        const match = error.message.match(/\\(pid=(\\d+), host=(.*?)\\)/);\n        if (match !== null && match[2] === hostname) {\n          const pid = match[1];\n          if (!(pid in errorsForHost)) {\n            errorsForHost[pid] = [];\n          }\n          errorsForHost[pid].push({\n            lines: error.message\n              .replace(/\\u001b\\[\\d+m/g, \"\") // eslint-disable-line no-control-regex\n              .trim()\n              .split(\"\\n\"),\n            timestamp: error.timestamp\n          });\n        }\n      }\n    }\n\n    const errorsToDisplay =\n      pid === undefined\n        ? errorsForHost\n        : { [pid]: pid in errorsForHost ? errorsForHost[pid] : [] };\n\n    return (\n      <Dialog\n        classes={{ paper: classes.paper }}\n        fullWidth\n        maxWidth=\"md\"\n        onClose={this.handleClose}\n        open\n        scroll=\"body\"\n      >\n        <IconButton className={classes.closeButton} onClick={this.handleClose}>\n          <CloseIcon />\n        </IconButton>\n        {Object.entries(errorsToDisplay).map(([pid, errors]) => (\n          <React.Fragment key={pid}>\n            <Typography className={classes.title}>\n              {hostname} (PID: {pid})\n            </Typography>\n            {errors.length > 0 ? (\n              errors.map(({ lines, timestamp }, index) => (\n                <div className={classes.error} key={index}>\n                  <Typography className={classes.timestamp}>\n                    Error at {new Date(timestamp * 1000).toLocaleString()}\n                  </Typography>\n                  <NumberedLines lines={lines} />\n                </div>\n              ))\n            ) : (\n              <Typography color=\"textSecondary\">No errors found.</Typography>\n            )}\n          </React.Fragment>\n        ))}\n      </Dialog>\n    );\n  }\n}\n\nexport default withStyles(styles)(Component);\n","import Dialog from \"@material-ui/core/Dialog\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport NumberedLines from \"./NumberedLines\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    paper: {\n      padding: theme.spacing(3)\n    },\n    closeButton: {\n      position: \"absolute\",\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      zIndex: 1\n    },\n    title: {\n      borderBottomColor: theme.palette.divider,\n      borderBottomStyle: \"solid\",\n      borderBottomWidth: 1,\n      lineHeight: 1,\n      marginBottom: theme.spacing(3),\n      paddingBottom: theme.spacing(3),\n      position: \"relative\",\n      \"&:not(:first-of-type)\": {\n        marginTop: theme.spacing(3)\n      }\n    }\n  });\n\ninterface Props {\n  ipToHostname: {\n    [ip: string]: string;\n  };\n  logs: {\n    [ip: string]: {\n      [pid: string]: string[];\n    };\n  };\n}\n\nclass Component extends React.Component<\n  Props &\n    WithStyles<typeof styles> &\n    RouteComponentProps<{ hostname: string; pid: string | undefined }>\n> {\n  handleClose = () => {\n    this.props.history.push(\"/\");\n  };\n\n  render() {\n    const { classes, ipToHostname, logs, match } = this.props;\n    const { hostname, pid } = match.params;\n\n    let logsForHost: {\n      [pid: string]: string[];\n    } = {};\n\n    for (const ip of Object.keys(ipToHostname)) {\n      if (ipToHostname[ip] === hostname) {\n        if (ip in logs) {\n          logsForHost = logs[ip];\n        }\n        break;\n      }\n    }\n\n    const logsToDisplay =\n      pid === undefined\n        ? logsForHost\n        : { [pid]: pid in logsForHost ? logsForHost[pid] : [] };\n\n    return (\n      <Dialog\n        classes={{ paper: classes.paper }}\n        fullWidth\n        maxWidth=\"md\"\n        onClose={this.handleClose}\n        open\n        scroll=\"body\"\n      >\n        <IconButton className={classes.closeButton} onClick={this.handleClose}>\n          <CloseIcon />\n        </IconButton>\n        {Object.entries(logsToDisplay).map(([pid, lines]) => (\n          <React.Fragment key={pid}>\n            <Typography className={classes.title}>\n              {hostname} (PID: {pid})\n            </Typography>\n            {lines.length > 0 ? (\n              <NumberedLines lines={lines} />\n            ) : (\n              <Typography color=\"textSecondary\">No logs found.</Typography>\n            )}\n          </React.Fragment>\n        ))}\n      </Dialog>\n    );\n  }\n}\n\nexport default withStyles(styles)(Component);\n","import { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport React from \"react\";\n\nconst blend = (\n  [r1, g1, b1]: number[],\n  [r2, g2, b2]: number[],\n  ratio: number\n) => [\n  r1 * (1 - ratio) + r2 * ratio,\n  g1 * (1 - ratio) + g2 * ratio,\n  b1 * (1 - ratio) + b2 * ratio\n];\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      borderColor: theme.palette.divider,\n      borderStyle: \"solid\",\n      borderWidth: 1\n    }\n  });\n\ninterface Props {\n  percent: number;\n  text: string;\n}\n\nclass Component extends React.Component<Props & WithStyles<typeof styles>> {\n  render() {\n    const { classes, text } = this.props;\n\n    let { percent } = this.props;\n    percent = Math.max(percent, 0);\n    percent = Math.min(percent, 100);\n\n    const minColor = [0, 255, 0];\n    const maxColor = [255, 0, 0];\n\n    const leftColor = minColor;\n    const rightColor = blend(minColor, maxColor, percent / 100);\n    const alpha = 0.2;\n\n    const gradient = `\n      linear-gradient(\n        to right,\n        rgba(${leftColor.join(\",\")}, ${alpha}) 0%,\n        rgba(${rightColor.join(\",\")}, ${alpha}) ${percent}%,\n        transparent ${percent}%\n      )\n    `;\n\n    // Use a nested `div` here because the right border is affected by the\n    // gradient background otherwise.\n    return (\n      <div className={classes.root}>\n        <div style={{ background: gradient }}>{text}</div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Component);\n","import Link from \"@material-ui/core/Link\";\nimport { Theme } from \"@material-ui/core/styles/createMuiTheme\";\nimport createStyles from \"@material-ui/core/styles/createStyles\";\nimport withStyles, { WithStyles } from \"@material-ui/core/styles/withStyles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { Route } from \"react-router\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport Errors from \"./Errors\";\nimport Logs from \"./Logs\";\nimport UsageBar from \"./UsageBar\";\n\nconst formatByteAmount = (amount: number, unit: \"mebibyte\" | \"gibibyte\") =>\n  `${(\n    amount / (unit === \"mebibyte\" ? Math.pow(1024, 2) : Math.pow(1024, 3))\n  ).toFixed(1)} ${unit === \"mebibyte\" ? \"MiB\" : \"GiB\"}`;\n\nconst formatUsage = (\n  used: number,\n  total: number,\n  unit: \"mebibyte\" | \"gibibyte\"\n) => {\n  const usedFormatted = formatByteAmount(used, unit);\n  const totalFormatted = formatByteAmount(total, unit);\n  const percent = (100 * used) / total;\n  return `${usedFormatted} / ${totalFormatted} (${percent.toFixed(0)}%)`;\n};\n\nconst formatUptime = (bootTime: number) => {\n  const uptimeSecondsTotal = Date.now() / 1000 - bootTime;\n  const uptimeSeconds = Math.floor(uptimeSecondsTotal) % 60;\n  const uptimeMinutes = Math.floor(uptimeSecondsTotal / 60) % 60;\n  const uptimeHours = Math.floor(uptimeSecondsTotal / 60 / 60) % 24;\n  const uptimeDays = Math.floor(uptimeSecondsTotal / 60 / 60 / 24);\n  const pad = (value: number) => value.toString().padStart(2, \"0\");\n  return [\n    uptimeDays ? `${uptimeDays}d` : \"\",\n    `${pad(uptimeHours)}h`,\n    `${pad(uptimeMinutes)}m`,\n    `${pad(uptimeSeconds)}s`\n  ].join(\" \");\n};\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      padding: theme.spacing(2),\n      \"& > :not(:first-child)\": {\n        marginTop: theme.spacing(2)\n      }\n    },\n    cell: {\n      padding: theme.spacing(1),\n      textAlign: \"center\",\n      \"&:last-child\": {\n        paddingRight: theme.spacing(1)\n      }\n    },\n    expandCollapseCell: {\n      cursor: \"pointer\"\n    },\n    expandCollapseIcon: {\n      color: theme.palette.text.secondary,\n      fontSize: \"1.5em\",\n      verticalAlign: \"middle\"\n    },\n    cpuUsage: {\n      minWidth: 60\n    },\n    secondary: {\n      color: theme.palette.text.secondary\n    }\n  });\n\n// TODO(mitchellstern): Add JSON schema validation for the node info.\ninterface NodeInfo {\n  clients: Array<{\n    now: number;\n    hostname: string;\n    ip: string;\n    boot_time: number;\n    cpu: number;\n    cpus: [number, number];\n    mem: [number, number, number];\n    disk: {\n      [path: string]: {\n        total: number;\n        free: number;\n        used: number;\n        percent: number;\n      };\n    };\n    load_avg: [[number, number, number], [number, number, number]];\n    net: [number, number];\n    workers: Array<{\n      pid: number;\n      create_time: number;\n      name: string;\n      cmdline: string[];\n      cpu_percent: number;\n      cpu_times: {\n        system: number;\n        children_system: number;\n        user: number;\n        children_user: number;\n      };\n      memory_info: {\n        pageins: number;\n        pfaults: number;\n        vms: number;\n        rss: number;\n      };\n      memory_full_info: null;\n    }>;\n  }>;\n  logs: {\n    [ip: string]: {\n      [pid: string]: string[];\n    };\n  };\n  errors: {\n    [jobId: string]: Array<{\n      message: string;\n      timestamp: number;\n      type: string;\n    }>;\n  };\n}\n\ninterface State {\n  response: {\n    result: NodeInfo;\n    timestamp: number;\n  } | null;\n  error: string | null;\n  expanded: {\n    [hostname: string]: boolean;\n  };\n}\n\nclass Component extends React.Component<WithStyles<typeof styles>, State> {\n  state: State = {\n    response: null,\n    error: null,\n    expanded: {}\n  };\n\n  fetchNodeInfo = async () => {\n    try {\n      const url = new URL(\n        \"/api/node_info\",\n        process.env.NODE_ENV === \"development\"\n          ? \"http://localhost:8080\"\n          : window.location.href\n      );\n      const response = await fetch(url.toString());\n      const json = await response.json();\n      this.setState({ response: json, error: null });\n    } catch (error) {\n      this.setState({ response: null, error: error.toString() });\n    } finally {\n      setTimeout(this.fetchNodeInfo, 1000);\n    }\n  };\n\n  toggleExpand = (hostname: string) => () => {\n    this.setState(state => ({\n      expanded: {\n        ...state.expanded,\n        [hostname]: !state.expanded[hostname]\n      }\n    }));\n  };\n\n  async componentDidMount() {\n    await this.fetchNodeInfo();\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { response, error, expanded } = this.state;\n\n    if (error !== null) {\n      return (\n        <Typography className={classes.root} color=\"error\">\n          {error}\n        </Typography>\n      );\n    }\n\n    if (response === null) {\n      return (\n        <Typography className={classes.root} color=\"textSecondary\">\n          Loading...\n        </Typography>\n      );\n    }\n\n    const { result, timestamp } = response;\n\n    const logCounts: {\n      [hostname: string]: {\n        perWorker: {\n          [pid: string]: number;\n        };\n        total: number;\n      };\n    } = {};\n\n    const errorCounts: {\n      [hostname: string]: {\n        perWorker: {\n          [pid: string]: number;\n        };\n        total: number;\n      };\n    } = {};\n\n    for (const client of result.clients) {\n      logCounts[client.hostname] = { perWorker: {}, total: 0 };\n      errorCounts[client.hostname] = { perWorker: {}, total: 0 };\n      for (const worker of client.workers) {\n        logCounts[client.hostname].perWorker[worker.pid] = 0;\n        errorCounts[client.hostname].perWorker[worker.pid] = 0;\n      }\n    }\n\n    for (const ip of Object.keys(result.logs)) {\n      let hostname: string | null = null;\n      for (const client of result.clients) {\n        if (ip === client.ip) {\n          hostname = client.hostname;\n          break;\n        }\n      }\n      if (hostname !== null) {\n        for (const pid of Object.keys(result.logs[ip])) {\n          const logCount = result.logs[ip][pid].length;\n          if (pid in logCounts[hostname].perWorker) {\n            logCounts[hostname].perWorker[pid] = logCount;\n          }\n          logCounts[hostname].total += logCount;\n        }\n      }\n    }\n\n    for (const jobErrors of Object.values(result.errors)) {\n      for (const error of jobErrors) {\n        const match = error.message.match(/\\(pid=(\\d+), host=(.*?)\\)/);\n        if (match !== null) {\n          const pid = match[1];\n          const hostname = match[2];\n          if (hostname in errorCounts) {\n            if (pid in errorCounts[hostname].perWorker) {\n              errorCounts[hostname].perWorker[pid]++;\n            }\n            errorCounts[hostname].total++;\n          }\n        }\n      }\n    }\n\n    const ipToHostname: { [ip: string]: string } = {};\n    for (const client of result.clients) {\n      ipToHostname[client.ip] = client.hostname;\n    }\n\n    return (\n      <div className={classes.root}>\n        <Typography variant=\"h5\">Ray Dashboard</Typography>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell className={classes.cell} />\n              <TableCell className={classes.cell}>Hostname</TableCell>\n              <TableCell className={classes.cell}>Workers</TableCell>\n              <TableCell className={classes.cell}>Uptime</TableCell>\n              <TableCell className={classes.cell}>CPU</TableCell>\n              <TableCell className={classes.cell}>RAM</TableCell>\n              <TableCell className={classes.cell}>Disk</TableCell>\n              {/*<TableCell className={classes.cell}>Sent</TableCell>*/}\n              {/*<TableCell className={classes.cell}>Received</TableCell>*/}\n              <TableCell className={classes.cell}>Logs</TableCell>\n              <TableCell className={classes.cell}>Errors</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {result.clients.map(client => {\n              return (\n                <React.Fragment key={client.hostname}>\n                  <TableRow hover>\n                    <TableCell\n                      className={classNames(\n                        classes.cell,\n                        classes.expandCollapseCell\n                      )}\n                      onClick={this.toggleExpand(client.hostname)}\n                    >\n                      {!expanded[client.hostname] ? (\n                        <AddIcon className={classes.expandCollapseIcon} />\n                      ) : (\n                        <RemoveIcon className={classes.expandCollapseIcon} />\n                      )}\n                    </TableCell>\n                    <TableCell className={classes.cell}>\n                      {client.hostname}\n                    </TableCell>\n                    <TableCell className={classes.cell}>\n                      {client.workers.length}\n                    </TableCell>\n                    <TableCell className={classes.cell}>\n                      {formatUptime(client.boot_time)}\n                    </TableCell>\n                    <TableCell className={classes.cell}>\n                      <div className={classes.cpuUsage}>\n                        <UsageBar\n                          percent={client.cpu}\n                          text={`${client.cpu.toFixed(1)}%`}\n                        />\n                      </div>\n                    </TableCell>\n                    <TableCell className={classes.cell}>\n                      <UsageBar\n                        percent={\n                          (100 * (client.mem[0] - client.mem[1])) /\n                          client.mem[0]\n                        }\n                        text={formatUsage(\n                          client.mem[0] - client.mem[1],\n                          client.mem[0],\n                          \"gibibyte\"\n                        )}\n                      />\n                    </TableCell>\n                    <TableCell className={classes.cell}>\n                      <UsageBar\n                        percent={\n                          (100 * client.disk[\"/\"].used) / client.disk[\"/\"].total\n                        }\n                        text={formatUsage(\n                          client.disk[\"/\"].used,\n                          client.disk[\"/\"].total,\n                          \"gibibyte\"\n                        )}\n                      />\n                    </TableCell>\n                    {/*<TableCell className={classes.cell}>{(client.net[0] / Math.pow(1024, 2)).toFixed(3)} MiB/s</TableCell>*/}\n                    {/*<TableCell className={classes.cell}>{(client.net[1] / Math.pow(1024, 2)).toFixed(3)} MiB/s</TableCell>*/}\n                    <TableCell className={classes.cell}>\n                      {logCounts[client.hostname].total === 0 ? (\n                        <span className={classes.secondary}>No logs</span>\n                      ) : (\n                        <Link\n                          component={RouterLink}\n                          to={`/logs/${client.hostname}`}\n                        >\n                          View all logs (\n                          {logCounts[client.hostname].total.toLocaleString()}{\" \"}\n                          {logCounts[client.hostname].total === 1\n                            ? \"line\"\n                            : \"lines\"}\n                          )\n                        </Link>\n                      )}\n                    </TableCell>\n                    <TableCell className={classes.cell}>\n                      {errorCounts[client.hostname].total === 0 ? (\n                        <span className={classes.secondary}>No errors</span>\n                      ) : (\n                        <Link\n                          component={RouterLink}\n                          to={`/errors/${client.hostname}`}\n                        >\n                          View all errors (\n                          {errorCounts[client.hostname].total.toLocaleString()})\n                        </Link>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                  {expanded[client.hostname] &&\n                    client.workers.map((worker, index: number) => (\n                      <TableRow hover key={index}>\n                        <TableCell className={classes.cell} />\n                        <TableCell className={classes.cell}>\n                          {worker.cmdline[0].split(\":\", 2)[0]} (PID:{\" \"}\n                          {worker.pid})\n                        </TableCell>\n                        <TableCell className={classes.cell}>\n                          {worker.cmdline[0].split(\":\", 2)[1] || (\n                            <span className={classes.secondary}>Idle</span>\n                          )}\n                        </TableCell>\n                        <TableCell className={classes.cell}>\n                          {formatUptime(worker.create_time)}\n                        </TableCell>\n                        <TableCell className={classes.cell}>\n                          <UsageBar\n                            percent={worker.cpu_percent}\n                            text={`${worker.cpu_percent.toFixed(1)}%`}\n                          />\n                        </TableCell>\n                        <TableCell className={classes.cell}>\n                          <UsageBar\n                            percent={\n                              (100 * worker.memory_info.rss) / client.mem[0]\n                            }\n                            text={formatByteAmount(\n                              worker.memory_info.rss,\n                              \"mebibyte\"\n                            )}\n                          />\n                        </TableCell>\n                        <TableCell className={classes.cell}>\n                          <span className={classes.secondary}>\n                            Not available\n                          </span>\n                        </TableCell>\n                        <TableCell className={classes.cell}>\n                          {logCounts[client.hostname].perWorker[worker.pid] ===\n                          0 ? (\n                            <span className={classes.secondary}>No logs</span>\n                          ) : (\n                            <Link\n                              component={RouterLink}\n                              to={`/logs/${client.hostname}/${worker.pid}`}\n                            >\n                              View log (\n                              {logCounts[client.hostname].perWorker[\n                                worker.pid\n                              ].toLocaleString()}{\" \"}\n                              {logCounts[client.hostname].perWorker[\n                                worker.pid\n                              ] === 1\n                                ? \"line\"\n                                : \"lines\"}\n                              )\n                            </Link>\n                          )}\n                        </TableCell>\n                        <TableCell className={classes.cell}>\n                          {errorCounts[client.hostname].perWorker[\n                            worker.pid\n                          ] === 0 ? (\n                            <span className={classes.secondary}>No errors</span>\n                          ) : (\n                            <Link\n                              component={RouterLink}\n                              to={`/errors/${client.hostname}/${worker.pid}`}\n                            >\n                              View errors (\n                              {errorCounts[client.hostname].perWorker[\n                                worker.pid\n                              ].toLocaleString()}\n                              )\n                            </Link>\n                          )}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                </React.Fragment>\n              );\n            })}\n          </TableBody>\n        </Table>\n        <Typography align=\"center\">\n          Last updated: {new Date(timestamp * 1000).toLocaleString()}\n        </Typography>\n        <Route\n          path=\"/logs/:hostname/:pid?\"\n          render={props => (\n            <Logs {...props} ipToHostname={ipToHostname} logs={result.logs} />\n          )}\n        />\n        <Route\n          path=\"/errors/:hostname/:pid?\"\n          render={props => <Errors {...props} errors={result.errors} />}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Component);\n","import CssBaseline from \"@material-ui/core/CssBaseline\";\nimport React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Dashboard from \"./Dashboard\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <CssBaseline />\n        <Dashboard />\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"typeface-roboto\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}