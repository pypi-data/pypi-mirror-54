# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build-and-test:
    docker:
      - image: circleci/python:3.7
        environment:
          PGDBNAME: tormordb
      - image: circleci/postgres:11
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: tormordb
    working_directory: ~/repo
    steps:
      # Get the code
      - checkout

      # Cache can be tricky at first, but this means
      # Please, restore my cache (what is actually on the cache will be defined later)
      # if the text key `deps-{{ checksum "poetry.lock" }}` changes (and it WILL change everytime poetry.lock is updated since we rely on its checksum)
      # and poetry.lock is updated every time we add a new dependency to our project
      - restore_cache:
          keys:
            - deps-{{ checksum "pyproject.toml" }}
            - deps-

      # Let's install the dependencies
      - run:
          name: install flit
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install flit

      - run:
          name: install dependencies
          command: |
            . venv/bin/activate
            flit install
      - save_cache:
          paths:
            - ./venv
          key: deps-{{ checksum "pyproject.toml" }}
      
      # TODO: Run black code formatter
      # TODO: Run mypy/pyre

      # Last step, runs our tests ommiting the dependencies path (so we don't take their coverage into account)
      # And send our coverage somewhere, in this case, coveralls
      # - run:
      #     name: Run Pytest, report coverage
      #     command: |
      #       coverage run --omit="/home/circleci/.cache/pypoetry/virtualenvs" -m pytest
      #       coveralls
      - run: mkdir test-reports
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            PGDBNAME=circle_test pytest -v
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
# This is the definition of another job, the one we use to publish the package to PyPI
  # deployment:
  
  #   # Same environment
  #   docker:
  #     - image: circleci/python:3.7
  #   steps:

  #     # Gets the code
  #     - checkout

  #     # Use `poetry publish` to Publish the package using username and password from CircleCI environment variables
  #     # Which can be configured inside CircleCI's interface
  #     - run:
  #         name: Push to PyPI
  #         command: |
  #           poetry publish --build --username "${PYPI_USERNAME}" --password "${PYPI_PASSWORD}" --no-interaction

# In the workflows section, we specify when we want to run the jobs defined
workflows:
  version: 2

  # The build-and-test we will run EVERYTIME a piece of code changes
  build-and-test-workflow:
    jobs:
      - build-and-test
  
  # TODO: Enable deployment
  # The deployment workflow publishes the package
  # deployment-workflow:
  #   jobs:

  #     # Runs build and test, but now just on Git tags (created from a GitHub release)
  #     - build-and-test:
  #         filters:
  #           tags:
  #             only: /v[0-9]+(\.[0-9]+)*/
  #           branches:
  #             ignore: /.*/

  #     # Runs the deployment job, just with the tags as well
  #     - deployment:
  #         requires:
  #           - build-and-test
  #         filters:
  #             tags:
  #               only: /v[0-9]+(\.[0-9]+)*/
  #             branches:
  #               ignore: /.*/
